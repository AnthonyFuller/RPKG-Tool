#include "global.h"

std::vector<rpkg> rpkgs;
int percent_progress = 0;
std::string response_string = "";
std::string timing_string = "";
std::vector<char> response_data;
std::string task_status_string = "";
int task_single_status = READY;
int task_multiple_status = READY;
int gui_control = READY;
std::string localization_string = "";
std::string hashes_with_no_reverse_depends = "";
std::string hash_direct_depends = "";
std::string hash_list_string = "";
std::string patch_deletion_list_string = "";
std::vector<std::string> hashes_depends_map_rpkg_file_paths;
std::vector<std::map<uint64_t, uint64_t>> hashes_depends_map;
int hash_list_version = 0;
bool hash_list_loaded = false;
std::map<uint64_t, uint64_t> hash_list_hash_map;
std::vector<std::string> hash_list_hash_file_names;
std::vector<std::string> hash_list_hash_value_strings;
std::vector<std::string> hash_list_hash_strings;
std::string search_imported_hashes_string = "";
std::string search_hash_list_string = "";
std::string rpkg_file_paths_hash_is_in = "";
int pcm_sample_size = 0;
int pcm_sample_rate = 0;
int pcm_channels = 0;
std::string extracted_wem_string = "";
std::map<uint32_t, std::string>* property_map;
std::map<std::string, uint32_t>* type_map;
std::map<std::string, std::map<uint32_t, std::string>>* enum_map;
bool resource_tool_initialized = false;
bool property_map_initialized = false;
bool enum_map_initialized = false;
bool type_map_initialized = false;
std::vector<temp> temps;
std::map<uint64_t, uint32_t> temps_map;
std::vector<matrix43> temp_world_coordinates;
std::vector<std::string> temp_world_coordinates_property_names;
std::map<uint32_t, uint32_t> temp_world_coordinates_map;
std::vector<std::string> prim_asset_file_names;
uint32_t prim_asset_file_count = 0;
std::string map_editor_output_path = "";
std::vector<std::string> map_editor_parents;
std::vector<std::string> map_editor_property_names;
std::vector<std::string> map_editor_matrixes;
std::vector<std::vector<std::string>> map_editor_glb_file_names;
std::map<std::string, uint32_t> map_editor_prim_file_names;
std::map<std::string, uint32_t> map_editor_resource_map;
std::string map_editor_godot_resources = "";
std::string map_editor_godot_nodes = "";
std::string map_editor_temp_matrix = "";
std::vector<std::string> map_editor_godot_import_property_strings;
std::map<std::string, uint32_t> map_editor_godot_import_property_strings_map;
std::vector<matrix43> map_editor_godot_import_matrixes;
std::vector<uint64_t> entity_id_master_list;
std::map<uint64_t, uint64_t> entity_id_master_list_map;
std::vector<uint32_t> entity_id_tblu_index;
std::vector<uint32_t> entity_id_temps_index;
std::vector<uint32_t> entity_id_logicalParent;
std::vector<std::string> entity_id_logicalParent_string;
std::vector<uint64_t> entity_id_m_eidParent;
std::vector<bool> entity_id_has_matrix;
bool interative_mode = false;
void* resource_tool_dll;
ConvertMemoryResourceToJson resource_tool_ConvertMemoryResourceToJson;
ConvertMemoryJsonToResource resource_tool_ConvertMemoryJsonToResource;
GetJsonFromMemory resource_tool_GetJsonFromMemory;

void initialize_type_map()
{
    if (!type_map_initialized)
    {
        type_map_initialized = true;

        type_map = new std::map<std::string, uint32_t>();

        (*type_map)["int8"] = TYPE_INT8;
        (*type_map)["uint8"] = TYPE_UINT8;
        (*type_map)["int16"] = TYPE_INT16;
        (*type_map)["uint16"] = TYPE_UINT16;
        (*type_map)["int32"] = TYPE_INT32;
        (*type_map)["uint32"] = TYPE_UINT32;
        (*type_map)["int64"] = TYPE_INT64;
        (*type_map)["uint64"] = TYPE_UINT64;
        (*type_map)["float32"] = TYPE_FLOAT32;
        (*type_map)["float64"] = TYPE_FLOAT64;
        (*type_map)["bool"] = TYPE_BOOL;
        (*type_map)["ZString"] = TYPE_ZSTRING;
        (*type_map)["ZVariant"] = TYPE_ZVARIANT;
        (*type_map)["SPhysicsSaveData/m_bIsInPhysicsWorld"] = TYPE_BOOL;
        (*type_map)["TArray<SPhysicsSaveData>/m_bIsInPhysicsWorld"] = TYPE_BOOL;
        (*type_map)["SPhysicsSaveData/m_bIsKinematicBody"] = TYPE_BOOL;
        (*type_map)["TArray<SPhysicsSaveData>/m_bIsKinematicBody"] = TYPE_BOOL;
        (*type_map)["SPhysicsSaveData/m_bIsVisible"] = TYPE_BOOL;
        (*type_map)["TArray<SPhysicsSaveData>/m_bIsVisible"] = TYPE_BOOL;
        (*type_map)["ZGameTime/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZGameTime>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActBehaviorEntitySaveData/m_bStartedSignalSent"] = TYPE_BOOL;
        (*type_map)["TArray<SActBehaviorEntitySaveData>/m_bStartedSignalSent"] = TYPE_BOOL;
        (*type_map)["SActBehaviorEntitySaveData/m_bReachedSignalSent"] = TYPE_BOOL;
        (*type_map)["TArray<SActBehaviorEntitySaveData>/m_bReachedSignalSent"] = TYPE_BOOL;
        (*type_map)["SActBehaviorEntitySaveData/m_nState"] = TYPE_ENUM;
        (*type_map)["TArray<SActBehaviorEntitySaveData>/m_nState"] = TYPE_ENUM;
        (*type_map)["SActBehaviorEntitySaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActBehaviorEntitySaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActBehaviorEntitySaveData/m_bForceTimeout"] = TYPE_BOOL;
        (*type_map)["TArray<SActBehaviorEntitySaveData>/m_bForceTimeout"] = TYPE_BOOL;
        (*type_map)["SGetHelpOrderSaveData/m_helpType"] = TYPE_ENUM;
        (*type_map)["TArray<SGetHelpOrderSaveData>/m_helpType"] = TYPE_ENUM;
        (*type_map)["SGetHelpOrderSaveData/m_rInitialGuard"] = TYPE_UINT32;
        (*type_map)["TArray<SGetHelpOrderSaveData>/m_rInitialGuard"] = TYPE_UINT32;
        (*type_map)["SActorProviderDirectSaveData/m_bRunning"] = TYPE_BOOL;
        (*type_map)["TArray<SActorProviderDirectSaveData>/m_bRunning"] = TYPE_BOOL;
        (*type_map)["float4/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<float4>/x"] = TYPE_FLOAT32;
        (*type_map)["float4/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<float4>/y"] = TYPE_FLOAT32;
        (*type_map)["float4/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<float4>/z"] = TYPE_FLOAT32;
        (*type_map)["float4/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<float4>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdActorSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SCrowdActorSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SCrowdActorSaveData/m_eWantedSpeed"] = TYPE_ENUM;
        (*type_map)["TArray<SCrowdActorSaveData>/m_eWantedSpeed"] = TYPE_ENUM;
        (*type_map)["SCrowdActorSaveData/m_eWantedGait"] = TYPE_ENUM;
        (*type_map)["TArray<SCrowdActorSaveData>/m_eWantedGait"] = TYPE_ENUM;
        (*type_map)["SCrowdActorSaveData/m_nAnimSourceID"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdActorSaveData>/m_nAnimSourceID"] = TYPE_UINT32;
        (*type_map)["SCrowdActorSaveData/m_nAnimSourceIndex"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdActorSaveData>/m_nAnimSourceIndex"] = TYPE_UINT32;
        (*type_map)["SCrowdActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdActorSaveData/m_fSpeed"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdActorSaveData>/m_fSpeed"] = TYPE_FLOAT32;
        (*type_map)["SCrowdActorSaveData/m_eMood"] = TYPE_ENUM;
        (*type_map)["TArray<SCrowdActorSaveData>/m_eMood"] = TYPE_ENUM;
        (*type_map)["SCollidingParticle/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCollidingParticle>/x"] = TYPE_FLOAT32;
        (*type_map)["SCollidingParticle/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCollidingParticle>/y"] = TYPE_FLOAT32;
        (*type_map)["SCollidingParticle/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCollidingParticle>/z"] = TYPE_FLOAT32;
        (*type_map)["SCollidingParticle/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCollidingParticle>/w"] = TYPE_FLOAT32;
        (*type_map)["SCollidingParticle/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCollidingParticle>/x"] = TYPE_FLOAT32;
        (*type_map)["SCollidingParticle/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCollidingParticle>/y"] = TYPE_FLOAT32;
        (*type_map)["SCollidingParticle/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCollidingParticle>/z"] = TYPE_FLOAT32;
        (*type_map)["SCollidingParticle/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCollidingParticle>/w"] = TYPE_FLOAT32;
        (*type_map)["SCollidingParticle/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCollidingParticle>/x"] = TYPE_FLOAT32;
        (*type_map)["SCollidingParticle/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCollidingParticle>/y"] = TYPE_FLOAT32;
        (*type_map)["SCollidingParticle/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCollidingParticle>/z"] = TYPE_FLOAT32;
        (*type_map)["SCollidingParticle/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCollidingParticle>/w"] = TYPE_FLOAT32;
        (*type_map)["SCollidingParticle/m_nColor"] = TYPE_UINT32;
        (*type_map)["TArray<SCollidingParticle>/m_nColor"] = TYPE_UINT32;
        (*type_map)["SCollidingParticle/m_fSize"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCollidingParticle>/m_fSize"] = TYPE_FLOAT32;
        (*type_map)["SAudioEmitterSwitchSaveData/m_nGroupId"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioEmitterSwitchSaveData>/m_nGroupId"] = TYPE_UINT32;
        (*type_map)["SAudioEmitterSwitchSaveData/m_nStateId"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioEmitterSwitchSaveData>/m_nStateId"] = TYPE_UINT32;
        (*type_map)["SVector2/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVector2>/x"] = TYPE_FLOAT32;
        (*type_map)["SVector2/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVector2>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector2/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector2>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector2/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector2>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector2/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector2>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector2/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector2>/y"] = TYPE_FLOAT32;
        (*type_map)["SItemStorageSaveData/m_Storage"] = TYPE_UINT32;
        (*type_map)["TArray<SItemStorageSaveData>/m_Storage"] = TYPE_UINT32;
        (*type_map)["SBehaviorTreeInputPinCondition/m_sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SBehaviorTreeInputPinCondition>/m_sName"] = TYPE_ZSTRING;
        (*type_map)["SItemWeaponSaveData/m_nExtraMagazineBullets"] = TYPE_UINT32;
        (*type_map)["TArray<SItemWeaponSaveData>/m_nExtraMagazineBullets"] = TYPE_UINT32;
        (*type_map)["SItemWeaponSaveData/m_ePendingDeathContext"] = TYPE_ENUM;
        (*type_map)["TArray<SItemWeaponSaveData>/m_ePendingDeathContext"] = TYPE_ENUM;
        (*type_map)["SItemWeaponSaveData/m_eDeathContext"] = TYPE_ENUM;
        (*type_map)["TArray<SItemWeaponSaveData>/m_eDeathContext"] = TYPE_ENUM;
        (*type_map)["ZResourceID/m_uri"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZResourceID>/m_uri"] = TYPE_ZSTRING;
        (*type_map)["SEnvironmentConfigResourceEntry/Name"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEnvironmentConfigResourceEntry>/Name"] = TYPE_ZSTRING;
        (*type_map)["SEnvironmentConfigResourceEntry/m_uri"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEnvironmentConfigResourceEntry>/m_uri"] = TYPE_ZSTRING;
        (*type_map)["SEnvironmentConfigResourceEntry/m_uri"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEnvironmentConfigResourceEntry>/m_uri"] = TYPE_ZSTRING;
        (*type_map)["SEnvironmentConfigResourceEntry/m_uri"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEnvironmentConfigResourceEntry>/m_uri"] = TYPE_ZSTRING;
        (*type_map)["SEnvironmentConfigResourceEntry/m_uri"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEnvironmentConfigResourceEntry>/m_uri"] = TYPE_ZSTRING;
        (*type_map)["SEnvironmentConfigResource/Name"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEnvironmentConfigResource>/Name"] = TYPE_ZSTRING;
        (*type_map)["SEnvironmentConfigResource/m_uri"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEnvironmentConfigResource>/m_uri"] = TYPE_ZSTRING;
        (*type_map)["SEnvironmentConfigResource/m_uri"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEnvironmentConfigResource>/m_uri"] = TYPE_ZSTRING;
        (*type_map)["SEnvironmentConfigResource/m_uri"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEnvironmentConfigResource>/m_uri"] = TYPE_ZSTRING;
        (*type_map)["SEnvironmentConfigResource/m_uri"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEnvironmentConfigResource>/m_uri"] = TYPE_ZSTRING;
        (*type_map)["ZAMDEvent/m_nEventID"] = TYPE_UINT32;
        (*type_map)["TArray<ZAMDEvent>/m_nEventID"] = TYPE_UINT32;
        (*type_map)["ZAMDEvent/m_fStartFraction"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZAMDEvent>/m_fStartFraction"] = TYPE_FLOAT32;
        (*type_map)["ZAMDEvent/m_fDuration"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZAMDEvent>/m_fDuration"] = TYPE_FLOAT32;
        (*type_map)["ZAMDEvent/m_customData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<ZAMDEvent>/m_customData"] = TYPE_ZVARIANT;
        (*type_map)["ZAMDEventTrack/m_sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZAMDEventTrack>/m_sName"] = TYPE_ZSTRING;
        (*type_map)["ZAMDEventTrack/m_nEventID"] = TYPE_UINT32;
        (*type_map)["TArray<ZAMDEventTrack>/m_nEventID"] = TYPE_UINT32;
        (*type_map)["ZAMDEventTrack/m_fStartFraction"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZAMDEventTrack>/m_fStartFraction"] = TYPE_FLOAT32;
        (*type_map)["ZAMDEventTrack/m_fDuration"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZAMDEventTrack>/m_fDuration"] = TYPE_FLOAT32;
        (*type_map)["ZAMDEventTrack/m_customData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<ZAMDEventTrack>/m_customData"] = TYPE_ZVARIANT;
        (*type_map)["ZAMDTake/m_sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZAMDTake>/m_sName"] = TYPE_ZSTRING;
        (*type_map)["ZAMDTake/m_nEventID"] = TYPE_UINT32;
        (*type_map)["TArray<ZAMDTake>/m_nEventID"] = TYPE_UINT32;
        (*type_map)["ZAMDTake/m_fStartFraction"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZAMDTake>/m_fStartFraction"] = TYPE_FLOAT32;
        (*type_map)["ZAMDTake/m_fDuration"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZAMDTake>/m_fDuration"] = TYPE_FLOAT32;
        (*type_map)["ZAMDTake/m_customData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<ZAMDTake>/m_customData"] = TYPE_ZVARIANT;
        (*type_map)["ZAMDTake/m_customData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<ZAMDTake>/m_customData"] = TYPE_ZVARIANT;
        (*type_map)["ZAMDTake/m_nSyncTrackIndex"] = TYPE_INT32;
        (*type_map)["TArray<ZAMDTake>/m_nSyncTrackIndex"] = TYPE_INT32;
        (*type_map)["SDestructibleInteractionHandlerData/m_fSettleTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleInteractionHandlerData>/m_fSettleTime"] = TYPE_FLOAT32;
        (*type_map)["ZHM5CrowdEventConsumer.SCrowdSoundEventData/m_fAttenuation"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHM5CrowdEventConsumer.SCrowdSoundEventData>/m_fAttenuation"] = TYPE_FLOAT32;
        (*type_map)["ZHM5CrowdEventConsumer.SCrowdSoundEventData/m_fPitch"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHM5CrowdEventConsumer.SCrowdSoundEventData>/m_fPitch"] = TYPE_FLOAT32;
        (*type_map)["STimerEntityCommandSaveData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<STimerEntityCommandSaveData>/m_eType"] = TYPE_ENUM;
        (*type_map)["STimerEntityCommandSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<STimerEntityCommandSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["STimerEntityCommandSaveData/m_fInterval"] = TYPE_FLOAT32;
        (*type_map)["TArray<STimerEntityCommandSaveData>/m_fInterval"] = TYPE_FLOAT32;
        (*type_map)["STimerEntityStateSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<STimerEntityStateSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["STimerEntityStateSaveData/m_fNextEventTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<STimerEntityStateSaveData>/m_fNextEventTime"] = TYPE_FLOAT32;
        (*type_map)["STimerEntityStateSaveData/m_bPending"] = TYPE_BOOL;
        (*type_map)["TArray<STimerEntityStateSaveData>/m_bPending"] = TYPE_BOOL;
        (*type_map)["SGameTimersSaveData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<SGameTimersSaveData>/m_eType"] = TYPE_ENUM;
        (*type_map)["SGameTimersSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SGameTimersSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SGameTimersSaveData/m_fInterval"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameTimersSaveData>/m_fInterval"] = TYPE_FLOAT32;
        (*type_map)["SGameTimersSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SGameTimersSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SGameTimersSaveData/m_fNextEventTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameTimersSaveData>/m_fNextEventTime"] = TYPE_FLOAT32;
        (*type_map)["SGameTimersSaveData/m_bPending"] = TYPE_BOOL;
        (*type_map)["TArray<SGameTimersSaveData>/m_bPending"] = TYPE_BOOL;
        (*type_map)["SMatrix/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/x"] = TYPE_FLOAT32;
        (*type_map)["SMatrix/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/y"] = TYPE_FLOAT32;
        (*type_map)["SMatrix/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/z"] = TYPE_FLOAT32;
        (*type_map)["SMatrix/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/w"] = TYPE_FLOAT32;
        (*type_map)["SMatrix/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/x"] = TYPE_FLOAT32;
        (*type_map)["SMatrix/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/y"] = TYPE_FLOAT32;
        (*type_map)["SMatrix/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/z"] = TYPE_FLOAT32;
        (*type_map)["SMatrix/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/w"] = TYPE_FLOAT32;
        (*type_map)["SMatrix/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/x"] = TYPE_FLOAT32;
        (*type_map)["SMatrix/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/y"] = TYPE_FLOAT32;
        (*type_map)["SMatrix/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/z"] = TYPE_FLOAT32;
        (*type_map)["SMatrix/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/w"] = TYPE_FLOAT32;
        (*type_map)["SMatrix/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/x"] = TYPE_FLOAT32;
        (*type_map)["SMatrix/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/y"] = TYPE_FLOAT32;
        (*type_map)["SMatrix/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/z"] = TYPE_FLOAT32;
        (*type_map)["SMatrix/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix>/w"] = TYPE_FLOAT32;
        (*type_map)["SAIEventSaveData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<SAIEventSaveData>/m_eType"] = TYPE_ENUM;
        (*type_map)["SAIEventSaveData/m_bHandled"] = TYPE_BOOL;
        (*type_map)["TArray<SAIEventSaveData>/m_bHandled"] = TYPE_BOOL;
        (*type_map)["SAIEventSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SAIEventSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SAIEventSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SAIEventSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SKnownEntitySaveData/m_nSharedIndex"] = TYPE_INT32;
        (*type_map)["TArray<SKnownEntitySaveData>/m_nSharedIndex"] = TYPE_INT32;
        (*type_map)["SKnownEntitySaveData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<SKnownEntitySaveData>/m_eType"] = TYPE_ENUM;
        (*type_map)["SKnownEntitySaveData/m_bHandled"] = TYPE_BOOL;
        (*type_map)["TArray<SKnownEntitySaveData>/m_bHandled"] = TYPE_BOOL;
        (*type_map)["SKnownEntitySaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SKnownEntitySaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SKnownEntitySaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SKnownEntitySaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SKnownEntitySaveData/m_nBooleanEvents"] = TYPE_UINT32;
        (*type_map)["TArray<SKnownEntitySaveData>/m_nBooleanEvents"] = TYPE_UINT32;
        (*type_map)["SKnownEntitySaveData/m_nBooleanEventsHandled"] = TYPE_UINT32;
        (*type_map)["TArray<SKnownEntitySaveData>/m_nBooleanEventsHandled"] = TYPE_UINT32;
        (*type_map)["SKnownEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnownEntitySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SKnownEntitySaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SKnownEntitySaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SKnownEntitySaveData/m_nGoals"] = TYPE_UINT16;
        (*type_map)["TArray<SKnownEntitySaveData>/m_nGoals"] = TYPE_UINT16;
        (*type_map)["SKnowledgeSaveData/m_nSharedIndex"] = TYPE_INT32;
        (*type_map)["TArray<SKnowledgeSaveData>/m_nSharedIndex"] = TYPE_INT32;
        (*type_map)["SKnowledgeSaveData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<SKnowledgeSaveData>/m_eType"] = TYPE_ENUM;
        (*type_map)["SKnowledgeSaveData/m_bHandled"] = TYPE_BOOL;
        (*type_map)["TArray<SKnowledgeSaveData>/m_bHandled"] = TYPE_BOOL;
        (*type_map)["SKnowledgeSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SKnowledgeSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SKnowledgeSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SKnowledgeSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SKnowledgeSaveData/m_nBooleanEvents"] = TYPE_UINT32;
        (*type_map)["TArray<SKnowledgeSaveData>/m_nBooleanEvents"] = TYPE_UINT32;
        (*type_map)["SKnowledgeSaveData/m_nBooleanEventsHandled"] = TYPE_UINT32;
        (*type_map)["TArray<SKnowledgeSaveData>/m_nBooleanEventsHandled"] = TYPE_UINT32;
        (*type_map)["SKnowledgeSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SKnowledgeSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SKnowledgeSaveData/m_nGoals"] = TYPE_UINT16;
        (*type_map)["TArray<SKnowledgeSaveData>/m_nGoals"] = TYPE_UINT16;
        (*type_map)["SKnowledgeSaveData/m_fHMAttention"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/m_fHMAttention"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/m_fHMAttentionLastUpdate"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/m_fHMAttentionLastUpdate"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/m_fHMDisguiseAttention"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/m_fHMDisguiseAttention"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/m_fHMTrespassingAttention"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/m_fHMTrespassingAttention"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/m_fHMLastTrespassingAttentionMax"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/m_fHMLastTrespassingAttentionMax"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SKnowledgeSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SKnowledgeSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SKnowledgeSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SKnowledgeSaveData/m_fHMWeaponAttention"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/m_fHMWeaponAttention"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/m_fHMWeaponAttentionChange"] = TYPE_FLOAT32;
        (*type_map)["TArray<SKnowledgeSaveData>/m_fHMWeaponAttentionChange"] = TYPE_FLOAT32;
        (*type_map)["SKnowledgeSaveData/m_eGameTension"] = TYPE_ENUM;
        (*type_map)["TArray<SKnowledgeSaveData>/m_eGameTension"] = TYPE_ENUM;
        (*type_map)["SKnowledgeSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SKnowledgeSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SKnowledgeSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SKnowledgeSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SKnowledgeSaveData/m_behaviorModifiers"] = TYPE_UINT32;
        (*type_map)["TArray<SKnowledgeSaveData>/m_behaviorModifiers"] = TYPE_UINT32;
        (*type_map)["SMovementDrainPipeSaveData/m_rDrainPipe"] = TYPE_UINT32;
        (*type_map)["TArray<SMovementDrainPipeSaveData>/m_rDrainPipe"] = TYPE_UINT32;
        (*type_map)["SExtendedCppEntityProperty/propertyName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExtendedCppEntityProperty>/propertyName"] = TYPE_ZSTRING;
        (*type_map)["SExtendedCppEntityProperty/propertyType"] = TYPE_ENUM;
        (*type_map)["TArray<SExtendedCppEntityProperty>/propertyType"] = TYPE_ENUM;
        (*type_map)["SExtendedCppEntityProperty/rtEditable"] = TYPE_BOOL;
        (*type_map)["TArray<SExtendedCppEntityProperty>/rtEditable"] = TYPE_BOOL;
        (*type_map)["SExtendedCppEntityProperty/extraData"] = TYPE_UINT64;
        (*type_map)["TArray<SExtendedCppEntityProperty>/extraData"] = TYPE_UINT64;
        (*type_map)["SExtendedCppEntityBlueprint/propertyName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExtendedCppEntityBlueprint>/propertyName"] = TYPE_ZSTRING;
        (*type_map)["SExtendedCppEntityBlueprint/propertyType"] = TYPE_ENUM;
        (*type_map)["TArray<SExtendedCppEntityBlueprint>/propertyType"] = TYPE_ENUM;
        (*type_map)["SExtendedCppEntityBlueprint/rtEditable"] = TYPE_BOOL;
        (*type_map)["TArray<SExtendedCppEntityBlueprint>/rtEditable"] = TYPE_BOOL;
        (*type_map)["SExtendedCppEntityBlueprint/extraData"] = TYPE_UINT64;
        (*type_map)["TArray<SExtendedCppEntityBlueprint>/extraData"] = TYPE_UINT64;
        (*type_map)["SSavableData/m_EntitiesData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSavableData>/m_EntitiesData"] = TYPE_ZVARIANT;
        (*type_map)["SSavableData/m_Data"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSavableData>/m_Data"] = TYPE_ZVARIANT;
        (*type_map)["SSavableData/m_nId"] = TYPE_UINT32;
        (*type_map)["TArray<SSavableData>/m_nId"] = TYPE_UINT32;
        (*type_map)["SSaveGameMetaData/nSlot"] = TYPE_UINT8;
        (*type_map)["TArray<SSaveGameMetaData>/nSlot"] = TYPE_UINT8;
        (*type_map)["SSaveGameMetaData/eSaveType"] = TYPE_ENUM;
        (*type_map)["TArray<SSaveGameMetaData>/eSaveType"] = TYPE_ENUM;
        (*type_map)["SSaveGameMetaData/eDifficultyLevel"] = TYPE_INT32;
        (*type_map)["TArray<SSaveGameMetaData>/eDifficultyLevel"] = TYPE_INT32;
        (*type_map)["SSaveGameMetaData/sContractId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSaveGameMetaData>/sContractId"] = TYPE_ZSTRING;
        (*type_map)["SSaveGameMetaData/sContractTitle"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSaveGameMetaData>/sContractTitle"] = TYPE_ZSTRING;
        (*type_map)["SSaveGameMetaData/sContractType"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSaveGameMetaData>/sContractType"] = TYPE_ZSTRING;
        (*type_map)["SSaveGameMetaData/sLocationId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSaveGameMetaData>/sLocationId"] = TYPE_ZSTRING;
        (*type_map)["SSaveGameMetaData/sContractSessionId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSaveGameMetaData>/sContractSessionId"] = TYPE_ZSTRING;
        (*type_map)["SSaveGameMetaData/sLastEventToken"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSaveGameMetaData>/sLastEventToken"] = TYPE_ZSTRING;
        (*type_map)["SSaveGameMetaData/bIsOnline"] = TYPE_BOOL;
        (*type_map)["TArray<SSaveGameMetaData>/bIsOnline"] = TYPE_BOOL;
        (*type_map)["SSaveGameMetaData/bIsVR"] = TYPE_BOOL;
        (*type_map)["TArray<SSaveGameMetaData>/bIsVR"] = TYPE_BOOL;
        (*type_map)["SGuardPointOrderSaveData/m_guardPoint"] = TYPE_UINT32;
        (*type_map)["TArray<SGuardPointOrderSaveData>/m_guardPoint"] = TYPE_UINT32;
        (*type_map)["SGuardPointOrderSaveData/m_walkOnly"] = TYPE_BOOL;
        (*type_map)["TArray<SGuardPointOrderSaveData>/m_walkOnly"] = TYPE_BOOL;
        (*type_map)["ZGuid/_a"] = TYPE_UINT32;
        (*type_map)["TArray<ZGuid>/_a"] = TYPE_UINT32;
        (*type_map)["ZGuid/_b"] = TYPE_UINT16;
        (*type_map)["TArray<ZGuid>/_b"] = TYPE_UINT16;
        (*type_map)["ZGuid/_c"] = TYPE_UINT16;
        (*type_map)["TArray<ZGuid>/_c"] = TYPE_UINT16;
        (*type_map)["ZGuid/_d"] = TYPE_UINT8;
        (*type_map)["TArray<ZGuid>/_d"] = TYPE_UINT8;
        (*type_map)["ZGuid/_e"] = TYPE_UINT8;
        (*type_map)["TArray<ZGuid>/_e"] = TYPE_UINT8;
        (*type_map)["ZGuid/_f"] = TYPE_UINT8;
        (*type_map)["TArray<ZGuid>/_f"] = TYPE_UINT8;
        (*type_map)["ZGuid/_g"] = TYPE_UINT8;
        (*type_map)["TArray<ZGuid>/_g"] = TYPE_UINT8;
        (*type_map)["ZGuid/_h"] = TYPE_UINT8;
        (*type_map)["TArray<ZGuid>/_h"] = TYPE_UINT8;
        (*type_map)["ZGuid/_i"] = TYPE_UINT8;
        (*type_map)["TArray<ZGuid>/_i"] = TYPE_UINT8;
        (*type_map)["ZGuid/_j"] = TYPE_UINT8;
        (*type_map)["TArray<ZGuid>/_j"] = TYPE_UINT8;
        (*type_map)["ZGuid/_k"] = TYPE_UINT8;
        (*type_map)["TArray<ZGuid>/_k"] = TYPE_UINT8;
        (*type_map)["SActivity/_a"] = TYPE_UINT32;
        (*type_map)["TArray<SActivity>/_a"] = TYPE_UINT32;
        (*type_map)["SActivity/_b"] = TYPE_UINT16;
        (*type_map)["TArray<SActivity>/_b"] = TYPE_UINT16;
        (*type_map)["SActivity/_c"] = TYPE_UINT16;
        (*type_map)["TArray<SActivity>/_c"] = TYPE_UINT16;
        (*type_map)["SActivity/_d"] = TYPE_UINT8;
        (*type_map)["TArray<SActivity>/_d"] = TYPE_UINT8;
        (*type_map)["SActivity/_e"] = TYPE_UINT8;
        (*type_map)["TArray<SActivity>/_e"] = TYPE_UINT8;
        (*type_map)["SActivity/_f"] = TYPE_UINT8;
        (*type_map)["TArray<SActivity>/_f"] = TYPE_UINT8;
        (*type_map)["SActivity/_g"] = TYPE_UINT8;
        (*type_map)["TArray<SActivity>/_g"] = TYPE_UINT8;
        (*type_map)["SActivity/_h"] = TYPE_UINT8;
        (*type_map)["TArray<SActivity>/_h"] = TYPE_UINT8;
        (*type_map)["SActivity/_i"] = TYPE_UINT8;
        (*type_map)["TArray<SActivity>/_i"] = TYPE_UINT8;
        (*type_map)["SActivity/_j"] = TYPE_UINT8;
        (*type_map)["TArray<SActivity>/_j"] = TYPE_UINT8;
        (*type_map)["SActivity/_k"] = TYPE_UINT8;
        (*type_map)["TArray<SActivity>/_k"] = TYPE_UINT8;
        (*type_map)["SActivity/activityId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActivity>/activityId"] = TYPE_ZSTRING;
        (*type_map)["SActivityExits/_a"] = TYPE_UINT32;
        (*type_map)["TArray<SActivityExits>/_a"] = TYPE_UINT32;
        (*type_map)["SActivityExits/_b"] = TYPE_UINT16;
        (*type_map)["TArray<SActivityExits>/_b"] = TYPE_UINT16;
        (*type_map)["SActivityExits/_c"] = TYPE_UINT16;
        (*type_map)["TArray<SActivityExits>/_c"] = TYPE_UINT16;
        (*type_map)["SActivityExits/_d"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityExits>/_d"] = TYPE_UINT8;
        (*type_map)["SActivityExits/_e"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityExits>/_e"] = TYPE_UINT8;
        (*type_map)["SActivityExits/_f"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityExits>/_f"] = TYPE_UINT8;
        (*type_map)["SActivityExits/_g"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityExits>/_g"] = TYPE_UINT8;
        (*type_map)["SActivityExits/_h"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityExits>/_h"] = TYPE_UINT8;
        (*type_map)["SActivityExits/_i"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityExits>/_i"] = TYPE_UINT8;
        (*type_map)["SActivityExits/_j"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityExits>/_j"] = TYPE_UINT8;
        (*type_map)["SActivityExits/_k"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityExits>/_k"] = TYPE_UINT8;
        (*type_map)["SActivityExits/activityId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActivityExits>/activityId"] = TYPE_ZSTRING;
        (*type_map)["SCppEntitySubsetInfo/name"] = TYPE_ZSTRING;
        (*type_map)["TArray<SCppEntitySubsetInfo>/name"] = TYPE_ZSTRING;
        (*type_map)["SCppEntitySubsetInfo/flags"] = TYPE_UINT32;
        (*type_map)["TArray<SCppEntitySubsetInfo>/flags"] = TYPE_UINT32;
        (*type_map)["SCppEntityBlueprint/typeFlags"] = TYPE_UINT32;
        (*type_map)["TArray<SCppEntityBlueprint>/typeFlags"] = TYPE_UINT32;
        (*type_map)["SCppEntityBlueprint/name"] = TYPE_ZSTRING;
        (*type_map)["TArray<SCppEntityBlueprint>/name"] = TYPE_ZSTRING;
        (*type_map)["SCppEntityBlueprint/flags"] = TYPE_UINT32;
        (*type_map)["TArray<SCppEntityBlueprint>/flags"] = TYPE_UINT32;
        (*type_map)["SMusicGridData/m_fGridDurationSec"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMusicGridData>/m_fGridDurationSec"] = TYPE_FLOAT32;
        (*type_map)["SMusicGridData/m_fGridOffsetSec"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMusicGridData>/m_fGridOffsetSec"] = TYPE_FLOAT32;
        (*type_map)["ZAISetpieceDistractionContextEntity.SAIDistractionContextEntitySaveData/m_DistractedActor"] = TYPE_UINT32;
        (*type_map)["TArray<ZAISetpieceDistractionContextEntity.SAIDistractionContextEntitySaveData>/m_DistractedActor"] = TYPE_UINT32;
        (*type_map)["ZAISetpieceDistractionContextEntity.SAIDistractionContextEntitySaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZAISetpieceDistractionContextEntity.SAIDistractionContextEntitySaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZAISetpieceDistractionContextEntity.SAIDistractionContextEntitySaveData/m_DistractionIsActive"] = TYPE_BOOL;
        (*type_map)["TArray<ZAISetpieceDistractionContextEntity.SAIDistractionContextEntitySaveData>/m_DistractionIsActive"] = TYPE_BOOL;
        (*type_map)["SExitsActiveSaveData/m_bIsActive"] = TYPE_BOOL;
        (*type_map)["TArray<SExitsActiveSaveData>/m_bIsActive"] = TYPE_BOOL;
        (*type_map)["SRepositionOrderSaveData/m_bStrafe"] = TYPE_BOOL;
        (*type_map)["TArray<SRepositionOrderSaveData>/m_bStrafe"] = TYPE_BOOL;
        (*type_map)["SRepositionOrderSaveData/m_bAimAtTarget"] = TYPE_BOOL;
        (*type_map)["TArray<SRepositionOrderSaveData>/m_bAimAtTarget"] = TYPE_BOOL;
        (*type_map)["SObjetiveSaveData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<SObjetiveSaveData>/m_eType"] = TYPE_ENUM;
        (*type_map)["SObjetiveSaveData/m_SaveData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SObjetiveSaveData>/m_SaveData"] = TYPE_ZVARIANT;
        (*type_map)["SDestructiblePieceSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/m_fMass"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/m_fMass"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/m_ePhysicsType"] = TYPE_ENUM;
        (*type_map)["TArray<SDestructiblePieceSaveData>/m_ePhysicsType"] = TYPE_ENUM;
        (*type_map)["SDestructiblePieceSaveData/m_bIsAwake"] = TYPE_BOOL;
        (*type_map)["TArray<SDestructiblePieceSaveData>/m_bIsAwake"] = TYPE_BOOL;
        (*type_map)["SDestructiblePieceSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDestructiblePieceSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructiblePieceSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleRuntimeConnnection/m_nPieceIndex"] = TYPE_UINT16;
        (*type_map)["TArray<SDestructibleRuntimeConnnection>/m_nPieceIndex"] = TYPE_UINT16;
        (*type_map)["SDestructibleRuntimeDamage/m_nPieceIndex"] = TYPE_UINT16;
        (*type_map)["TArray<SDestructibleRuntimeDamage>/m_nPieceIndex"] = TYPE_UINT16;
        (*type_map)["SDestructibleRuntimeDamage/m_fDamage"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleRuntimeDamage>/m_fDamage"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/m_fSettleTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/m_fSettleTime"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/m_fMass"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/m_fMass"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/m_ePhysicsType"] = TYPE_ENUM;
        (*type_map)["TArray<SDestructibleObjectSaveData>/m_ePhysicsType"] = TYPE_ENUM;
        (*type_map)["SDestructibleObjectSaveData/m_bIsAwake"] = TYPE_BOOL;
        (*type_map)["TArray<SDestructibleObjectSaveData>/m_bIsAwake"] = TYPE_BOOL;
        (*type_map)["SDestructibleObjectSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/m_nPieceIndex"] = TYPE_UINT16;
        (*type_map)["TArray<SDestructibleObjectSaveData>/m_nPieceIndex"] = TYPE_UINT16;
        (*type_map)["SDestructibleObjectSaveData/m_nPieceIndex"] = TYPE_UINT16;
        (*type_map)["TArray<SDestructibleObjectSaveData>/m_nPieceIndex"] = TYPE_UINT16;
        (*type_map)["SDestructibleObjectSaveData/m_fDamage"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDestructibleObjectSaveData>/m_fDamage"] = TYPE_FLOAT32;
        (*type_map)["SDestructibleObjectSaveData/m_nNumAnchors"] = TYPE_UINT16;
        (*type_map)["TArray<SDestructibleObjectSaveData>/m_nNumAnchors"] = TYPE_UINT16;
        (*type_map)["SDestructibleObjectSaveData/m_eRuntimeMemoryAllocationState"] = TYPE_ENUM;
        (*type_map)["TArray<SDestructibleObjectSaveData>/m_eRuntimeMemoryAllocationState"] = TYPE_ENUM;
        (*type_map)["SDestructibleObjectSaveData/m_eSystemPhysicsType"] = TYPE_ENUM;
        (*type_map)["TArray<SDestructibleObjectSaveData>/m_eSystemPhysicsType"] = TYPE_ENUM;
        (*type_map)["SDestructibleObjectSaveData/m_bHasSystemBeenDetached"] = TYPE_BOOL;
        (*type_map)["TArray<SDestructibleObjectSaveData>/m_bHasSystemBeenDetached"] = TYPE_BOOL;
        (*type_map)["SDestructibleObjectSaveData/m_bHasSystemBeenFractured"] = TYPE_BOOL;
        (*type_map)["TArray<SDestructibleObjectSaveData>/m_bHasSystemBeenFractured"] = TYPE_BOOL;
        (*type_map)["SDestructibleObjectSaveData/m_bPhysicsEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SDestructibleObjectSaveData>/m_bPhysicsEnabled"] = TYPE_BOOL;
        (*type_map)["SDestructibleObjectSaveData/m_bDestructionEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SDestructibleObjectSaveData>/m_bDestructionEnabled"] = TYPE_BOOL;
        (*type_map)["SIntelDisplayInfo/index"] = TYPE_INT32;
        (*type_map)["TArray<SIntelDisplayInfo>/index"] = TYPE_INT32;
        (*type_map)["SIntelDisplayInfo/selected"] = TYPE_BOOL;
        (*type_map)["TArray<SIntelDisplayInfo>/selected"] = TYPE_BOOL;
        (*type_map)["SIntelDisplayInfo/active"] = TYPE_BOOL;
        (*type_map)["TArray<SIntelDisplayInfo>/active"] = TYPE_BOOL;
        (*type_map)["SIntelDisplayInfo/headline"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelDisplayInfo>/headline"] = TYPE_ZSTRING;
        (*type_map)["SIntelDisplayInfo/bodyheadline"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelDisplayInfo>/bodyheadline"] = TYPE_ZSTRING;
        (*type_map)["SIntelDisplayInfo/text"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelDisplayInfo>/text"] = TYPE_ZSTRING;
        (*type_map)["SIntelDisplayInfo/img"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelDisplayInfo>/img"] = TYPE_ZSTRING;
        (*type_map)["SIntelDisplayInfoArray_dummy/index"] = TYPE_INT32;
        (*type_map)["TArray<SIntelDisplayInfoArray_dummy>/index"] = TYPE_INT32;
        (*type_map)["SIntelDisplayInfoArray_dummy/selected"] = TYPE_BOOL;
        (*type_map)["TArray<SIntelDisplayInfoArray_dummy>/selected"] = TYPE_BOOL;
        (*type_map)["SIntelDisplayInfoArray_dummy/active"] = TYPE_BOOL;
        (*type_map)["TArray<SIntelDisplayInfoArray_dummy>/active"] = TYPE_BOOL;
        (*type_map)["SIntelDisplayInfoArray_dummy/headline"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelDisplayInfoArray_dummy>/headline"] = TYPE_ZSTRING;
        (*type_map)["SIntelDisplayInfoArray_dummy/bodyheadline"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelDisplayInfoArray_dummy>/bodyheadline"] = TYPE_ZSTRING;
        (*type_map)["SIntelDisplayInfoArray_dummy/text"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelDisplayInfoArray_dummy>/text"] = TYPE_ZSTRING;
        (*type_map)["SIntelDisplayInfoArray_dummy/img"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelDisplayInfoArray_dummy>/img"] = TYPE_ZSTRING;
        (*type_map)["SVector3/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVector3>/x"] = TYPE_FLOAT32;
        (*type_map)["SVector3/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVector3>/y"] = TYPE_FLOAT32;
        (*type_map)["SVector3/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVector3>/z"] = TYPE_FLOAT32;
        (*type_map)["SVector4/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVector4>/x"] = TYPE_FLOAT32;
        (*type_map)["SVector4/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVector4>/y"] = TYPE_FLOAT32;
        (*type_map)["SVector4/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVector4>/z"] = TYPE_FLOAT32;
        (*type_map)["SVector4/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVector4>/w"] = TYPE_FLOAT32;
        (*type_map)["SSpatialSaveData/m_bVisible"] = TYPE_BOOL;
        (*type_map)["TArray<SSpatialSaveData>/m_bVisible"] = TYPE_BOOL;
        (*type_map)["SSpatialSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSpatialSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SSpatialSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSpatialSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SSpatialSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSpatialSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SSpatialSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSpatialSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SSpatialSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSpatialSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SSpatialSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSpatialSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SSpatialSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSpatialSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["ZRuntimeResourceID/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<ZRuntimeResourceID>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["ZRuntimeResourceID/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<ZRuntimeResourceID>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["SWeaponStatusUIData/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<SWeaponStatusUIData>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["SWeaponStatusUIData/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<SWeaponStatusUIData>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["SWeaponStatusUIData/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<SWeaponStatusUIData>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["SWeaponStatusUIData/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<SWeaponStatusUIData>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["SWeaponStatusUIData/sWeaponName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SWeaponStatusUIData>/sWeaponName"] = TYPE_ZSTRING;
        (*type_map)["SWeaponStatusUIData/sContainedItemName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SWeaponStatusUIData>/sContainedItemName"] = TYPE_ZSTRING;
        (*type_map)["SWeaponStatusUIData/nWeaponType"] = TYPE_INT32;
        (*type_map)["TArray<SWeaponStatusUIData>/nWeaponType"] = TYPE_INT32;
        (*type_map)["SWeaponStatusUIData/nItemHUDType"] = TYPE_INT32;
        (*type_map)["TArray<SWeaponStatusUIData>/nItemHUDType"] = TYPE_INT32;
        (*type_map)["SWeaponStatusUIData/nAmmoRemaining"] = TYPE_INT32;
        (*type_map)["TArray<SWeaponStatusUIData>/nAmmoRemaining"] = TYPE_INT32;
        (*type_map)["SWeaponStatusUIData/nAmmoTotal"] = TYPE_INT32;
        (*type_map)["TArray<SWeaponStatusUIData>/nAmmoTotal"] = TYPE_INT32;
        (*type_map)["SWeaponStatusUIData/nAmmoInClip"] = TYPE_INT32;
        (*type_map)["TArray<SWeaponStatusUIData>/nAmmoInClip"] = TYPE_INT32;
        (*type_map)["SWeaponStatusUIData/bSilenced"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponStatusUIData>/bSilenced"] = TYPE_BOOL;
        (*type_map)["SWeaponStatusUIData/bIsFirearm"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponStatusUIData>/bIsFirearm"] = TYPE_BOOL;
        (*type_map)["SWeaponStatusUIData/bHolstered"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponStatusUIData>/bHolstered"] = TYPE_BOOL;
        (*type_map)["SWeaponStatusUIData/bCannotBeHolstered"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponStatusUIData>/bCannotBeHolstered"] = TYPE_BOOL;
        (*type_map)["SWeaponStatusUIData/bHasItemToShow"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponStatusUIData>/bHasItemToShow"] = TYPE_BOOL;
        (*type_map)["SWeaponStatusUIData/bSuspicious"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponStatusUIData>/bSuspicious"] = TYPE_BOOL;
        (*type_map)["SWeaponStatusUIData/bIllegal"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponStatusUIData>/bIllegal"] = TYPE_BOOL;
        (*type_map)["SWeaponStatusUIData/bCanReload"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponStatusUIData>/bCanReload"] = TYPE_BOOL;
        (*type_map)["SWeaponStatusUIData/bIsReloading"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponStatusUIData>/bIsReloading"] = TYPE_BOOL;
        (*type_map)["SWeaponStatusUIData/fReloadDuration"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWeaponStatusUIData>/fReloadDuration"] = TYPE_FLOAT32;
        (*type_map)["SWeaponStatusUIData/bInfiniteAmmo"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponStatusUIData>/bInfiniteAmmo"] = TYPE_BOOL;
        (*type_map)["SWeaponStatusUIData/bIsContainer"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponStatusUIData>/bIsContainer"] = TYPE_BOOL;
        (*type_map)["SWeaponStatusUIData/bContainsItem"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponStatusUIData>/bContainsItem"] = TYPE_BOOL;
        (*type_map)["SWeaponStatusUIData/nContainedItemHUDType"] = TYPE_INT32;
        (*type_map)["TArray<SWeaponStatusUIData>/nContainedItemHUDType"] = TYPE_INT32;
        (*type_map)["SWeaponStatusUIData/bContainedItemIllegal"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponStatusUIData>/bContainedItemIllegal"] = TYPE_BOOL;
        (*type_map)["SWeaponStatusUIData/bContainedItemSuspicious"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponStatusUIData>/bContainedItemSuspicious"] = TYPE_BOOL;
        (*type_map)["SWeaponStatusUIData/bContainedItemDetectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponStatusUIData>/bContainedItemDetectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["SWeaponStatusUIData/fLastBulletFiredTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWeaponStatusUIData>/fLastBulletFiredTime"] = TYPE_FLOAT32;
        (*type_map)["SWeaponStatusUIData/fTimeBetweenBullets"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWeaponStatusUIData>/fTimeBetweenBullets"] = TYPE_FLOAT32;
        (*type_map)["SWeaponStatusUIData/nCurrentAmmoType"] = TYPE_UINT32;
        (*type_map)["TArray<SWeaponStatusUIData>/nCurrentAmmoType"] = TYPE_UINT32;
        (*type_map)["SVRConfigCameraComponent/m_eHeadAnchorMode"] = TYPE_ENUM;
        (*type_map)["TArray<SVRConfigCameraComponent>/m_eHeadAnchorMode"] = TYPE_ENUM;
        (*type_map)["SVRConfigCameraComponent/m_uRecenterRequestCounter"] = TYPE_UINT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/m_uRecenterRequestCounter"] = TYPE_UINT32;
        (*type_map)["SVRConfigCameraComponent/m_fVRUserInputWeight"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/m_fVRUserInputWeight"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/m_fGridSize"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/m_fGridSize"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/m_fCapsuleHeadAttacherOffset"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/m_fCapsuleHeadAttacherOffset"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/m_fCapsuleHeadAttacherOffsetSneaking"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/m_fCapsuleHeadAttacherOffsetSneaking"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/m_fHeadBoneAttacherOffset"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/m_fHeadBoneAttacherOffset"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/x"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/y"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/z"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/w"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/x"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/y"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/z"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/w"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/x"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/y"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/z"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/w"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/x"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/y"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/z"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/w"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/x"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/y"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/z"] = TYPE_FLOAT32;
        (*type_map)["SVRConfigCameraComponent/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVRConfigCameraComponent>/w"] = TYPE_FLOAT32;
        (*type_map)["SInteractionIndicatorInstanceData.SUIControlData/m_eState"] = TYPE_INT32;
        (*type_map)["TArray<SInteractionIndicatorInstanceData.SUIControlData>/m_eState"] = TYPE_INT32;
        (*type_map)["SInteractionIndicatorInstanceData.SUIControlData/m_eTypeId"] = TYPE_INT32;
        (*type_map)["TArray<SInteractionIndicatorInstanceData.SUIControlData>/m_eTypeId"] = TYPE_INT32;
        (*type_map)["SInteractionIndicatorInstanceData.SUIControlData/m_nIconId"] = TYPE_INT32;
        (*type_map)["TArray<SInteractionIndicatorInstanceData.SUIControlData>/m_nIconId"] = TYPE_INT32;
        (*type_map)["SInteractionIndicatorInstanceData.SUIControlData/m_fProgress"] = TYPE_FLOAT32;
        (*type_map)["TArray<SInteractionIndicatorInstanceData.SUIControlData>/m_fProgress"] = TYPE_FLOAT32;
        (*type_map)["SInteractionIndicatorInstanceData.SUIControlData/m_sLabel"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInteractionIndicatorInstanceData.SUIControlData>/m_sLabel"] = TYPE_ZSTRING;
        (*type_map)["SInteractionIndicatorInstanceData.SUIControlData/m_sDescription"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInteractionIndicatorInstanceData.SUIControlData>/m_sDescription"] = TYPE_ZSTRING;
        (*type_map)["SInteractionIndicatorInstanceData.SUIControlData/m_sGlyph"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInteractionIndicatorInstanceData.SUIControlData>/m_sGlyph"] = TYPE_ZSTRING;
        (*type_map)["SInteractionIndicatorInstanceData.SUIControlData/m_bIllegal"] = TYPE_BOOL;
        (*type_map)["TArray<SInteractionIndicatorInstanceData.SUIControlData>/m_bIllegal"] = TYPE_BOOL;
        (*type_map)["SInteractionIndicatorInstanceData.SUIControlData/m_bNoActionAvailable"] = TYPE_BOOL;
        (*type_map)["TArray<SInteractionIndicatorInstanceData.SUIControlData>/m_bNoActionAvailable"] = TYPE_BOOL;
        (*type_map)["SInteractionIndicatorInstanceData.SUIControlData/m_bInRange"] = TYPE_BOOL;
        (*type_map)["TArray<SInteractionIndicatorInstanceData.SUIControlData>/m_bInRange"] = TYPE_BOOL;
        (*type_map)["SInteractionIndicatorInstanceData.SUIControlData/m_bIllegalItem"] = TYPE_BOOL;
        (*type_map)["TArray<SInteractionIndicatorInstanceData.SUIControlData>/m_bIllegalItem"] = TYPE_BOOL;
        (*type_map)["SInteractionIndicatorInstanceData.SUIControlData/m_bSuspiciousItem"] = TYPE_BOOL;
        (*type_map)["TArray<SInteractionIndicatorInstanceData.SUIControlData>/m_bSuspiciousItem"] = TYPE_BOOL;
        (*type_map)["SInteractionIndicatorInstanceData.SUIControlData/m_bContainsItem"] = TYPE_BOOL;
        (*type_map)["TArray<SInteractionIndicatorInstanceData.SUIControlData>/m_bContainsItem"] = TYPE_BOOL;
        (*type_map)["SInteractionIndicatorInstanceData.SUIControlData/m_nFontSize"] = TYPE_INT32;
        (*type_map)["TArray<SInteractionIndicatorInstanceData.SUIControlData>/m_nFontSize"] = TYPE_INT32;
        (*type_map)["SInteractionIndicatorInstanceData.SUIControlData/m_bIsTxtDirReversed"] = TYPE_BOOL;
        (*type_map)["TArray<SInteractionIndicatorInstanceData.SUIControlData>/m_bIsTxtDirReversed"] = TYPE_BOOL;
        (*type_map)["ZStandOffSituation.SState/m_eSituationState"] = TYPE_ENUM;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_eSituationState"] = TYPE_ENUM;
        (*type_map)["ZStandOffSituation.SState/m_eArrestReason"] = TYPE_ENUM;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_eArrestReason"] = TYPE_ENUM;
        (*type_map)["ZStandOffSituation.SState/m_nWarningPriority"] = TYPE_UINT32;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_nWarningPriority"] = TYPE_UINT32;
        (*type_map)["ZStandOffSituation.SState/m_TargetHasWeaponEquipped"] = TYPE_BOOL;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_TargetHasWeaponEquipped"] = TYPE_BOOL;
        (*type_map)["ZStandOffSituation.SState/m_ImmediateWarningDialog"] = TYPE_BOOL;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_ImmediateWarningDialog"] = TYPE_BOOL;
        (*type_map)["ZStandOffSituation.SState/m_nResetCount"] = TYPE_INT32;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_nResetCount"] = TYPE_INT32;
        (*type_map)["ZStandOffSituation.SState/m_bArrestReasonStated"] = TYPE_BOOL;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_bArrestReasonStated"] = TYPE_BOOL;
        (*type_map)["ZStandOffSituation.SState/m_bTargetOnStairs"] = TYPE_BOOL;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_bTargetOnStairs"] = TYPE_BOOL;
        (*type_map)["ZStandOffSituation.SState/m_bUpdateApproachPositions"] = TYPE_BOOL;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_bUpdateApproachPositions"] = TYPE_BOOL;
        (*type_map)["ZStandOffSituation.SState/m_bHelpOrderAssigned"] = TYPE_BOOL;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_bHelpOrderAssigned"] = TYPE_BOOL;
        (*type_map)["ZStandOffSituation.SState/m_bCivilianTransferredKnowledge"] = TYPE_BOOL;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_bCivilianTransferredKnowledge"] = TYPE_BOOL;
        (*type_map)["ZStandOffSituation.SState/m_bTargetLost"] = TYPE_BOOL;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_bTargetLost"] = TYPE_BOOL;
        (*type_map)["ZStandOffSituation.SState/m_bGetHelpGroupStarted"] = TYPE_BOOL;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_bGetHelpGroupStarted"] = TYPE_BOOL;
        (*type_map)["ZStandOffSituation.SState/m_bHandlerHasLOS"] = TYPE_BOOL;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_bHandlerHasLOS"] = TYPE_BOOL;
        (*type_map)["ZStandOffSituation.SState/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZStandOffSituation.SState>/x"] = TYPE_FLOAT32;
        (*type_map)["ZStandOffSituation.SState/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZStandOffSituation.SState>/y"] = TYPE_FLOAT32;
        (*type_map)["ZStandOffSituation.SState/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZStandOffSituation.SState>/z"] = TYPE_FLOAT32;
        (*type_map)["ZStandOffSituation.SState/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZStandOffSituation.SState>/w"] = TYPE_FLOAT32;
        (*type_map)["ZStandOffSituation.SState/m_fMovingTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_fMovingTime"] = TYPE_FLOAT32;
        (*type_map)["ZStandOffSituation.SState/m_fRunningTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_fRunningTime"] = TYPE_FLOAT32;
        (*type_map)["ZStandOffSituation.SState/m_fEquippedWeaponTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_fEquippedWeaponTime"] = TYPE_FLOAT32;
        (*type_map)["ZStandOffSituation.SState/m_fStrangleTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_fStrangleTime"] = TYPE_FLOAT32;
        (*type_map)["ZStandOffSituation.SState/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZStandOffSituation.SState/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZStandOffSituation.SState/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZStandOffSituation.SState/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZStandOffSituation.SState/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZStandOffSituation.SState/m_eDialogState"] = TYPE_ENUM;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_eDialogState"] = TYPE_ENUM;
        (*type_map)["ZStandOffSituation.SState/m_nWarningCount"] = TYPE_INT32;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_nWarningCount"] = TYPE_INT32;
        (*type_map)["ZStandOffSituation.SState/m_bWarning3Given"] = TYPE_BOOL;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_bWarning3Given"] = TYPE_BOOL;
        (*type_map)["ZStandOffSituation.SState/m_bStopWarningGiven"] = TYPE_BOOL;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_bStopWarningGiven"] = TYPE_BOOL;
        (*type_map)["ZStandOffSituation.SState/m_reportedTarget"] = TYPE_BOOL;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_reportedTarget"] = TYPE_BOOL;
        (*type_map)["ZStandOffSituation.SState/m_bTriggeredBySecurityCameras"] = TYPE_BOOL;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_bTriggeredBySecurityCameras"] = TYPE_BOOL;
        (*type_map)["ZStandOffSituation.SState/m_bLOSMemberWantsToKill"] = TYPE_BOOL;
        (*type_map)["TArray<ZStandOffSituation.SState>/m_bLOSMemberWantsToKill"] = TYPE_BOOL;
        (*type_map)["SCrowdPoseBoneSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseBoneSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseBoneSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseBoneSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseBoneSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseBoneSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseBoneSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseBoneSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseBoneSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseBoneSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseBoneSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseBoneSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseBoneSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseBoneSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseBoneSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseBoneSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseCollectionSaveData/m_id"] = TYPE_UINT64;
        (*type_map)["TArray<SCrowdPoseCollectionSaveData>/m_id"] = TYPE_UINT64;
        (*type_map)["SCrowdPoseCollectionSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseCollectionSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseCollectionSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseCollectionSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseCollectionSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseCollectionSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseCollectionSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseCollectionSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseCollectionSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseCollectionSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseCollectionSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseCollectionSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseCollectionSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseCollectionSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdPoseCollectionSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdPoseCollectionSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdDeadPoseRepositorySaveData/m_id"] = TYPE_UINT64;
        (*type_map)["TArray<SCrowdDeadPoseRepositorySaveData>/m_id"] = TYPE_UINT64;
        (*type_map)["SCrowdDeadPoseRepositorySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdDeadPoseRepositorySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdDeadPoseRepositorySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdDeadPoseRepositorySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdDeadPoseRepositorySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdDeadPoseRepositorySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdDeadPoseRepositorySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdDeadPoseRepositorySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdDeadPoseRepositorySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdDeadPoseRepositorySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdDeadPoseRepositorySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdDeadPoseRepositorySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdDeadPoseRepositorySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdDeadPoseRepositorySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdDeadPoseRepositorySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdDeadPoseRepositorySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["ZDynamicObject/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<ZDynamicObject>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["SChallengeSaveData/m_sId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SChallengeSaveData>/m_sId"] = TYPE_ZSTRING;
        (*type_map)["SChallengeSaveData/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SChallengeSaveData>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["ZHUDOccluderTriggerEntity.SBoneTestSetup/boneId"] = TYPE_ENUM;
        (*type_map)["TArray<ZHUDOccluderTriggerEntity.SBoneTestSetup>/boneId"] = TYPE_ENUM;
        (*type_map)["ZHUDOccluderTriggerEntity.SBoneTestSetup/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDOccluderTriggerEntity.SBoneTestSetup>/x"] = TYPE_FLOAT32;
        (*type_map)["ZHUDOccluderTriggerEntity.SBoneTestSetup/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDOccluderTriggerEntity.SBoneTestSetup>/y"] = TYPE_FLOAT32;
        (*type_map)["ZHUDOccluderTriggerEntity.SBoneTestSetup/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDOccluderTriggerEntity.SBoneTestSetup>/z"] = TYPE_FLOAT32;
        (*type_map)["ZHUDOccluderTriggerEntity.SBoneTestSetup/radius"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDOccluderTriggerEntity.SBoneTestSetup>/radius"] = TYPE_FLOAT32;
        (*type_map)["STimerEntitySaveData/m_nInterval"] = TYPE_INT32;
        (*type_map)["TArray<STimerEntitySaveData>/m_nInterval"] = TYPE_INT32;
        (*type_map)["STimerEntitySaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<STimerEntitySaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["STimerEntitySaveData/m_fTimeToNextEvent"] = TYPE_FLOAT32;
        (*type_map)["TArray<STimerEntitySaveData>/m_fTimeToNextEvent"] = TYPE_FLOAT32;
        (*type_map)["STimerEntitiesSaveData/m_nInterval"] = TYPE_INT32;
        (*type_map)["TArray<STimerEntitiesSaveData>/m_nInterval"] = TYPE_INT32;
        (*type_map)["STimerEntitiesSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<STimerEntitiesSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["STimerEntitiesSaveData/m_fTimeToNextEvent"] = TYPE_FLOAT32;
        (*type_map)["TArray<STimerEntitiesSaveData>/m_fTimeToNextEvent"] = TYPE_FLOAT32;
        (*type_map)["SRandomTimerEntitySaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SRandomTimerEntitySaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SRandomTimerEntitySaveData/m_bRegistered"] = TYPE_BOOL;
        (*type_map)["TArray<SRandomTimerEntitySaveData>/m_bRegistered"] = TYPE_BOOL;
        (*type_map)["SRandomTimerEntitySaveData/m_fMinTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRandomTimerEntitySaveData>/m_fMinTime"] = TYPE_FLOAT32;
        (*type_map)["SRandomTimerEntitySaveData/m_fMaxTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRandomTimerEntitySaveData>/m_fMaxTime"] = TYPE_FLOAT32;
        (*type_map)["SRandomTimerEntitySaveData/m_fProbability"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRandomTimerEntitySaveData>/m_fProbability"] = TYPE_FLOAT32;
        (*type_map)["SRandomTimerEntitySaveData/m_nRemaining"] = TYPE_INT32;
        (*type_map)["TArray<SRandomTimerEntitySaveData>/m_nRemaining"] = TYPE_INT32;
        (*type_map)["SRandomTimerEntitiesSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SRandomTimerEntitiesSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SRandomTimerEntitiesSaveData/m_bRegistered"] = TYPE_BOOL;
        (*type_map)["TArray<SRandomTimerEntitiesSaveData>/m_bRegistered"] = TYPE_BOOL;
        (*type_map)["SRandomTimerEntitiesSaveData/m_fMinTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRandomTimerEntitiesSaveData>/m_fMinTime"] = TYPE_FLOAT32;
        (*type_map)["SRandomTimerEntitiesSaveData/m_fMaxTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRandomTimerEntitiesSaveData>/m_fMaxTime"] = TYPE_FLOAT32;
        (*type_map)["SRandomTimerEntitiesSaveData/m_fProbability"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRandomTimerEntitiesSaveData>/m_fProbability"] = TYPE_FLOAT32;
        (*type_map)["SRandomTimerEntitiesSaveData/m_nRemaining"] = TYPE_INT32;
        (*type_map)["TArray<SRandomTimerEntitiesSaveData>/m_nRemaining"] = TYPE_INT32;
        (*type_map)["STimerManagerSaveData/m_nInterval"] = TYPE_INT32;
        (*type_map)["TArray<STimerManagerSaveData>/m_nInterval"] = TYPE_INT32;
        (*type_map)["STimerManagerSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<STimerManagerSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["STimerManagerSaveData/m_fTimeToNextEvent"] = TYPE_FLOAT32;
        (*type_map)["TArray<STimerManagerSaveData>/m_fTimeToNextEvent"] = TYPE_FLOAT32;
        (*type_map)["STimerManagerSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<STimerManagerSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["STimerManagerSaveData/m_bRegistered"] = TYPE_BOOL;
        (*type_map)["TArray<STimerManagerSaveData>/m_bRegistered"] = TYPE_BOOL;
        (*type_map)["STimerManagerSaveData/m_fMinTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<STimerManagerSaveData>/m_fMinTime"] = TYPE_FLOAT32;
        (*type_map)["STimerManagerSaveData/m_fMaxTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<STimerManagerSaveData>/m_fMaxTime"] = TYPE_FLOAT32;
        (*type_map)["STimerManagerSaveData/m_fProbability"] = TYPE_FLOAT32;
        (*type_map)["TArray<STimerManagerSaveData>/m_fProbability"] = TYPE_FLOAT32;
        (*type_map)["STimerManagerSaveData/m_nRemaining"] = TYPE_INT32;
        (*type_map)["TArray<STimerManagerSaveData>/m_nRemaining"] = TYPE_INT32;
        (*type_map)["STimerManagerSaveData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<STimerManagerSaveData>/m_eType"] = TYPE_ENUM;
        (*type_map)["STimerManagerSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<STimerManagerSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["STimerManagerSaveData/m_fInterval"] = TYPE_FLOAT32;
        (*type_map)["TArray<STimerManagerSaveData>/m_fInterval"] = TYPE_FLOAT32;
        (*type_map)["STimerManagerSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<STimerManagerSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["STimerManagerSaveData/m_fNextEventTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<STimerManagerSaveData>/m_fNextEventTime"] = TYPE_FLOAT32;
        (*type_map)["STimerManagerSaveData/m_bPending"] = TYPE_BOOL;
        (*type_map)["TArray<STimerManagerSaveData>/m_bPending"] = TYPE_BOOL;
        (*type_map)["SGateSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SGateSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SGateSaveData/m_bIsOpen"] = TYPE_BOOL;
        (*type_map)["TArray<SGateSaveData>/m_bIsOpen"] = TYPE_BOOL;
        (*type_map)["SGateSaveData/m_fOpenFraction"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGateSaveData>/m_fOpenFraction"] = TYPE_FLOAT32;
        (*type_map)["SEntityTemplatePropertyAlias/sAliasName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEntityTemplatePropertyAlias>/sAliasName"] = TYPE_ZSTRING;
        (*type_map)["SEntityTemplatePropertyAlias/entityID"] = TYPE_INT32;
        (*type_map)["TArray<SEntityTemplatePropertyAlias>/entityID"] = TYPE_INT32;
        (*type_map)["SEntityTemplatePropertyAlias/sPropertyName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEntityTemplatePropertyAlias>/sPropertyName"] = TYPE_ZSTRING;
        (*type_map)["SDrama2ActorSaveState/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SDrama2ActorSaveState>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SDrama2ActorSaveState/m_rSequence"] = TYPE_UINT32;
        (*type_map)["TArray<SDrama2ActorSaveState>/m_rSequence"] = TYPE_UINT32;
        (*type_map)["SDrama2ActorSaveState/m_rBehavior"] = TYPE_UINT32;
        (*type_map)["TArray<SDrama2ActorSaveState>/m_rBehavior"] = TYPE_UINT32;
        (*type_map)["SDrama2ActorSaveState/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SDrama2ActorSaveState>/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["SDrama2ActorSaveState/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SDrama2ActorSaveState>/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["SDrama2ActorSaveState/m_sMatchName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SDrama2ActorSaveState>/m_sMatchName"] = TYPE_ZSTRING;
        (*type_map)["SDrama2ActorSaveState/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SDrama2ActorSaveState>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SDrama2ActorSaveState/m_bIsDone"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2ActorSaveState>/m_bIsDone"] = TYPE_BOOL;
        (*type_map)["SDrama2ActorSaveState/m_bIsPaused"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2ActorSaveState>/m_bIsPaused"] = TYPE_BOOL;
        (*type_map)["SDrama2ActorSaveState/m_bIsSpeaking"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2ActorSaveState>/m_bIsSpeaking"] = TYPE_BOOL;
        (*type_map)["SDrama2ActorSaveState/m_bOwnsCurrentBehavior"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2ActorSaveState>/m_bOwnsCurrentBehavior"] = TYPE_BOOL;
        (*type_map)["SDrama2ActorSaveState/m_bActive"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2ActorSaveState>/m_bActive"] = TYPE_BOOL;
        (*type_map)["SDrama2ActorSaveState/m_bRequired"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2ActorSaveState>/m_bRequired"] = TYPE_BOOL;
        (*type_map)["SHUDPromptDisplayInfo/m_bActive"] = TYPE_BOOL;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_bActive"] = TYPE_BOOL;
        (*type_map)["SHUDPromptDisplayInfo/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_eState"] = TYPE_ENUM;
        (*type_map)["SHUDPromptDisplayInfo/m_nIconId"] = TYPE_INT32;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_nIconId"] = TYPE_INT32;
        (*type_map)["SHUDPromptDisplayInfo/m_eTypeId"] = TYPE_INT32;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_eTypeId"] = TYPE_INT32;
        (*type_map)["SHUDPromptDisplayInfo/m_fProgress"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_fProgress"] = TYPE_FLOAT32;
        (*type_map)["SHUDPromptDisplayInfo/m_fDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_fDistance"] = TYPE_FLOAT32;
        (*type_map)["SHUDPromptDisplayInfo/m_bShowWarning"] = TYPE_BOOL;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_bShowWarning"] = TYPE_BOOL;
        (*type_map)["SHUDPromptDisplayInfo/m_bNoActionAvailable"] = TYPE_BOOL;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_bNoActionAvailable"] = TYPE_BOOL;
        (*type_map)["SHUDPromptDisplayInfo/m_sLabel"] = TYPE_ZSTRING;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_sLabel"] = TYPE_ZSTRING;
        (*type_map)["SHUDPromptDisplayInfo/m_sDescription"] = TYPE_ZSTRING;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_sDescription"] = TYPE_ZSTRING;
        (*type_map)["SHUDPromptDisplayInfo/m_sGlyph"] = TYPE_ZSTRING;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_sGlyph"] = TYPE_ZSTRING;
        (*type_map)["SHUDPromptDisplayInfo/m_fOpacity"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_fOpacity"] = TYPE_FLOAT32;
        (*type_map)["SHUDPromptDisplayInfo/m_bIllegalItem"] = TYPE_BOOL;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_bIllegalItem"] = TYPE_BOOL;
        (*type_map)["SHUDPromptDisplayInfo/m_bSuspiciousItem"] = TYPE_BOOL;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_bSuspiciousItem"] = TYPE_BOOL;
        (*type_map)["SHUDPromptDisplayInfo/m_bDropTempHolsterableItems"] = TYPE_BOOL;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_bDropTempHolsterableItems"] = TYPE_BOOL;
        (*type_map)["SHUDPromptDisplayInfo/m_nFontSize"] = TYPE_INT32;
        (*type_map)["TArray<SHUDPromptDisplayInfo>/m_nFontSize"] = TYPE_INT32;
        (*type_map)["ZDisguiseSituation.SSituationSaveData/m_pLeader"] = TYPE_UINT32;
        (*type_map)["TArray<ZDisguiseSituation.SSituationSaveData>/m_pLeader"] = TYPE_UINT32;
        (*type_map)["ZDisguiseSituation.SSituationSaveData/m_eEventSetOnEscalation"] = TYPE_ENUM;
        (*type_map)["TArray<ZDisguiseSituation.SSituationSaveData>/m_eEventSetOnEscalation"] = TYPE_ENUM;
        (*type_map)["SStepCounterEntitySaveData/m_nIndex"] = TYPE_FLOAT32;
        (*type_map)["TArray<SStepCounterEntitySaveData>/m_nIndex"] = TYPE_FLOAT32;
        (*type_map)["SStepCounterEntitySaveData/m_nLoopIndex"] = TYPE_INT32;
        (*type_map)["TArray<SStepCounterEntitySaveData>/m_nLoopIndex"] = TYPE_INT32;
        (*type_map)["SStepCounterEntitySaveData/m_bFirst"] = TYPE_BOOL;
        (*type_map)["TArray<SStepCounterEntitySaveData>/m_bFirst"] = TYPE_BOOL;
        (*type_map)["SStepCounterEntitySaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SStepCounterEntitySaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SStepCounterEntitySaveData/m_nCountFrom"] = TYPE_FLOAT32;
        (*type_map)["TArray<SStepCounterEntitySaveData>/m_nCountFrom"] = TYPE_FLOAT32;
        (*type_map)["SStepCounterEntitySaveData/m_nCountTo"] = TYPE_FLOAT32;
        (*type_map)["TArray<SStepCounterEntitySaveData>/m_nCountTo"] = TYPE_FLOAT32;
        (*type_map)["SStepCounterEntitySaveData/m_nStepSize"] = TYPE_FLOAT32;
        (*type_map)["TArray<SStepCounterEntitySaveData>/m_nStepSize"] = TYPE_FLOAT32;
        (*type_map)["SLoadRuntimeResourceResult/sFilePath"] = TYPE_ZSTRING;
        (*type_map)["TArray<SLoadRuntimeResourceResult>/sFilePath"] = TYPE_ZSTRING;
        (*type_map)["SHeroEscortSituation2Actors/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituation2Actors>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SSpatialMoverEntitySaveData/m_fSpeed"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSpatialMoverEntitySaveData>/m_fSpeed"] = TYPE_FLOAT32;
        (*type_map)["SSpatialMoverEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSpatialMoverEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SSpatialMoverEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSpatialMoverEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SSpatialMoverEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSpatialMoverEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SSpatialMoverEntitySaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SSpatialMoverEntitySaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SSpatialMoverEntitySaveData/m_bBackwards"] = TYPE_BOOL;
        (*type_map)["TArray<SSpatialMoverEntitySaveData>/m_bBackwards"] = TYPE_BOOL;
        (*type_map)["SSpatialMoverEntitySaveData/m_bIsFrameUpdateRegistered"] = TYPE_BOOL;
        (*type_map)["TArray<SSpatialMoverEntitySaveData>/m_bIsFrameUpdateRegistered"] = TYPE_BOOL;
        (*type_map)["SLayerBehaviorConfiguration/m_bTrigger"] = TYPE_BOOL;
        (*type_map)["TArray<SLayerBehaviorConfiguration>/m_bTrigger"] = TYPE_BOOL;
        (*type_map)["SLayerBehaviorConfiguration/m_bCollector"] = TYPE_BOOL;
        (*type_map)["TArray<SLayerBehaviorConfiguration>/m_bCollector"] = TYPE_BOOL;
        (*type_map)["SInventoryItem/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryItem>/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["SInventoryItem/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryItem>/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["SContainerItemInfo/m_sContainerInstanceId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SContainerItemInfo>/m_sContainerInstanceId"] = TYPE_ZSTRING;
        (*type_map)["SContainerItemInfo/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SContainerItemInfo>/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["SContainerItemInfo/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SContainerItemInfo>/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["SInventoryInfo/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryInfo>/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["SInventoryInfo/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryInfo>/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["SInventoryInfo/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryInfo>/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["SInventoryInfo/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryInfo>/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["SInventoryInfo/m_sContainerInstanceId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryInfo>/m_sContainerInstanceId"] = TYPE_ZSTRING;
        (*type_map)["SInventoryInfo/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryInfo>/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["SInventoryInfo/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryInfo>/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["SActorThrowSaveData/m_rItem"] = TYPE_UINT32;
        (*type_map)["TArray<SActorThrowSaveData>/m_rItem"] = TYPE_UINT32;
        (*type_map)["SActorThrowSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorThrowSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorThrowSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorThrowSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorThrowSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorThrowSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorThrowSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorThrowSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorThrowSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorThrowSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorThrowSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorThrowSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorThrowSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorThrowSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorThrowSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorThrowSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorThrowSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorThrowSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorThrowSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorThrowSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorThrowSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorThrowSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorThrowSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorThrowSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorThrowSaveData/m_fDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorThrowSaveData>/m_fDistance"] = TYPE_FLOAT32;
        (*type_map)["SIntelListDisplayInfo/index"] = TYPE_INT32;
        (*type_map)["TArray<SIntelListDisplayInfo>/index"] = TYPE_INT32;
        (*type_map)["SIntelListDisplayInfo/active"] = TYPE_BOOL;
        (*type_map)["TArray<SIntelListDisplayInfo>/active"] = TYPE_BOOL;
        (*type_map)["SIntelListDisplayInfo/newInfo"] = TYPE_BOOL;
        (*type_map)["TArray<SIntelListDisplayInfo>/newInfo"] = TYPE_BOOL;
        (*type_map)["SIntelListDisplayInfo/label"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelListDisplayInfo>/label"] = TYPE_ZSTRING;
        (*type_map)["SSoundAmbienceSaveData/m_rCurrentAmbience"] = TYPE_UINT32;
        (*type_map)["TArray<SSoundAmbienceSaveData>/m_rCurrentAmbience"] = TYPE_UINT32;
        (*type_map)["SSoundAmbienceSaveData/m_rCurrentGate"] = TYPE_UINT32;
        (*type_map)["TArray<SSoundAmbienceSaveData>/m_rCurrentGate"] = TYPE_UINT32;
        (*type_map)["SSoundAmbienceSaveData/m_fTransitionAmount"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSoundAmbienceSaveData>/m_fTransitionAmount"] = TYPE_FLOAT32;
        (*type_map)["SSoundAmbienceSaveData/m_bEnteredFromSide0"] = TYPE_BOOL;
        (*type_map)["TArray<SSoundAmbienceSaveData>/m_bEnteredFromSide0"] = TYPE_BOOL;
        (*type_map)["SSoundAmbienceSaveData/m_bInTransition"] = TYPE_BOOL;
        (*type_map)["TArray<SSoundAmbienceSaveData>/m_bInTransition"] = TYPE_BOOL;
        (*type_map)["SChallengesSaveData/m_sId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SChallengesSaveData>/m_sId"] = TYPE_ZSTRING;
        (*type_map)["SChallengesSaveData/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SChallengesSaveData>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["SLevelSaveData/m_nGameTime"] = TYPE_INT64;
        (*type_map)["TArray<SLevelSaveData>/m_nGameTime"] = TYPE_INT64;
        (*type_map)["SLevelSaveData/m_nGameTimePrev"] = TYPE_INT64;
        (*type_map)["TArray<SLevelSaveData>/m_nGameTimePrev"] = TYPE_INT64;
        (*type_map)["SLevelSaveData/m_nGameTimeDelta"] = TYPE_INT64;
        (*type_map)["TArray<SLevelSaveData>/m_nGameTimeDelta"] = TYPE_INT64;
        (*type_map)["SLevelSaveData/m_sScene"] = TYPE_ZSTRING;
        (*type_map)["TArray<SLevelSaveData>/m_sScene"] = TYPE_ZSTRING;
        (*type_map)["SLevelSaveData/m_sLocationId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SLevelSaveData>/m_sLocationId"] = TYPE_ZSTRING;
        (*type_map)["SLevelSaveData/m_sContractId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SLevelSaveData>/m_sContractId"] = TYPE_ZSTRING;
        (*type_map)["SLevelSaveData/m_sContractSessionId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SLevelSaveData>/m_sContractSessionId"] = TYPE_ZSTRING;
        (*type_map)["SLevelSaveData/m_sLastEventToken"] = TYPE_ZSTRING;
        (*type_map)["TArray<SLevelSaveData>/m_sLastEventToken"] = TYPE_ZSTRING;
        (*type_map)["SLevelSaveData/m_contractData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SLevelSaveData>/m_contractData"] = TYPE_ZVARIANT;
        (*type_map)["SLevelSaveData/_a"] = TYPE_UINT32;
        (*type_map)["TArray<SLevelSaveData>/_a"] = TYPE_UINT32;
        (*type_map)["SLevelSaveData/_b"] = TYPE_UINT16;
        (*type_map)["TArray<SLevelSaveData>/_b"] = TYPE_UINT16;
        (*type_map)["SLevelSaveData/_c"] = TYPE_UINT16;
        (*type_map)["TArray<SLevelSaveData>/_c"] = TYPE_UINT16;
        (*type_map)["SLevelSaveData/_d"] = TYPE_UINT8;
        (*type_map)["TArray<SLevelSaveData>/_d"] = TYPE_UINT8;
        (*type_map)["SLevelSaveData/_e"] = TYPE_UINT8;
        (*type_map)["TArray<SLevelSaveData>/_e"] = TYPE_UINT8;
        (*type_map)["SLevelSaveData/_f"] = TYPE_UINT8;
        (*type_map)["TArray<SLevelSaveData>/_f"] = TYPE_UINT8;
        (*type_map)["SLevelSaveData/_g"] = TYPE_UINT8;
        (*type_map)["TArray<SLevelSaveData>/_g"] = TYPE_UINT8;
        (*type_map)["SLevelSaveData/_h"] = TYPE_UINT8;
        (*type_map)["TArray<SLevelSaveData>/_h"] = TYPE_UINT8;
        (*type_map)["SLevelSaveData/_i"] = TYPE_UINT8;
        (*type_map)["TArray<SLevelSaveData>/_i"] = TYPE_UINT8;
        (*type_map)["SLevelSaveData/_j"] = TYPE_UINT8;
        (*type_map)["TArray<SLevelSaveData>/_j"] = TYPE_UINT8;
        (*type_map)["SLevelSaveData/_k"] = TYPE_UINT8;
        (*type_map)["TArray<SLevelSaveData>/_k"] = TYPE_UINT8;
        (*type_map)["SLevelSaveData/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SLevelSaveData>/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["SLevelSaveData/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SLevelSaveData>/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["SLevelSaveData/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SLevelSaveData>/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["SLevelSaveData/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SLevelSaveData>/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["SLevelSaveData/m_sContainerInstanceId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SLevelSaveData>/m_sContainerInstanceId"] = TYPE_ZSTRING;
        (*type_map)["SLevelSaveData/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SLevelSaveData>/sInstanceId"] = TYPE_ZSTRING;
        (*type_map)["SLevelSaveData/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SLevelSaveData>/sUnlockableId"] = TYPE_ZSTRING;
        (*type_map)["SLevelSaveData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<SLevelSaveData>/m_eType"] = TYPE_ENUM;
        (*type_map)["SLevelSaveData/m_SaveData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SLevelSaveData>/m_SaveData"] = TYPE_ZVARIANT;
        (*type_map)["SLevelSaveData/m_rCurrentAmbience"] = TYPE_UINT32;
        (*type_map)["TArray<SLevelSaveData>/m_rCurrentAmbience"] = TYPE_UINT32;
        (*type_map)["SLevelSaveData/m_rCurrentGate"] = TYPE_UINT32;
        (*type_map)["TArray<SLevelSaveData>/m_rCurrentGate"] = TYPE_UINT32;
        (*type_map)["SLevelSaveData/m_fTransitionAmount"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLevelSaveData>/m_fTransitionAmount"] = TYPE_FLOAT32;
        (*type_map)["SLevelSaveData/m_bEnteredFromSide0"] = TYPE_BOOL;
        (*type_map)["TArray<SLevelSaveData>/m_bEnteredFromSide0"] = TYPE_BOOL;
        (*type_map)["SLevelSaveData/m_bInTransition"] = TYPE_BOOL;
        (*type_map)["TArray<SLevelSaveData>/m_bInTransition"] = TYPE_BOOL;
        (*type_map)["SLevelSaveData/m_sId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SLevelSaveData>/m_sId"] = TYPE_ZSTRING;
        (*type_map)["SLevelSaveData/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SLevelSaveData>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["SLevelSaveData/m_nSaveGameLimit"] = TYPE_INT32;
        (*type_map)["TArray<SLevelSaveData>/m_nSaveGameLimit"] = TYPE_INT32;
        (*type_map)["SLevelSaveData/m_fLastKillTimestamp"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLevelSaveData>/m_fLastKillTimestamp"] = TYPE_FLOAT32;
        (*type_map)["ZDetectedInPrivateSituation.SSituationSaveData/m_pDetectedInPrivateGroup"] = TYPE_INT32;
        (*type_map)["TArray<ZDetectedInPrivateSituation.SSituationSaveData>/m_pDetectedInPrivateGroup"] = TYPE_INT32;
        (*type_map)["SFSMSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SFSMSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SFSMSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SFSMSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SFSMSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SFSMSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SFSMSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SFSMSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SGetHelpGroupSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGetHelpGroupSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGetHelpGroupSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGetHelpGroupSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGetHelpGroupSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGetHelpGroupSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SGetHelpGroupSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGetHelpGroupSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SGetHelpGroupSaveData/m_rReturnNode"] = TYPE_UINT16;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_rReturnNode"] = TYPE_UINT16;
        (*type_map)["SGetHelpGroupSaveData/m_bReportingToHitman"] = TYPE_BOOL;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_bReportingToHitman"] = TYPE_BOOL;
        (*type_map)["SGetHelpGroupSaveData/m_bStartedReportDialog"] = TYPE_BOOL;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_bStartedReportDialog"] = TYPE_BOOL;
        (*type_map)["SGetHelpGroupSaveData/m_bMultipleBodies"] = TYPE_BOOL;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_bMultipleBodies"] = TYPE_BOOL;
        (*type_map)["SGetHelpGroupSaveData/m_bGetHelpOrderCompleted"] = TYPE_BOOL;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_bGetHelpOrderCompleted"] = TYPE_BOOL;
        (*type_map)["SGetHelpGroupSaveData/m_bDoneReporting"] = TYPE_BOOL;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_bDoneReporting"] = TYPE_BOOL;
        (*type_map)["SGetHelpGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SGetHelpGroupSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SGetHelpGroupSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SGetHelpGroupSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SGetHelpGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SGetHelpGroupSaveData/m_type"] = TYPE_ENUM;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_type"] = TYPE_ENUM;
        (*type_map)["SGetHelpGroupSaveData/m_target"] = TYPE_UINT32;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_target"] = TYPE_UINT32;
        (*type_map)["SGetHelpGroupSaveData/m_pReporter"] = TYPE_UINT32;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_pReporter"] = TYPE_UINT32;
        (*type_map)["SGetHelpGroupSaveData/m_pGuard"] = TYPE_UINT32;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_pGuard"] = TYPE_UINT32;
        (*type_map)["SGetHelpGroupSaveData/m_IllegalItem"] = TYPE_UINT32;
        (*type_map)["TArray<SGetHelpGroupSaveData>/m_IllegalItem"] = TYPE_UINT32;
        (*type_map)["SActorDynamicTemplateManipulatorSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorDynamicTemplateManipulatorSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SCautiousVIPGroupState/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousVIPGroupState>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorKeywordProxySaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorKeywordProxySaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_bActive"] = TYPE_BOOL;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_bActive"] = TYPE_BOOL;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_eState"] = TYPE_ENUM;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_nIconId"] = TYPE_INT32;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_nIconId"] = TYPE_INT32;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_eTypeId"] = TYPE_INT32;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_eTypeId"] = TYPE_INT32;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_fProgress"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_fProgress"] = TYPE_FLOAT32;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_fDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_fDistance"] = TYPE_FLOAT32;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_bShowWarning"] = TYPE_BOOL;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_bShowWarning"] = TYPE_BOOL;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_bNoActionAvailable"] = TYPE_BOOL;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_bNoActionAvailable"] = TYPE_BOOL;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_sLabel"] = TYPE_ZSTRING;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_sLabel"] = TYPE_ZSTRING;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_sDescription"] = TYPE_ZSTRING;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_sDescription"] = TYPE_ZSTRING;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_sGlyph"] = TYPE_ZSTRING;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_sGlyph"] = TYPE_ZSTRING;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_fOpacity"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_fOpacity"] = TYPE_FLOAT32;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_bIllegalItem"] = TYPE_BOOL;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_bIllegalItem"] = TYPE_BOOL;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_bSuspiciousItem"] = TYPE_BOOL;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_bSuspiciousItem"] = TYPE_BOOL;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_bDropTempHolsterableItems"] = TYPE_BOOL;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_bDropTempHolsterableItems"] = TYPE_BOOL;
        (*type_map)["SHUDPromptDisplayInfoArray_Dummy/m_nFontSize"] = TYPE_INT32;
        (*type_map)["TArray<SHUDPromptDisplayInfoArray_Dummy>/m_nFontSize"] = TYPE_INT32;
        (*type_map)["SCombatSituationMemberSaveData/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCombatSituationMemberSaveData>/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["SCombatSituationMemberSaveData/m_fDistanceFieldValue"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCombatSituationMemberSaveData>/m_fDistanceFieldValue"] = TYPE_FLOAT32;
        (*type_map)["SCombatSituationMemberSaveData/m_civilianJoinReason"] = TYPE_ENUM;
        (*type_map)["TArray<SCombatSituationMemberSaveData>/m_civilianJoinReason"] = TYPE_ENUM;
        (*type_map)["SCombatSituationMemberSaveData/m_bIsPreferredToFire"] = TYPE_BOOL;
        (*type_map)["TArray<SCombatSituationMemberSaveData>/m_bIsPreferredToFire"] = TYPE_BOOL;
        (*type_map)["SCombatSituationMemberSaveData/m_bDialogPreventShooting"] = TYPE_BOOL;
        (*type_map)["TArray<SCombatSituationMemberSaveData>/m_bDialogPreventShooting"] = TYPE_BOOL;
        (*type_map)["SCombatSituationMemberSaveData/m_bCanFlee"] = TYPE_BOOL;
        (*type_map)["TArray<SCombatSituationMemberSaveData>/m_bCanFlee"] = TYPE_BOOL;
        (*type_map)["SCombatSituationMemberSaveData/m_bCantFleeNoPath"] = TYPE_BOOL;
        (*type_map)["TArray<SCombatSituationMemberSaveData>/m_bCantFleeNoPath"] = TYPE_BOOL;
        (*type_map)["SCombatSituationMemberSaveData/m_bReportedToGuard"] = TYPE_BOOL;
        (*type_map)["TArray<SCombatSituationMemberSaveData>/m_bReportedToGuard"] = TYPE_BOOL;
        (*type_map)["SCombatSituationMemberSaveData/m_bStandAndShoot"] = TYPE_BOOL;
        (*type_map)["TArray<SCombatSituationMemberSaveData>/m_bStandAndShoot"] = TYPE_BOOL;
        (*type_map)["SVariantStruct/m_Data"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SVariantStruct>/m_Data"] = TYPE_ZVARIANT;
        (*type_map)["SBehaviorTreeEntityReference/m_bList"] = TYPE_BOOL;
        (*type_map)["TArray<SBehaviorTreeEntityReference>/m_bList"] = TYPE_BOOL;
        (*type_map)["SBehaviorTreeEntityReference/m_sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SBehaviorTreeEntityReference>/m_sName"] = TYPE_ZSTRING;
        (*type_map)["SBehaviorTreeInfo/m_bList"] = TYPE_BOOL;
        (*type_map)["TArray<SBehaviorTreeInfo>/m_bList"] = TYPE_BOOL;
        (*type_map)["SBehaviorTreeInfo/m_sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SBehaviorTreeInfo>/m_sName"] = TYPE_ZSTRING;
        (*type_map)["SBehaviorTreeInfo/m_sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SBehaviorTreeInfo>/m_sName"] = TYPE_ZSTRING;
        (*type_map)["SShotListenerSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SShotListenerSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SShotListenerSaveData/m_bNPCShotProcessed"] = TYPE_BOOL;
        (*type_map)["TArray<SShotListenerSaveData>/m_bNPCShotProcessed"] = TYPE_BOOL;
        (*type_map)["SKeywordSaveData/m_HolderSaveableId"] = TYPE_UINT32;
        (*type_map)["TArray<SKeywordSaveData>/m_HolderSaveableId"] = TYPE_UINT32;
        (*type_map)["SKeywordSaveData/m_KeywordID"] = TYPE_INT32;
        (*type_map)["TArray<SKeywordSaveData>/m_KeywordID"] = TYPE_INT32;
        (*type_map)["ZAT2Controller.SGeneratedFootstepEvent/m_eFoot"] = TYPE_ENUM;
        (*type_map)["TArray<ZAT2Controller.SGeneratedFootstepEvent>/m_eFoot"] = TYPE_ENUM;
        (*type_map)["ZAT2Controller.SGeneratedFootstepEvent/m_fFrame"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZAT2Controller.SGeneratedFootstepEvent>/m_fFrame"] = TYPE_FLOAT32;
        (*type_map)["SProgressTimerEntitySaveData/m_nInterval"] = TYPE_INT32;
        (*type_map)["TArray<SProgressTimerEntitySaveData>/m_nInterval"] = TYPE_INT32;
        (*type_map)["SProgressTimerEntitySaveData/m_nRemaining"] = TYPE_INT32;
        (*type_map)["TArray<SProgressTimerEntitySaveData>/m_nRemaining"] = TYPE_INT32;
        (*type_map)["SProgressTimerEntitySaveData/m_bValue"] = TYPE_BOOL;
        (*type_map)["TArray<SProgressTimerEntitySaveData>/m_bValue"] = TYPE_BOOL;
        (*type_map)["ZTrespassingSituation.SState/m_eSituationState"] = TYPE_ENUM;
        (*type_map)["TArray<ZTrespassingSituation.SState>/m_eSituationState"] = TYPE_ENUM;
        (*type_map)["ZTrespassingSituation.SState/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZTrespassingSituation.SState>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZTrespassingSituation.SState/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZTrespassingSituation.SState>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZTrespassingSituation.SState/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZTrespassingSituation.SState>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZTrespassingSituation.SState/m_bStopWarningGiven"] = TYPE_BOOL;
        (*type_map)["TArray<ZTrespassingSituation.SState>/m_bStopWarningGiven"] = TYPE_BOOL;
        (*type_map)["SMatrix33/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix33>/x"] = TYPE_FLOAT32;
        (*type_map)["SMatrix33/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix33>/y"] = TYPE_FLOAT32;
        (*type_map)["SMatrix33/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix33>/z"] = TYPE_FLOAT32;
        (*type_map)["SMatrix33/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix33>/x"] = TYPE_FLOAT32;
        (*type_map)["SMatrix33/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix33>/y"] = TYPE_FLOAT32;
        (*type_map)["SMatrix33/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix33>/z"] = TYPE_FLOAT32;
        (*type_map)["SMatrix33/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix33>/x"] = TYPE_FLOAT32;
        (*type_map)["SMatrix33/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix33>/y"] = TYPE_FLOAT32;
        (*type_map)["SMatrix33/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix33>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdBodySaveData/m_pCorpseBodybagEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdBodySaveData>/m_pCorpseBodybagEntity"] = TYPE_UINT32;
        (*type_map)["SCrowdBodySaveData/m_rCrowdEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdBodySaveData>/m_rCrowdEntity"] = TYPE_UINT32;
        (*type_map)["SCrowdBodySaveData/m_iActorIndex"] = TYPE_UINT16;
        (*type_map)["TArray<SCrowdBodySaveData>/m_iActorIndex"] = TYPE_UINT16;
        (*type_map)["SCrowdBodySaveData/m_rPerceptibleEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdBodySaveData>/m_rPerceptibleEntity"] = TYPE_UINT32;
        (*type_map)["SCrowdBodySaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCrowdBodySaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCrowdBodySaveData/m_bManaged"] = TYPE_BOOL;
        (*type_map)["TArray<SCrowdBodySaveData>/m_bManaged"] = TYPE_BOOL;
        (*type_map)["SCrowdBodySaveData/m_rBagSharedKnowledge"] = TYPE_INT32;
        (*type_map)["TArray<SCrowdBodySaveData>/m_rBagSharedKnowledge"] = TYPE_INT32;
        (*type_map)["SMovementLadderSaveData/m_rLadder"] = TYPE_UINT32;
        (*type_map)["TArray<SMovementLadderSaveData>/m_rLadder"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceActorSaveData/m_rActorRef"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceActorSaveData>/m_rActorRef"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceActorSaveData/m_bNeedsVolumeUpdate"] = TYPE_BOOL;
        (*type_map)["TArray<SAIModifierServiceActorSaveData>/m_bNeedsVolumeUpdate"] = TYPE_BOOL;
        (*type_map)["SAIModifierServiceActorSaveData/m_bNeedsKnowledgeUpdate"] = TYPE_BOOL;
        (*type_map)["TArray<SAIModifierServiceActorSaveData>/m_bNeedsKnowledgeUpdate"] = TYPE_BOOL;
        (*type_map)["SAIModifierServiceActorSaveData/m_uiModVolume"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceActorSaveData>/m_uiModVolume"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceActorSaveData/m_uiModBehavior"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceActorSaveData>/m_uiModBehavior"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceActorSaveData/m_uiModRole"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceActorSaveData>/m_uiModRole"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceActorSaveData/m_uiModItem"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceActorSaveData>/m_uiModItem"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceActorSaveData/m_uiModSituation"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceActorSaveData>/m_uiModSituation"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceActorSaveData/m_uiModOutfit"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceActorSaveData>/m_uiModOutfit"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceActorSaveData/m_uiModOverride"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceActorSaveData>/m_uiModOverride"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceActorSaveData/m_uiModStatus"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceActorSaveData>/m_uiModStatus"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceSaveData/m_bFullVolumeUpdate"] = TYPE_BOOL;
        (*type_map)["TArray<SAIModifierServiceSaveData>/m_bFullVolumeUpdate"] = TYPE_BOOL;
        (*type_map)["SAIModifierServiceSaveData/m_rActorRef"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceSaveData>/m_rActorRef"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceSaveData/m_bNeedsVolumeUpdate"] = TYPE_BOOL;
        (*type_map)["TArray<SAIModifierServiceSaveData>/m_bNeedsVolumeUpdate"] = TYPE_BOOL;
        (*type_map)["SAIModifierServiceSaveData/m_bNeedsKnowledgeUpdate"] = TYPE_BOOL;
        (*type_map)["TArray<SAIModifierServiceSaveData>/m_bNeedsKnowledgeUpdate"] = TYPE_BOOL;
        (*type_map)["SAIModifierServiceSaveData/m_uiModVolume"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceSaveData>/m_uiModVolume"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceSaveData/m_uiModBehavior"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceSaveData>/m_uiModBehavior"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceSaveData/m_uiModRole"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceSaveData>/m_uiModRole"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceSaveData/m_uiModItem"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceSaveData>/m_uiModItem"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceSaveData/m_uiModSituation"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceSaveData>/m_uiModSituation"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceSaveData/m_uiModOutfit"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceSaveData>/m_uiModOutfit"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceSaveData/m_uiModOverride"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceSaveData>/m_uiModOverride"] = TYPE_UINT32;
        (*type_map)["SAIModifierServiceSaveData/m_uiModStatus"] = TYPE_UINT32;
        (*type_map)["TArray<SAIModifierServiceSaveData>/m_uiModStatus"] = TYPE_UINT32;
        (*type_map)["SIntelSaveData/m_rCurrentStage"] = TYPE_UINT32;
        (*type_map)["TArray<SIntelSaveData>/m_rCurrentStage"] = TYPE_UINT32;
        (*type_map)["SIntelSaveData/m_fHandlerAudioPlayPosition"] = TYPE_FLOAT32;
        (*type_map)["TArray<SIntelSaveData>/m_fHandlerAudioPlayPosition"] = TYPE_FLOAT32;
        (*type_map)["SIntelSaveData/m_bTracked"] = TYPE_BOOL;
        (*type_map)["TArray<SIntelSaveData>/m_bTracked"] = TYPE_BOOL;
        (*type_map)["SIntelSaveData/m_bUnlocked"] = TYPE_BOOL;
        (*type_map)["TArray<SIntelSaveData>/m_bUnlocked"] = TYPE_BOOL;
        (*type_map)["SIntelSaveData/m_bRegistered"] = TYPE_BOOL;
        (*type_map)["TArray<SIntelSaveData>/m_bRegistered"] = TYPE_BOOL;
        (*type_map)["SIntelSaveData/m_bIsLastTriggered"] = TYPE_BOOL;
        (*type_map)["TArray<SIntelSaveData>/m_bIsLastTriggered"] = TYPE_BOOL;
        (*type_map)["SIntelSaveData/m_bIsHandlerAudioPlaying"] = TYPE_BOOL;
        (*type_map)["TArray<SIntelSaveData>/m_bIsHandlerAudioPlaying"] = TYPE_BOOL;
        (*type_map)["SActivityObjective/_a"] = TYPE_UINT32;
        (*type_map)["TArray<SActivityObjective>/_a"] = TYPE_UINT32;
        (*type_map)["SActivityObjective/_b"] = TYPE_UINT16;
        (*type_map)["TArray<SActivityObjective>/_b"] = TYPE_UINT16;
        (*type_map)["SActivityObjective/_c"] = TYPE_UINT16;
        (*type_map)["TArray<SActivityObjective>/_c"] = TYPE_UINT16;
        (*type_map)["SActivityObjective/_d"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_d"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/_e"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_e"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/_f"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_f"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/_g"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_g"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/_h"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_h"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/_i"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_i"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/_j"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_j"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/_k"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_k"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/activityId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActivityObjective>/activityId"] = TYPE_ZSTRING;
        (*type_map)["SActivityObjective/_a"] = TYPE_UINT32;
        (*type_map)["TArray<SActivityObjective>/_a"] = TYPE_UINT32;
        (*type_map)["SActivityObjective/_b"] = TYPE_UINT16;
        (*type_map)["TArray<SActivityObjective>/_b"] = TYPE_UINT16;
        (*type_map)["SActivityObjective/_c"] = TYPE_UINT16;
        (*type_map)["TArray<SActivityObjective>/_c"] = TYPE_UINT16;
        (*type_map)["SActivityObjective/_d"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_d"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/_e"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_e"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/_f"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_f"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/_g"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_g"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/_h"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_h"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/_i"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_i"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/_j"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_j"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/_k"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityObjective>/_k"] = TYPE_UINT8;
        (*type_map)["SActivityObjective/activityId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActivityObjective>/activityId"] = TYPE_ZSTRING;
        (*type_map)["SActivityDefinition/_a"] = TYPE_UINT32;
        (*type_map)["TArray<SActivityDefinition>/_a"] = TYPE_UINT32;
        (*type_map)["SActivityDefinition/_b"] = TYPE_UINT16;
        (*type_map)["TArray<SActivityDefinition>/_b"] = TYPE_UINT16;
        (*type_map)["SActivityDefinition/_c"] = TYPE_UINT16;
        (*type_map)["TArray<SActivityDefinition>/_c"] = TYPE_UINT16;
        (*type_map)["SActivityDefinition/_d"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_d"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_e"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_e"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_f"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_f"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_g"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_g"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_h"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_h"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_i"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_i"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_j"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_j"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_k"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_k"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/activityId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActivityDefinition>/activityId"] = TYPE_ZSTRING;
        (*type_map)["SActivityDefinition/_a"] = TYPE_UINT32;
        (*type_map)["TArray<SActivityDefinition>/_a"] = TYPE_UINT32;
        (*type_map)["SActivityDefinition/_b"] = TYPE_UINT16;
        (*type_map)["TArray<SActivityDefinition>/_b"] = TYPE_UINT16;
        (*type_map)["SActivityDefinition/_c"] = TYPE_UINT16;
        (*type_map)["TArray<SActivityDefinition>/_c"] = TYPE_UINT16;
        (*type_map)["SActivityDefinition/_d"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_d"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_e"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_e"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_f"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_f"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_g"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_g"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_h"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_h"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_i"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_i"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_j"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_j"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_k"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_k"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/activityId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActivityDefinition>/activityId"] = TYPE_ZSTRING;
        (*type_map)["SActivityDefinition/_a"] = TYPE_UINT32;
        (*type_map)["TArray<SActivityDefinition>/_a"] = TYPE_UINT32;
        (*type_map)["SActivityDefinition/_b"] = TYPE_UINT16;
        (*type_map)["TArray<SActivityDefinition>/_b"] = TYPE_UINT16;
        (*type_map)["SActivityDefinition/_c"] = TYPE_UINT16;
        (*type_map)["TArray<SActivityDefinition>/_c"] = TYPE_UINT16;
        (*type_map)["SActivityDefinition/_d"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_d"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_e"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_e"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_f"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_f"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_g"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_g"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_h"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_h"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_i"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_i"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_j"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_j"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_k"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_k"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/activityId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActivityDefinition>/activityId"] = TYPE_ZSTRING;
        (*type_map)["SActivityDefinition/_a"] = TYPE_UINT32;
        (*type_map)["TArray<SActivityDefinition>/_a"] = TYPE_UINT32;
        (*type_map)["SActivityDefinition/_b"] = TYPE_UINT16;
        (*type_map)["TArray<SActivityDefinition>/_b"] = TYPE_UINT16;
        (*type_map)["SActivityDefinition/_c"] = TYPE_UINT16;
        (*type_map)["TArray<SActivityDefinition>/_c"] = TYPE_UINT16;
        (*type_map)["SActivityDefinition/_d"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_d"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_e"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_e"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_f"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_f"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_g"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_g"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_h"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_h"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_i"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_i"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_j"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_j"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/_k"] = TYPE_UINT8;
        (*type_map)["TArray<SActivityDefinition>/_k"] = TYPE_UINT8;
        (*type_map)["SActivityDefinition/activityId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActivityDefinition>/activityId"] = TYPE_ZSTRING;
        (*type_map)["SActivities/_a"] = TYPE_UINT32;
        (*type_map)["TArray<SActivities>/_a"] = TYPE_UINT32;
        (*type_map)["SActivities/_b"] = TYPE_UINT16;
        (*type_map)["TArray<SActivities>/_b"] = TYPE_UINT16;
        (*type_map)["SActivities/_c"] = TYPE_UINT16;
        (*type_map)["TArray<SActivities>/_c"] = TYPE_UINT16;
        (*type_map)["SActivities/_d"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_d"] = TYPE_UINT8;
        (*type_map)["SActivities/_e"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_e"] = TYPE_UINT8;
        (*type_map)["SActivities/_f"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_f"] = TYPE_UINT8;
        (*type_map)["SActivities/_g"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_g"] = TYPE_UINT8;
        (*type_map)["SActivities/_h"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_h"] = TYPE_UINT8;
        (*type_map)["SActivities/_i"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_i"] = TYPE_UINT8;
        (*type_map)["SActivities/_j"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_j"] = TYPE_UINT8;
        (*type_map)["SActivities/_k"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_k"] = TYPE_UINT8;
        (*type_map)["SActivities/activityId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActivities>/activityId"] = TYPE_ZSTRING;
        (*type_map)["SActivities/_a"] = TYPE_UINT32;
        (*type_map)["TArray<SActivities>/_a"] = TYPE_UINT32;
        (*type_map)["SActivities/_b"] = TYPE_UINT16;
        (*type_map)["TArray<SActivities>/_b"] = TYPE_UINT16;
        (*type_map)["SActivities/_c"] = TYPE_UINT16;
        (*type_map)["TArray<SActivities>/_c"] = TYPE_UINT16;
        (*type_map)["SActivities/_d"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_d"] = TYPE_UINT8;
        (*type_map)["SActivities/_e"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_e"] = TYPE_UINT8;
        (*type_map)["SActivities/_f"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_f"] = TYPE_UINT8;
        (*type_map)["SActivities/_g"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_g"] = TYPE_UINT8;
        (*type_map)["SActivities/_h"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_h"] = TYPE_UINT8;
        (*type_map)["SActivities/_i"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_i"] = TYPE_UINT8;
        (*type_map)["SActivities/_j"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_j"] = TYPE_UINT8;
        (*type_map)["SActivities/_k"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_k"] = TYPE_UINT8;
        (*type_map)["SActivities/activityId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActivities>/activityId"] = TYPE_ZSTRING;
        (*type_map)["SActivities/_a"] = TYPE_UINT32;
        (*type_map)["TArray<SActivities>/_a"] = TYPE_UINT32;
        (*type_map)["SActivities/_b"] = TYPE_UINT16;
        (*type_map)["TArray<SActivities>/_b"] = TYPE_UINT16;
        (*type_map)["SActivities/_c"] = TYPE_UINT16;
        (*type_map)["TArray<SActivities>/_c"] = TYPE_UINT16;
        (*type_map)["SActivities/_d"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_d"] = TYPE_UINT8;
        (*type_map)["SActivities/_e"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_e"] = TYPE_UINT8;
        (*type_map)["SActivities/_f"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_f"] = TYPE_UINT8;
        (*type_map)["SActivities/_g"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_g"] = TYPE_UINT8;
        (*type_map)["SActivities/_h"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_h"] = TYPE_UINT8;
        (*type_map)["SActivities/_i"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_i"] = TYPE_UINT8;
        (*type_map)["SActivities/_j"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_j"] = TYPE_UINT8;
        (*type_map)["SActivities/_k"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_k"] = TYPE_UINT8;
        (*type_map)["SActivities/activityId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActivities>/activityId"] = TYPE_ZSTRING;
        (*type_map)["SActivities/_a"] = TYPE_UINT32;
        (*type_map)["TArray<SActivities>/_a"] = TYPE_UINT32;
        (*type_map)["SActivities/_b"] = TYPE_UINT16;
        (*type_map)["TArray<SActivities>/_b"] = TYPE_UINT16;
        (*type_map)["SActivities/_c"] = TYPE_UINT16;
        (*type_map)["TArray<SActivities>/_c"] = TYPE_UINT16;
        (*type_map)["SActivities/_d"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_d"] = TYPE_UINT8;
        (*type_map)["SActivities/_e"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_e"] = TYPE_UINT8;
        (*type_map)["SActivities/_f"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_f"] = TYPE_UINT8;
        (*type_map)["SActivities/_g"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_g"] = TYPE_UINT8;
        (*type_map)["SActivities/_h"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_h"] = TYPE_UINT8;
        (*type_map)["SActivities/_i"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_i"] = TYPE_UINT8;
        (*type_map)["SActivities/_j"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_j"] = TYPE_UINT8;
        (*type_map)["SActivities/_k"] = TYPE_UINT8;
        (*type_map)["TArray<SActivities>/_k"] = TYPE_UINT8;
        (*type_map)["SActivities/activityId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActivities>/activityId"] = TYPE_ZSTRING;
        (*type_map)["SEntityTemplateReference/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<SEntityTemplateReference>/entityID"] = TYPE_UINT64;
        (*type_map)["SEntityTemplateReference/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<SEntityTemplateReference>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["SEntityTemplateReference/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<SEntityTemplateReference>/entityIndex"] = TYPE_INT32;
        (*type_map)["SEntityTemplateReference/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEntityTemplateReference>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["SEntityTemplateProperty/nPropertyID"] = TYPE_UINT32;
        (*type_map)["TArray<SEntityTemplateProperty>/nPropertyID"] = TYPE_UINT32;
        (*type_map)["SEntityTemplateProperty/value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SEntityTemplateProperty>/value"] = TYPE_ZVARIANT;
        (*type_map)["SEntityTemplatePlatformSpecificProperty/nPropertyID"] = TYPE_UINT32;
        (*type_map)["TArray<SEntityTemplatePlatformSpecificProperty>/nPropertyID"] = TYPE_UINT32;
        (*type_map)["SEntityTemplatePlatformSpecificProperty/value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SEntityTemplatePlatformSpecificProperty>/value"] = TYPE_ZVARIANT;
        (*type_map)["SEntityTemplatePlatformSpecificProperty/platform"] = TYPE_ENUM;
        (*type_map)["TArray<SEntityTemplatePlatformSpecificProperty>/platform"] = TYPE_ENUM;
        (*type_map)["SEntityTemplatePlatformSpecificProperty/postInit"] = TYPE_BOOL;
        (*type_map)["TArray<SEntityTemplatePlatformSpecificProperty>/postInit"] = TYPE_BOOL;
        (*type_map)["STemplateFactorySubEntity/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<STemplateFactorySubEntity>/entityID"] = TYPE_UINT64;
        (*type_map)["STemplateFactorySubEntity/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateFactorySubEntity>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["STemplateFactorySubEntity/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateFactorySubEntity>/entityIndex"] = TYPE_INT32;
        (*type_map)["STemplateFactorySubEntity/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateFactorySubEntity>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["STemplateFactorySubEntity/entityTypeResourceIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateFactorySubEntity>/entityTypeResourceIndex"] = TYPE_INT32;
        (*type_map)["STemplateFactorySubEntity/nPropertyID"] = TYPE_UINT32;
        (*type_map)["TArray<STemplateFactorySubEntity>/nPropertyID"] = TYPE_UINT32;
        (*type_map)["STemplateFactorySubEntity/value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<STemplateFactorySubEntity>/value"] = TYPE_ZVARIANT;
        (*type_map)["STemplateFactorySubEntity/nPropertyID"] = TYPE_UINT32;
        (*type_map)["TArray<STemplateFactorySubEntity>/nPropertyID"] = TYPE_UINT32;
        (*type_map)["STemplateFactorySubEntity/value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<STemplateFactorySubEntity>/value"] = TYPE_ZVARIANT;
        (*type_map)["STemplateFactorySubEntity/nPropertyID"] = TYPE_UINT32;
        (*type_map)["TArray<STemplateFactorySubEntity>/nPropertyID"] = TYPE_UINT32;
        (*type_map)["STemplateFactorySubEntity/value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<STemplateFactorySubEntity>/value"] = TYPE_ZVARIANT;
        (*type_map)["STemplateFactorySubEntity/platform"] = TYPE_ENUM;
        (*type_map)["TArray<STemplateFactorySubEntity>/platform"] = TYPE_ENUM;
        (*type_map)["STemplateFactorySubEntity/postInit"] = TYPE_BOOL;
        (*type_map)["TArray<STemplateFactorySubEntity>/postInit"] = TYPE_BOOL;
        (*type_map)["SEntityTemplatePropertyOverride/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<SEntityTemplatePropertyOverride>/entityID"] = TYPE_UINT64;
        (*type_map)["SEntityTemplatePropertyOverride/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<SEntityTemplatePropertyOverride>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["SEntityTemplatePropertyOverride/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<SEntityTemplatePropertyOverride>/entityIndex"] = TYPE_INT32;
        (*type_map)["SEntityTemplatePropertyOverride/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEntityTemplatePropertyOverride>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["SEntityTemplatePropertyOverride/nPropertyID"] = TYPE_UINT32;
        (*type_map)["TArray<SEntityTemplatePropertyOverride>/nPropertyID"] = TYPE_UINT32;
        (*type_map)["SEntityTemplatePropertyOverride/value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SEntityTemplatePropertyOverride>/value"] = TYPE_ZVARIANT;
        (*type_map)["STemplateEntityFactory/subType"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityFactory>/subType"] = TYPE_INT32;
        (*type_map)["STemplateEntityFactory/blueprintIndexInResourceHeader"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityFactory>/blueprintIndexInResourceHeader"] = TYPE_INT32;
        (*type_map)["STemplateEntityFactory/rootEntityIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityFactory>/rootEntityIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityFactory/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<STemplateEntityFactory>/entityID"] = TYPE_UINT64;
        (*type_map)["STemplateEntityFactory/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityFactory>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityFactory/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityFactory>/entityIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityFactory/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityFactory>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityFactory/entityTypeResourceIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityFactory>/entityTypeResourceIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityFactory/nPropertyID"] = TYPE_UINT32;
        (*type_map)["TArray<STemplateEntityFactory>/nPropertyID"] = TYPE_UINT32;
        (*type_map)["STemplateEntityFactory/value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<STemplateEntityFactory>/value"] = TYPE_ZVARIANT;
        (*type_map)["STemplateEntityFactory/nPropertyID"] = TYPE_UINT32;
        (*type_map)["TArray<STemplateEntityFactory>/nPropertyID"] = TYPE_UINT32;
        (*type_map)["STemplateEntityFactory/value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<STemplateEntityFactory>/value"] = TYPE_ZVARIANT;
        (*type_map)["STemplateEntityFactory/nPropertyID"] = TYPE_UINT32;
        (*type_map)["TArray<STemplateEntityFactory>/nPropertyID"] = TYPE_UINT32;
        (*type_map)["STemplateEntityFactory/value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<STemplateEntityFactory>/value"] = TYPE_ZVARIANT;
        (*type_map)["STemplateEntityFactory/platform"] = TYPE_ENUM;
        (*type_map)["TArray<STemplateEntityFactory>/platform"] = TYPE_ENUM;
        (*type_map)["STemplateEntityFactory/postInit"] = TYPE_BOOL;
        (*type_map)["TArray<STemplateEntityFactory>/postInit"] = TYPE_BOOL;
        (*type_map)["STemplateEntityFactory/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<STemplateEntityFactory>/entityID"] = TYPE_UINT64;
        (*type_map)["STemplateEntityFactory/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityFactory>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityFactory/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityFactory>/entityIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityFactory/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityFactory>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityFactory/nPropertyID"] = TYPE_UINT32;
        (*type_map)["TArray<STemplateEntityFactory>/nPropertyID"] = TYPE_UINT32;
        (*type_map)["STemplateEntityFactory/value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<STemplateEntityFactory>/value"] = TYPE_ZVARIANT;
        (*type_map)["STemplateEntityFactory/TArray<int32>"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityFactory>/TArray<int32>"] = TYPE_INT32;
        (*type_map)["SColorRGB/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SColorRGB>/r"] = TYPE_FLOAT32;
        (*type_map)["SColorRGB/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SColorRGB>/g"] = TYPE_FLOAT32;
        (*type_map)["SColorRGB/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SColorRGB>/b"] = TYPE_FLOAT32;
        (*type_map)["SLightSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SLightSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SLightSaveData/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLightSaveData>/r"] = TYPE_FLOAT32;
        (*type_map)["SLightSaveData/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLightSaveData>/g"] = TYPE_FLOAT32;
        (*type_map)["SLightSaveData/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLightSaveData>/b"] = TYPE_FLOAT32;
        (*type_map)["SLightSaveData/m_fDiffusePower"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLightSaveData>/m_fDiffusePower"] = TYPE_FLOAT32;
        (*type_map)["SLightSaveData/m_fAspectXByY_Actual"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLightSaveData>/m_fAspectXByY_Actual"] = TYPE_FLOAT32;
        (*type_map)["SLightSaveData/m_bVisible"] = TYPE_BOOL;
        (*type_map)["TArray<SLightSaveData>/m_bVisible"] = TYPE_BOOL;
        (*type_map)["SItemActionSaveData/m_rItem"] = TYPE_UINT32;
        (*type_map)["TArray<SItemActionSaveData>/m_rItem"] = TYPE_UINT32;
        (*type_map)["SDramaActorSaveState/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SDramaActorSaveState>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SDramaActorSaveState/m_rSequence"] = TYPE_UINT32;
        (*type_map)["TArray<SDramaActorSaveState>/m_rSequence"] = TYPE_UINT32;
        (*type_map)["SDramaActorSaveState/m_rBehavior"] = TYPE_UINT32;
        (*type_map)["TArray<SDramaActorSaveState>/m_rBehavior"] = TYPE_UINT32;
        (*type_map)["SDramaActorSaveState/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SDramaActorSaveState>/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["SDramaActorSaveState/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SDramaActorSaveState>/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["SDramaActorSaveState/m_sMatchName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SDramaActorSaveState>/m_sMatchName"] = TYPE_ZSTRING;
        (*type_map)["SDramaActorSaveState/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SDramaActorSaveState>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SDramaActorSaveState/m_bIsDone"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaActorSaveState>/m_bIsDone"] = TYPE_BOOL;
        (*type_map)["SDramaActorSaveState/m_bIsPaused"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaActorSaveState>/m_bIsPaused"] = TYPE_BOOL;
        (*type_map)["SDramaActorSaveState/m_bIsSpeaking"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaActorSaveState>/m_bIsSpeaking"] = TYPE_BOOL;
        (*type_map)["STrackerEntitySaveData/m_rTracker"] = TYPE_UINT32;
        (*type_map)["TArray<STrackerEntitySaveData>/m_rTracker"] = TYPE_UINT32;
        (*type_map)["STrackerEntitySaveData/m_bIsVisible"] = TYPE_BOOL;
        (*type_map)["TArray<STrackerEntitySaveData>/m_bIsVisible"] = TYPE_BOOL;
        (*type_map)["STrackerEntitySaveData/m_bIsEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<STrackerEntitySaveData>/m_bIsEnabled"] = TYPE_BOOL;
        (*type_map)["STrackerEntitySaveData/m_bSpatialVisibility"] = TYPE_BOOL;
        (*type_map)["TArray<STrackerEntitySaveData>/m_bSpatialVisibility"] = TYPE_BOOL;
        (*type_map)["STrackerManagerSaveData/m_rTracker"] = TYPE_UINT32;
        (*type_map)["TArray<STrackerManagerSaveData>/m_rTracker"] = TYPE_UINT32;
        (*type_map)["STrackerManagerSaveData/m_bIsVisible"] = TYPE_BOOL;
        (*type_map)["TArray<STrackerManagerSaveData>/m_bIsVisible"] = TYPE_BOOL;
        (*type_map)["STrackerManagerSaveData/m_bIsEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<STrackerManagerSaveData>/m_bIsEnabled"] = TYPE_BOOL;
        (*type_map)["STrackerManagerSaveData/m_bSpatialVisibility"] = TYPE_BOOL;
        (*type_map)["TArray<STrackerManagerSaveData>/m_bSpatialVisibility"] = TYPE_BOOL;
        (*type_map)["ZHM5BodySoundEventConsumer.SBodySoundEventData/m_nEvent"] = TYPE_ENUM;
        (*type_map)["TArray<ZHM5BodySoundEventConsumer.SBodySoundEventData>/m_nEvent"] = TYPE_ENUM;
        (*type_map)["AnimationEventDataTypes.SBlend/m_fBlendTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<AnimationEventDataTypes.SBlend>/m_fBlendTime"] = TYPE_FLOAT32;
        (*type_map)["SRemoteControlReceiverSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SRemoteControlReceiverSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SRemoteControlReceiverSaveData/m_bReceiverActivated"] = TYPE_BOOL;
        (*type_map)["TArray<SRemoteControlReceiverSaveData>/m_bReceiverActivated"] = TYPE_BOOL;
        (*type_map)["SRemoteControlReceiverSaveData/m_bDestroyed"] = TYPE_BOOL;
        (*type_map)["TArray<SRemoteControlReceiverSaveData>/m_bDestroyed"] = TYPE_BOOL;
        (*type_map)["SBodyContainerSaveData/m_eBCState"] = TYPE_ENUM;
        (*type_map)["TArray<SBodyContainerSaveData>/m_eBCState"] = TYPE_ENUM;
        (*type_map)["SBodyContainerSaveData/m_fLidAutoCloseTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyContainerSaveData>/m_fLidAutoCloseTime"] = TYPE_FLOAT32;
        (*type_map)["SBodyContainerSaveData/m_fLidOpenFraction"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyContainerSaveData>/m_fLidOpenFraction"] = TYPE_FLOAT32;
        (*type_map)["SBodyContainerSaveData/m_bFrameUpdateActive"] = TYPE_BOOL;
        (*type_map)["TArray<SBodyContainerSaveData>/m_bFrameUpdateActive"] = TYPE_BOOL;
        (*type_map)["ZHM5FootstepEventConsumer.SFootstepSoundEventData/m_nEvent"] = TYPE_ENUM;
        (*type_map)["TArray<ZHM5FootstepEventConsumer.SFootstepSoundEventData>/m_nEvent"] = TYPE_ENUM;
        (*type_map)["ZRecoverUnconsciousSituation.SSituationSaveData/m_rVictim"] = TYPE_UINT32;
        (*type_map)["TArray<ZRecoverUnconsciousSituation.SSituationSaveData>/m_rVictim"] = TYPE_UINT32;
        (*type_map)["ZRecoverUnconsciousSituation.SSituationSaveData/m_pInvestigateDisguiseGroup"] = TYPE_INT32;
        (*type_map)["TArray<ZRecoverUnconsciousSituation.SSituationSaveData>/m_pInvestigateDisguiseGroup"] = TYPE_INT32;
        (*type_map)["ZRecoverUnconsciousSituation.SSituationSaveData/m_pRecoverUnconsciousGroup"] = TYPE_INT32;
        (*type_map)["TArray<ZRecoverUnconsciousSituation.SSituationSaveData>/m_pRecoverUnconsciousGroup"] = TYPE_INT32;
        (*type_map)["ZRecoverUnconsciousSituation.SSituationSaveData/m_pObserversGroup"] = TYPE_INT32;
        (*type_map)["TArray<ZRecoverUnconsciousSituation.SSituationSaveData>/m_pObserversGroup"] = TYPE_INT32;
        (*type_map)["ZRecoverUnconsciousSituation.SSituationSaveData/m_bEscalate"] = TYPE_BOOL;
        (*type_map)["TArray<ZRecoverUnconsciousSituation.SSituationSaveData>/m_bEscalate"] = TYPE_BOOL;
        (*type_map)["ZRecoverUnconsciousSituation.SSituationSaveData/m_bVictimPacified"] = TYPE_BOOL;
        (*type_map)["TArray<ZRecoverUnconsciousSituation.SSituationSaveData>/m_bVictimPacified"] = TYPE_BOOL;
        (*type_map)["S3rdPersonCameraSaveData/m_fAngleYaw"] = TYPE_FLOAT32;
        (*type_map)["TArray<S3rdPersonCameraSaveData>/m_fAngleYaw"] = TYPE_FLOAT32;
        (*type_map)["S3rdPersonCameraSaveData/m_fAnglePitch"] = TYPE_FLOAT32;
        (*type_map)["TArray<S3rdPersonCameraSaveData>/m_fAnglePitch"] = TYPE_FLOAT32;
        (*type_map)["SCautiousSituationMemberSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousSituationMemberSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCautiousSituationMemberSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousSituationMemberSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCautiousSituationMemberSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousSituationMemberSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCautiousSituationMemberSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousSituationMemberSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCautiousSituationMemberSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousSituationMemberSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCautiousSituationMemberSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousSituationMemberSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCautiousSituationMemberSaveData/m_pGuardDutyPoint"] = TYPE_UINT32;
        (*type_map)["TArray<SCautiousSituationMemberSaveData>/m_pGuardDutyPoint"] = TYPE_UINT32;
        (*type_map)["SCautiousSituationMemberSaveData/m_nBulletImpactsHeard"] = TYPE_INT32;
        (*type_map)["TArray<SCautiousSituationMemberSaveData>/m_nBulletImpactsHeard"] = TYPE_INT32;
        (*type_map)["SCautiousSituationMemberSaveData/m_nPatrolWaypointIndex"] = TYPE_INT32;
        (*type_map)["TArray<SCautiousSituationMemberSaveData>/m_nPatrolWaypointIndex"] = TYPE_INT32;
        (*type_map)["SCautiousSituationMemberSaveData/m_nPatrolWaypointSubIndex"] = TYPE_UINT32;
        (*type_map)["TArray<SCautiousSituationMemberSaveData>/m_nPatrolWaypointSubIndex"] = TYPE_UINT32;
        (*type_map)["SCautiousSituationMemberSaveData/m_bBanterCandidate"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousSituationMemberSaveData>/m_bBanterCandidate"] = TYPE_BOOL;
        (*type_map)["SCautiousSituationMemberSaveData/m_bCivOccupant"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousSituationMemberSaveData>/m_bCivOccupant"] = TYPE_BOOL;
        (*type_map)["SCautiousSituationMemberSaveData/m_bRecievingNewHuntTarget"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousSituationMemberSaveData>/m_bRecievingNewHuntTarget"] = TYPE_BOOL;
        (*type_map)["SCautiousSituationMemberSaveData/m_bLockdownEnforcer"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousSituationMemberSaveData>/m_bLockdownEnforcer"] = TYPE_BOOL;
        (*type_map)["ZHM5HIKEventConsumer.SZHM5HIKEventData/m_nEffector"] = TYPE_ENUM;
        (*type_map)["TArray<ZHM5HIKEventConsumer.SZHM5HIKEventData>/m_nEffector"] = TYPE_ENUM;
        (*type_map)["ZHM5HIKEventConsumer.SZHM5HIKEventData/m_nBlend"] = TYPE_ENUM;
        (*type_map)["TArray<ZHM5HIKEventConsumer.SZHM5HIKEventData>/m_nBlend"] = TYPE_ENUM;
        (*type_map)["SDrama2SetupSaveData/m_bDoneTriggered"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2SetupSaveData>/m_bDoneTriggered"] = TYPE_BOOL;
        (*type_map)["SDrama2SetupSaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SDrama2SetupSaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SDrama2SetupSaveData/m_rSituation"] = TYPE_UINT32;
        (*type_map)["TArray<SDrama2SetupSaveData>/m_rSituation"] = TYPE_UINT32;
        (*type_map)["SDrama2SetupCollectionSaveData/m_bDoneTriggered"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2SetupCollectionSaveData>/m_bDoneTriggered"] = TYPE_BOOL;
        (*type_map)["SDrama2SetupCollectionSaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SDrama2SetupCollectionSaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SDrama2SetupCollectionSaveData/m_rSituation"] = TYPE_UINT32;
        (*type_map)["TArray<SDrama2SetupCollectionSaveData>/m_rSituation"] = TYPE_UINT32;
        (*type_map)["SBehaviorTreeEvaluationLogEntry/m_nBehaviorTreeIndex"] = TYPE_UINT32;
        (*type_map)["TArray<SBehaviorTreeEvaluationLogEntry>/m_nBehaviorTreeIndex"] = TYPE_UINT32;
        (*type_map)["SBehaviorTreeEvaluationLogEntry/m_nConditionOffset"] = TYPE_UINT64;
        (*type_map)["TArray<SBehaviorTreeEvaluationLogEntry>/m_nConditionOffset"] = TYPE_UINT64;
        (*type_map)["SBehaviorTreeEvaluationLogEntry/m_bResult"] = TYPE_BOOL;
        (*type_map)["TArray<SBehaviorTreeEvaluationLogEntry>/m_bResult"] = TYPE_BOOL;
        (*type_map)["SBehaviorTreeEvaluationLog/m_uri"] = TYPE_ZSTRING;
        (*type_map)["TArray<SBehaviorTreeEvaluationLog>/m_uri"] = TYPE_ZSTRING;
        (*type_map)["SBehaviorTreeEvaluationLog/m_nBehaviorTreeIndex"] = TYPE_UINT32;
        (*type_map)["TArray<SBehaviorTreeEvaluationLog>/m_nBehaviorTreeIndex"] = TYPE_UINT32;
        (*type_map)["SBehaviorTreeEvaluationLog/m_nConditionOffset"] = TYPE_UINT64;
        (*type_map)["TArray<SBehaviorTreeEvaluationLog>/m_nConditionOffset"] = TYPE_UINT64;
        (*type_map)["SBehaviorTreeEvaluationLog/m_bResult"] = TYPE_BOOL;
        (*type_map)["TArray<SBehaviorTreeEvaluationLog>/m_bResult"] = TYPE_BOOL;
        (*type_map)["STargetInfoObjectiveCondition/header"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoObjectiveCondition>/header"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoObjectiveCondition/title"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoObjectiveCondition>/title"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoObjectiveCondition/icon"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoObjectiveCondition>/icon"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoObjectiveCondition/type"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoObjectiveCondition>/type"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoObjectiveCondition/hardCondition"] = TYPE_BOOL;
        (*type_map)["TArray<STargetInfoObjectiveCondition>/hardCondition"] = TYPE_BOOL;
        (*type_map)["STargetInfoDisplayData/npcName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoDisplayData>/npcName"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoDisplayData/disguiseName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoDisplayData>/disguiseName"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoDisplayData/objectiveType"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoDisplayData>/objectiveType"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoDisplayData/header"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoDisplayData>/header"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoDisplayData/title"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoDisplayData>/title"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoDisplayData/icon"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoDisplayData>/icon"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoDisplayData/type"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoDisplayData>/type"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoDisplayData/hardCondition"] = TYPE_BOOL;
        (*type_map)["TArray<STargetInfoDisplayData>/hardCondition"] = TYPE_BOOL;
        (*type_map)["STargetInfoDisplayData/fX"] = TYPE_INT32;
        (*type_map)["TArray<STargetInfoDisplayData>/fX"] = TYPE_INT32;
        (*type_map)["STargetInfoDisplayData/fY"] = TYPE_INT32;
        (*type_map)["TArray<STargetInfoDisplayData>/fY"] = TYPE_INT32;
        (*type_map)["STargetInfoDisplayData/fAlpha"] = TYPE_FLOAT32;
        (*type_map)["TArray<STargetInfoDisplayData>/fAlpha"] = TYPE_FLOAT32;
        (*type_map)["STargetInfoDisplayData/bIsTarget"] = TYPE_BOOL;
        (*type_map)["TArray<STargetInfoDisplayData>/bIsTarget"] = TYPE_BOOL;
        (*type_map)["STargetInfoDisplayData_Dummy/npcName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoDisplayData_Dummy>/npcName"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoDisplayData_Dummy/disguiseName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoDisplayData_Dummy>/disguiseName"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoDisplayData_Dummy/objectiveType"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoDisplayData_Dummy>/objectiveType"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoDisplayData_Dummy/header"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoDisplayData_Dummy>/header"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoDisplayData_Dummy/title"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoDisplayData_Dummy>/title"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoDisplayData_Dummy/icon"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoDisplayData_Dummy>/icon"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoDisplayData_Dummy/type"] = TYPE_ZSTRING;
        (*type_map)["TArray<STargetInfoDisplayData_Dummy>/type"] = TYPE_ZSTRING;
        (*type_map)["STargetInfoDisplayData_Dummy/hardCondition"] = TYPE_BOOL;
        (*type_map)["TArray<STargetInfoDisplayData_Dummy>/hardCondition"] = TYPE_BOOL;
        (*type_map)["STargetInfoDisplayData_Dummy/fX"] = TYPE_INT32;
        (*type_map)["TArray<STargetInfoDisplayData_Dummy>/fX"] = TYPE_INT32;
        (*type_map)["STargetInfoDisplayData_Dummy/fY"] = TYPE_INT32;
        (*type_map)["TArray<STargetInfoDisplayData_Dummy>/fY"] = TYPE_INT32;
        (*type_map)["STargetInfoDisplayData_Dummy/fAlpha"] = TYPE_FLOAT32;
        (*type_map)["TArray<STargetInfoDisplayData_Dummy>/fAlpha"] = TYPE_FLOAT32;
        (*type_map)["STargetInfoDisplayData_Dummy/bIsTarget"] = TYPE_BOOL;
        (*type_map)["TArray<STargetInfoDisplayData_Dummy>/bIsTarget"] = TYPE_BOOL;
        (*type_map)["SClothBundleSpawnSaveData/m_rClothbundle"] = TYPE_UINT32;
        (*type_map)["TArray<SClothBundleSpawnSaveData>/m_rClothbundle"] = TYPE_UINT32;
        (*type_map)["SAudioEmitterEventSaveData/m_nEventId"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioEmitterEventSaveData>/m_nEventId"] = TYPE_UINT32;
        (*type_map)["SAudioEmitterEventSaveData/m_bPaused"] = TYPE_BOOL;
        (*type_map)["TArray<SAudioEmitterEventSaveData>/m_bPaused"] = TYPE_BOOL;
        (*type_map)["SAudioEmitterEventSaveData/m_nFlags"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioEmitterEventSaveData>/m_nFlags"] = TYPE_UINT32;
        (*type_map)["SAudioEmitterEventSaveData/m_rEventSender"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioEmitterEventSaveData>/m_rEventSender"] = TYPE_UINT32;
        (*type_map)["SAudioEmitterEventSaveData/m_nSeekPosition"] = TYPE_INT32;
        (*type_map)["TArray<SAudioEmitterEventSaveData>/m_nSeekPosition"] = TYPE_INT32;
        (*type_map)["SAudioEmitterEventSaveData/m_nPlayState"] = TYPE_UINT8;
        (*type_map)["TArray<SAudioEmitterEventSaveData>/m_nPlayState"] = TYPE_UINT8;
        (*type_map)["SActorAnimSetVariationIndexSaveData/m_rAnimationSetDefinition"] = TYPE_UINT32;
        (*type_map)["TArray<SActorAnimSetVariationIndexSaveData>/m_rAnimationSetDefinition"] = TYPE_UINT32;
        (*type_map)["SActorAnimSetVariationIndexSaveData/m_nIndex"] = TYPE_INT32;
        (*type_map)["TArray<SActorAnimSetVariationIndexSaveData>/m_nIndex"] = TYPE_INT32;
        (*type_map)["SActorAnimSetSaveData/m_eAnimSet"] = TYPE_ENUM;
        (*type_map)["TArray<SActorAnimSetSaveData>/m_eAnimSet"] = TYPE_ENUM;
        (*type_map)["SActorAnimSetSaveData/m_rCustomAnimationSet"] = TYPE_UINT32;
        (*type_map)["TArray<SActorAnimSetSaveData>/m_rCustomAnimationSet"] = TYPE_UINT32;
        (*type_map)["SActorAnimSetSaveData/m_eVariationResourceMaxTension"] = TYPE_ENUM;
        (*type_map)["TArray<SActorAnimSetSaveData>/m_eVariationResourceMaxTension"] = TYPE_ENUM;
        (*type_map)["SActorAnimSetSaveData/m_eVariationResourceMaxEmotionState"] = TYPE_ENUM;
        (*type_map)["TArray<SActorAnimSetSaveData>/m_eVariationResourceMaxEmotionState"] = TYPE_ENUM;
        (*type_map)["SActorAnimSetSaveData/m_eAnimSetEmotionState"] = TYPE_ENUM;
        (*type_map)["TArray<SActorAnimSetSaveData>/m_eAnimSetEmotionState"] = TYPE_ENUM;
        (*type_map)["SActorAnimSetSaveData/m_ePreCustomAnimSet"] = TYPE_ENUM;
        (*type_map)["TArray<SActorAnimSetSaveData>/m_ePreCustomAnimSet"] = TYPE_ENUM;
        (*type_map)["SActorAnimSetSaveData/m_rAnimationSetDefinition"] = TYPE_UINT32;
        (*type_map)["TArray<SActorAnimSetSaveData>/m_rAnimationSetDefinition"] = TYPE_UINT32;
        (*type_map)["SActorAnimSetSaveData/m_nIndex"] = TYPE_INT32;
        (*type_map)["TArray<SActorAnimSetSaveData>/m_nIndex"] = TYPE_INT32;
        (*type_map)["SActorAnimSetSaveData/m_rAnimationSetDefinition"] = TYPE_UINT32;
        (*type_map)["TArray<SActorAnimSetSaveData>/m_rAnimationSetDefinition"] = TYPE_UINT32;
        (*type_map)["SActorAnimSetSaveData/m_nIndex"] = TYPE_INT32;
        (*type_map)["TArray<SActorAnimSetSaveData>/m_nIndex"] = TYPE_INT32;
        (*type_map)["SActorInventoryItemSaveData/m_rItem"] = TYPE_UINT32;
        (*type_map)["TArray<SActorInventoryItemSaveData>/m_rItem"] = TYPE_UINT32;
        (*type_map)["SActorInventoryItemSaveData/m_eAttachLocation"] = TYPE_ENUM;
        (*type_map)["TArray<SActorInventoryItemSaveData>/m_eAttachLocation"] = TYPE_ENUM;
        (*type_map)["SActorInventoryItemSaveData/m_eMaxTension"] = TYPE_ENUM;
        (*type_map)["TArray<SActorInventoryItemSaveData>/m_eMaxTension"] = TYPE_ENUM;
        (*type_map)["SActorInventoryItemSaveData/m_bLeftHand"] = TYPE_BOOL;
        (*type_map)["TArray<SActorInventoryItemSaveData>/m_bLeftHand"] = TYPE_BOOL;
        (*type_map)["SActorInventoryItemSaveData/m_bWeapon"] = TYPE_BOOL;
        (*type_map)["TArray<SActorInventoryItemSaveData>/m_bWeapon"] = TYPE_BOOL;
        (*type_map)["SActorInventoryItemSaveData/m_bGrenade"] = TYPE_BOOL;
        (*type_map)["TArray<SActorInventoryItemSaveData>/m_bGrenade"] = TYPE_BOOL;
        (*type_map)["SActorInventorySaveData/m_rItem"] = TYPE_UINT32;
        (*type_map)["TArray<SActorInventorySaveData>/m_rItem"] = TYPE_UINT32;
        (*type_map)["SActorInventorySaveData/m_eAttachLocation"] = TYPE_ENUM;
        (*type_map)["TArray<SActorInventorySaveData>/m_eAttachLocation"] = TYPE_ENUM;
        (*type_map)["SActorInventorySaveData/m_eMaxTension"] = TYPE_ENUM;
        (*type_map)["TArray<SActorInventorySaveData>/m_eMaxTension"] = TYPE_ENUM;
        (*type_map)["SActorInventorySaveData/m_bLeftHand"] = TYPE_BOOL;
        (*type_map)["TArray<SActorInventorySaveData>/m_bLeftHand"] = TYPE_BOOL;
        (*type_map)["SActorInventorySaveData/m_bWeapon"] = TYPE_BOOL;
        (*type_map)["TArray<SActorInventorySaveData>/m_bWeapon"] = TYPE_BOOL;
        (*type_map)["SActorInventorySaveData/m_bGrenade"] = TYPE_BOOL;
        (*type_map)["TArray<SActorInventorySaveData>/m_bGrenade"] = TYPE_BOOL;
        (*type_map)["SLongTermMemorySaveData/m_Memory"] = TYPE_UINT8;
        (*type_map)["TArray<SLongTermMemorySaveData>/m_Memory"] = TYPE_UINT8;
        (*type_map)["SActorDamageControlSaveData/bExplosive"] = TYPE_BOOL;
        (*type_map)["TArray<SActorDamageControlSaveData>/bExplosive"] = TYPE_BOOL;
        (*type_map)["SActorDamageControlSaveData/bProjectile"] = TYPE_BOOL;
        (*type_map)["TArray<SActorDamageControlSaveData>/bProjectile"] = TYPE_BOOL;
        (*type_map)["SActorDamageControlSaveData/bHeadshot"] = TYPE_BOOL;
        (*type_map)["TArray<SActorDamageControlSaveData>/bHeadshot"] = TYPE_BOOL;
        (*type_map)["SActorDamageControlSaveData/bSniperShot"] = TYPE_BOOL;
        (*type_map)["TArray<SActorDamageControlSaveData>/bSniperShot"] = TYPE_BOOL;
        (*type_map)["SActorDamageControlSaveData/bThroughWall"] = TYPE_BOOL;
        (*type_map)["TArray<SActorDamageControlSaveData>/bThroughWall"] = TYPE_BOOL;
        (*type_map)["SActorDamageControlSaveData/bKillByAccident"] = TYPE_BOOL;
        (*type_map)["TArray<SActorDamageControlSaveData>/bKillByAccident"] = TYPE_BOOL;
        (*type_map)["SActorDamageControlSaveData/bWeaponSilenced"] = TYPE_BOOL;
        (*type_map)["TArray<SActorDamageControlSaveData>/bWeaponSilenced"] = TYPE_BOOL;
        (*type_map)["SActorDamageControlSaveData/bLongRange"] = TYPE_BOOL;
        (*type_map)["TArray<SActorDamageControlSaveData>/bLongRange"] = TYPE_BOOL;
        (*type_map)["SActorDamageControlSaveData/fTotalDamage"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorDamageControlSaveData>/fTotalDamage"] = TYPE_FLOAT32;
        (*type_map)["SActorDamageControlSaveData/fPacifyDamage"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorDamageControlSaveData>/fPacifyDamage"] = TYPE_FLOAT32;
        (*type_map)["SActorDamageControlSaveData/nImpactBodyPart"] = TYPE_INT32;
        (*type_map)["TArray<SActorDamageControlSaveData>/nImpactBodyPart"] = TYPE_INT32;
        (*type_map)["SActorDamageControlSaveData/maxDeathType"] = TYPE_ENUM;
        (*type_map)["TArray<SActorDamageControlSaveData>/maxDeathType"] = TYPE_ENUM;
        (*type_map)["SActorDamageControlSaveData/maxDeathContext"] = TYPE_ENUM;
        (*type_map)["TArray<SActorDamageControlSaveData>/maxDeathContext"] = TYPE_ENUM;
        (*type_map)["SActorDamageControlSaveData/rAccidentSetup"] = TYPE_UINT32;
        (*type_map)["TArray<SActorDamageControlSaveData>/rAccidentSetup"] = TYPE_UINT32;
        (*type_map)["SActorDamageControlSaveData/bFirearmPacifiesTarget"] = TYPE_BOOL;
        (*type_map)["TArray<SActorDamageControlSaveData>/bFirearmPacifiesTarget"] = TYPE_BOOL;
        (*type_map)["SActorDamageControlSaveData/bBulletCausesHitReaction"] = TYPE_BOOL;
        (*type_map)["TArray<SActorDamageControlSaveData>/bBulletCausesHitReaction"] = TYPE_BOOL;
        (*type_map)["SActorDamageControlSaveData/fHitsNumberTimeout"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorDamageControlSaveData>/fHitsNumberTimeout"] = TYPE_FLOAT32;
        (*type_map)["SActorDamageControlSaveData/fHealthPercentTimeout"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorDamageControlSaveData>/fHealthPercentTimeout"] = TYPE_FLOAT32;
        (*type_map)["SActorDamageControlSaveData/rCharacter"] = TYPE_UINT32;
        (*type_map)["TArray<SActorDamageControlSaveData>/rCharacter"] = TYPE_UINT32;
        (*type_map)["SActorDamageControlSaveData/rSource"] = TYPE_UINT32;
        (*type_map)["TArray<SActorDamageControlSaveData>/rSource"] = TYPE_UINT32;
        (*type_map)["SActorDamageControlSaveData/m_bValidAccuseUnconsciousOutfit"] = TYPE_BOOL;
        (*type_map)["TArray<SActorDamageControlSaveData>/m_bValidAccuseUnconsciousOutfit"] = TYPE_BOOL;
        (*type_map)["SActorDamageControlSaveData/eDeathSpeak"] = TYPE_ENUM;
        (*type_map)["TArray<SActorDamageControlSaveData>/eDeathSpeak"] = TYPE_ENUM;
        (*type_map)["SActorDamageControlSaveData/bDefaultDeathSound"] = TYPE_BOOL;
        (*type_map)["TArray<SActorDamageControlSaveData>/bDefaultDeathSound"] = TYPE_BOOL;
        (*type_map)["SActorDamageControlSaveData/iEvents"] = TYPE_INT32;
        (*type_map)["TArray<SActorDamageControlSaveData>/iEvents"] = TYPE_INT32;
        (*type_map)["SActorDamageControlSaveData/fAgilityElementUncosciousTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorDamageControlSaveData>/fAgilityElementUncosciousTime"] = TYPE_FLOAT32;
        (*type_map)["SActorDynamicTemplateSaveData/m_sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActorDynamicTemplateSaveData>/m_sName"] = TYPE_ZSTRING;
        (*type_map)["SActorDynamicTemplateSaveData/m_eTensionLimit"] = TYPE_ENUM;
        (*type_map)["TArray<SActorDynamicTemplateSaveData>/m_eTensionLimit"] = TYPE_ENUM;
        (*type_map)["SActorDynamicTemplateSaveData/m_eEmotionLimit"] = TYPE_ENUM;
        (*type_map)["TArray<SActorDynamicTemplateSaveData>/m_eEmotionLimit"] = TYPE_ENUM;
        (*type_map)["SActorDynamicTemplateSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorDynamicTemplateSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorDynamicTemplateSaveData/m_eTensionRemoveLimit"] = TYPE_ENUM;
        (*type_map)["TArray<SActorDynamicTemplateSaveData>/m_eTensionRemoveLimit"] = TYPE_ENUM;
        (*type_map)["SActorDynamicTemplateSaveData/m_eEmotionRemoveLimit"] = TYPE_ENUM;
        (*type_map)["TArray<SActorDynamicTemplateSaveData>/m_eEmotionRemoveLimit"] = TYPE_ENUM;
        (*type_map)["SActorDynamicTemplateSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorDynamicTemplateSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorDynamicTemplateSaveData/m_resourceID"] = TYPE_INT64;
        (*type_map)["TArray<SActorDynamicTemplateSaveData>/m_resourceID"] = TYPE_INT64;
        (*type_map)["SActorDynamicTemplateSaveData/m_rInstance"] = TYPE_UINT32;
        (*type_map)["TArray<SActorDynamicTemplateSaveData>/m_rInstance"] = TYPE_UINT32;
        (*type_map)["SEventHistorySaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEventHistorySaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorBoneSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorBoneSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorBoneSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorBoneSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorBoneSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorBoneSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorBoneSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorBoneSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorBoneSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorBoneSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorBoneSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorBoneSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorBoneSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorBoneSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorBoneSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorBoneSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorRagdollPoseSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorRagdollPoseSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorRagdollPoseSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorRagdollPoseSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorRagdollPoseSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorRagdollPoseSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorRagdollPoseSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorRagdollPoseSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorRagdollPoseSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorRagdollPoseSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorRagdollPoseSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorRagdollPoseSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorRagdollPoseSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorRagdollPoseSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorRagdollPoseSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorRagdollPoseSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorRagdollPoseSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorRagdollPoseSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorRagdollPoseSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorRagdollPoseSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorRagdollPoseSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorRagdollPoseSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_rItem"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_rItem"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/m_eAttachLocation"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_eAttachLocation"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_eMaxTension"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_eMaxTension"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_bLeftHand"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bLeftHand"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bWeapon"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bWeapon"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bGrenade"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bGrenade"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_eAnimSet"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_eAnimSet"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_rCustomAnimationSet"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_rCustomAnimationSet"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/m_eVariationResourceMaxTension"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_eVariationResourceMaxTension"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_eVariationResourceMaxEmotionState"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_eVariationResourceMaxEmotionState"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_eAnimSetEmotionState"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_eAnimSetEmotionState"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_ePreCustomAnimSet"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_ePreCustomAnimSet"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_rAnimationSetDefinition"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_rAnimationSetDefinition"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/m_nIndex"] = TYPE_INT32;
        (*type_map)["TArray<SActorSaveData>/m_nIndex"] = TYPE_INT32;
        (*type_map)["SActorSaveData/m_rAnimationSetDefinition"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_rAnimationSetDefinition"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/m_nIndex"] = TYPE_INT32;
        (*type_map)["TArray<SActorSaveData>/m_nIndex"] = TYPE_INT32;
        (*type_map)["SActorSaveData/m_rItem"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_rItem"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_fDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/m_fDistance"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_nCurrentBehaviorType"] = TYPE_INT32;
        (*type_map)["TArray<SActorSaveData>/m_nCurrentBehaviorType"] = TYPE_INT32;
        (*type_map)["SActorSaveData/m_CurrentBehaviorState"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SActorSaveData>/m_CurrentBehaviorState"] = TYPE_ZVARIANT;
        (*type_map)["SActorSaveData/m_nSharedIndex"] = TYPE_INT32;
        (*type_map)["TArray<SActorSaveData>/m_nSharedIndex"] = TYPE_INT32;
        (*type_map)["SActorSaveData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_eType"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_bHandled"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bHandled"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorSaveData/m_nBooleanEvents"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_nBooleanEvents"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/m_nBooleanEventsHandled"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_nBooleanEventsHandled"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorSaveData/m_nGoals"] = TYPE_UINT16;
        (*type_map)["TArray<SActorSaveData>/m_nGoals"] = TYPE_UINT16;
        (*type_map)["SActorSaveData/m_fHMAttention"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/m_fHMAttention"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_fHMAttentionLastUpdate"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/m_fHMAttentionLastUpdate"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_fHMDisguiseAttention"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/m_fHMDisguiseAttention"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_fHMTrespassingAttention"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/m_fHMTrespassingAttention"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_fHMLastTrespassingAttentionMax"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/m_fHMLastTrespassingAttentionMax"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorSaveData/m_fHMWeaponAttention"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/m_fHMWeaponAttention"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_fHMWeaponAttentionChange"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/m_fHMWeaponAttentionChange"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_eGameTension"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_eGameTension"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorSaveData/m_behaviorModifiers"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_behaviorModifiers"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/m_nOutfitCharset"] = TYPE_INT32;
        (*type_map)["TArray<SActorSaveData>/m_nOutfitCharset"] = TYPE_INT32;
        (*type_map)["SActorSaveData/m_nOutfitVariation"] = TYPE_INT32;
        (*type_map)["TArray<SActorSaveData>/m_nOutfitVariation"] = TYPE_INT32;
        (*type_map)["SActorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorSaveData/m_nState"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_nState"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_rBodyContainerEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_rBodyContainerEntity"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/m_nBodyContainerSlot"] = TYPE_INT32;
        (*type_map)["TArray<SActorSaveData>/m_nBodyContainerSlot"] = TYPE_INT32;
        (*type_map)["SActorSaveData/m_eEmotionState"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_eEmotionState"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_rCorpseBodybagEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_rCorpseBodybagEntity"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/m_rDragBodybagEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_rDragBodybagEntity"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/m_AccidentContext"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_AccidentContext"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/bExplosive"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/bExplosive"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/bProjectile"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/bProjectile"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/bHeadshot"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/bHeadshot"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/bSniperShot"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/bSniperShot"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/bThroughWall"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/bThroughWall"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/bKillByAccident"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/bKillByAccident"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/bWeaponSilenced"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/bWeaponSilenced"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/bLongRange"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/bLongRange"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/fTotalDamage"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/fTotalDamage"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/fPacifyDamage"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/fPacifyDamage"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/nImpactBodyPart"] = TYPE_INT32;
        (*type_map)["TArray<SActorSaveData>/nImpactBodyPart"] = TYPE_INT32;
        (*type_map)["SActorSaveData/maxDeathType"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/maxDeathType"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/maxDeathContext"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/maxDeathContext"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/rAccidentSetup"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/rAccidentSetup"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/bFirearmPacifiesTarget"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/bFirearmPacifiesTarget"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/bBulletCausesHitReaction"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/bBulletCausesHitReaction"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/fHitsNumberTimeout"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/fHitsNumberTimeout"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/fHealthPercentTimeout"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/fHealthPercentTimeout"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/rCharacter"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/rCharacter"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/rSource"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/rSource"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/m_bValidAccuseUnconsciousOutfit"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bValidAccuseUnconsciousOutfit"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/eDeathSpeak"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/eDeathSpeak"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/bDefaultDeathSound"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/bDefaultDeathSound"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/iEvents"] = TYPE_INT32;
        (*type_map)["TArray<SActorSaveData>/iEvents"] = TYPE_INT32;
        (*type_map)["SActorSaveData/fAgilityElementUncosciousTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/fAgilityElementUncosciousTime"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_AnimatedActorOrderData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SActorSaveData>/m_AnimatedActorOrderData"] = TYPE_ZVARIANT;
        (*type_map)["SActorSaveData/m_fStepsFraction"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/m_fStepsFraction"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_fZBeforeEnteringStairs"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/m_fZBeforeEnteringStairs"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_fZError"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/m_fZError"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActorSaveData>/m_sName"] = TYPE_ZSTRING;
        (*type_map)["SActorSaveData/m_eTensionLimit"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_eTensionLimit"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_eEmotionLimit"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_eEmotionLimit"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorSaveData/m_eTensionRemoveLimit"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_eTensionRemoveLimit"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_eEmotionRemoveLimit"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_eEmotionRemoveLimit"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorSaveData/m_resourceID"] = TYPE_INT64;
        (*type_map)["TArray<SActorSaveData>/m_resourceID"] = TYPE_INT64;
        (*type_map)["SActorSaveData/m_rInstance"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_rInstance"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_eOverrideSensorState"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_eOverrideSensorState"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_eDeathBehavior"] = TYPE_ENUM;
        (*type_map)["TArray<SActorSaveData>/m_eDeathBehavior"] = TYPE_ENUM;
        (*type_map)["SActorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorSaveData/m_Memory"] = TYPE_UINT8;
        (*type_map)["TArray<SActorSaveData>/m_Memory"] = TYPE_UINT8;
        (*type_map)["SActorSaveData/m_AgentData"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_AgentData"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/m_KnockdownsWhileConscious"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_KnockdownsWhileConscious"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/m_SecondaryAIIconState"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSaveData>/m_SecondaryAIIconState"] = TYPE_UINT32;
        (*type_map)["SActorSaveData/m_SituationAvailabilityValue"] = TYPE_INT32;
        (*type_map)["TArray<SActorSaveData>/m_SituationAvailabilityValue"] = TYPE_INT32;
        (*type_map)["SActorSaveData/m_HadValidAgent"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_HadValidAgent"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bNude"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bNude"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bActiveEnforcer"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bActiveEnforcer"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bIsPotentialEnforcer"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bIsPotentialEnforcer"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bDynamicEnforcer"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bDynamicEnforcer"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bIsCrowdCharacter"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bIsCrowdCharacter"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bIsWoozy"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bIsWoozy"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bBlendingOrientation"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bBlendingOrientation"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bMakeMainWeaponUndroppable"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bMakeMainWeaponUndroppable"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bFinalizePendingSpawnGrenade"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bFinalizePendingSpawnGrenade"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bWeaponIsHidden"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bWeaponIsHidden"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bRegisteredForLT"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bRegisteredForLT"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bKeepOverrideSensorStateAfterBeingUnconscious"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bKeepOverrideSensorStateAfterBeingUnconscious"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bWeaponReady"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bWeaponReady"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bDynamicWeaponUnholstered"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bDynamicWeaponUnholstered"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bForceInteractionGlow"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bForceInteractionGlow"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_bIsOutfitRuined"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_bIsOutfitRuined"] = TYPE_BOOL;
        (*type_map)["SActorSaveData/m_BehaviorSelectDisabled"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSaveData>/m_BehaviorSelectDisabled"] = TYPE_BOOL;
        (*type_map)["SEntityPath/m_nOwnerID"] = TYPE_UINT64;
        (*type_map)["TArray<SEntityPath>/m_nOwnerID"] = TYPE_UINT64;
        (*type_map)["SSaveGameData/m_nVersion"] = TYPE_UINT32;
        (*type_map)["TArray<SSaveGameData>/m_nVersion"] = TYPE_UINT32;
        (*type_map)["SSaveGameData/m_EntitiesData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSaveGameData>/m_EntitiesData"] = TYPE_ZVARIANT;
        (*type_map)["SSaveGameData/m_Data"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSaveGameData>/m_Data"] = TYPE_ZVARIANT;
        (*type_map)["SSaveGameData/m_nId"] = TYPE_UINT32;
        (*type_map)["TArray<SSaveGameData>/m_nId"] = TYPE_UINT32;
        (*type_map)["SSaveGameData/m_nOwnerID"] = TYPE_UINT64;
        (*type_map)["TArray<SSaveGameData>/m_nOwnerID"] = TYPE_UINT64;
        (*type_map)["SMovementDisguiseSafeZoneSaveData/m_rSafeZone"] = TYPE_UINT32;
        (*type_map)["TArray<SMovementDisguiseSafeZoneSaveData>/m_rSafeZone"] = TYPE_UINT32;
        (*type_map)["SMovementDisguiseSafeZoneSaveData/m_nSafeZoneAnimNode"] = TYPE_UINT32;
        (*type_map)["TArray<SMovementDisguiseSafeZoneSaveData>/m_nSafeZoneAnimNode"] = TYPE_UINT32;
        (*type_map)["AI.SFirePattern02.SData/m_FireMinSeconds"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SFirePattern02.SData>/m_FireMinSeconds"] = TYPE_FLOAT32;
        (*type_map)["AI.SFirePattern02.SData/m_FireMaxSeconds"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SFirePattern02.SData>/m_FireMaxSeconds"] = TYPE_FLOAT32;
        (*type_map)["AI.SFirePattern02.SData/m_WaitMinSeconds"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SFirePattern02.SData>/m_WaitMinSeconds"] = TYPE_FLOAT32;
        (*type_map)["AI.SFirePattern02.SData/m_WaitMaxSeconds"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SFirePattern02.SData>/m_WaitMaxSeconds"] = TYPE_FLOAT32;
        (*type_map)["AI.SFirePattern02/m_FireMinSeconds"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SFirePattern02>/m_FireMinSeconds"] = TYPE_FLOAT32;
        (*type_map)["AI.SFirePattern02/m_FireMaxSeconds"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SFirePattern02>/m_FireMaxSeconds"] = TYPE_FLOAT32;
        (*type_map)["AI.SFirePattern02/m_WaitMinSeconds"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SFirePattern02>/m_WaitMinSeconds"] = TYPE_FLOAT32;
        (*type_map)["AI.SFirePattern02/m_WaitMaxSeconds"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SFirePattern02>/m_WaitMaxSeconds"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituationActors/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituationActors>/m_rActor"] = TYPE_UINT32;
        (*type_map)["ZCrowdGridPoint/m_nHeightOffset"] = TYPE_INT16;
        (*type_map)["TArray<ZCrowdGridPoint>/m_nHeightOffset"] = TYPE_INT16;
        (*type_map)["ZCrowdGridPoint/m_nOnNavGrid"] = TYPE_UINT8;
        (*type_map)["TArray<ZCrowdGridPoint>/m_nOnNavGrid"] = TYPE_UINT8;
        (*type_map)["SDisturbanceSaveData/m_object"] = TYPE_INT32;
        (*type_map)["TArray<SDisturbanceSaveData>/m_object"] = TYPE_INT32;
        (*type_map)["SDisturbanceSaveData/m_type"] = TYPE_ENUM;
        (*type_map)["TArray<SDisturbanceSaveData>/m_type"] = TYPE_ENUM;
        (*type_map)["SDisturbanceSaveData/m_state"] = TYPE_ENUM;
        (*type_map)["TArray<SDisturbanceSaveData>/m_state"] = TYPE_ENUM;
        (*type_map)["SDisturbanceSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SDisturbanceSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SDisturbanceSaveData/m_pInvestigateGroup"] = TYPE_INT32;
        (*type_map)["TArray<SDisturbanceSaveData>/m_pInvestigateGroup"] = TYPE_INT32;
        (*type_map)["SDisturbanceSaveData/m_bLockOnHitmanPosition"] = TYPE_BOOL;
        (*type_map)["TArray<SDisturbanceSaveData>/m_bLockOnHitmanPosition"] = TYPE_BOOL;
        (*type_map)["SZHUDIgnoreVisibilitySaveData/alpha"] = TYPE_FLOAT32;
        (*type_map)["TArray<SZHUDIgnoreVisibilitySaveData>/alpha"] = TYPE_FLOAT32;
        (*type_map)["SGameCamProfileEntitySaveData/m_bIsEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SGameCamProfileEntitySaveData>/m_bIsEnabled"] = TYPE_BOOL;
        (*type_map)["SGameCamProfileEntitySaveData/m_rHero"] = TYPE_UINT32;
        (*type_map)["TArray<SGameCamProfileEntitySaveData>/m_rHero"] = TYPE_UINT32;
        (*type_map)["SEntityTemplateExposedEntity/sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEntityTemplateExposedEntity>/sName"] = TYPE_ZSTRING;
        (*type_map)["SEntityTemplateExposedEntity/bIsArray"] = TYPE_BOOL;
        (*type_map)["TArray<SEntityTemplateExposedEntity>/bIsArray"] = TYPE_BOOL;
        (*type_map)["SEntityTemplateExposedEntity/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<SEntityTemplateExposedEntity>/entityID"] = TYPE_UINT64;
        (*type_map)["SEntityTemplateExposedEntity/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<SEntityTemplateExposedEntity>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["SEntityTemplateExposedEntity/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<SEntityTemplateExposedEntity>/entityIndex"] = TYPE_INT32;
        (*type_map)["SEntityTemplateExposedEntity/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEntityTemplateExposedEntity>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["SLightFlickerEntitySaveData/m_bLightOn"] = TYPE_BOOL;
        (*type_map)["TArray<SLightFlickerEntitySaveData>/m_bLightOn"] = TYPE_BOOL;
        (*type_map)["SLightFlickerEntitySaveData/m_bFlickerOn"] = TYPE_BOOL;
        (*type_map)["TArray<SLightFlickerEntitySaveData>/m_bFlickerOn"] = TYPE_BOOL;
        (*type_map)["SColorRGBA/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SColorRGBA>/r"] = TYPE_FLOAT32;
        (*type_map)["SColorRGBA/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SColorRGBA>/g"] = TYPE_FLOAT32;
        (*type_map)["SColorRGBA/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SColorRGBA>/b"] = TYPE_FLOAT32;
        (*type_map)["SColorRGBA/a"] = TYPE_FLOAT32;
        (*type_map)["TArray<SColorRGBA>/a"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SColorRGBA/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGBA>/r"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SColorRGBA/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGBA>/g"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SColorRGBA/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGBA>/b"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SColorRGBA/a"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGBA>/a"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SColorRGBA/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGBA>/r"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SColorRGBA/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGBA>/g"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SColorRGBA/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGBA>/b"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SColorRGBA/a"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGBA>/a"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SColorRGBA/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGBA>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGBA/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGBA>/r"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGBA/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGBA>/g"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGBA/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGBA>/b"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGBA/a"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGBA>/a"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGBA/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGBA>/r"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGBA/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGBA>/g"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGBA/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGBA>/b"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGBA/a"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGBA>/a"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGBA/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGBA>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["SFriskSuspectGroupSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SFriskSuspectGroupSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SFriskSuspectGroupSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SFriskSuspectGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SFriskSuspectGroupSaveData/m_bHitmanIsGuard"] = TYPE_BOOL;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_bHitmanIsGuard"] = TYPE_BOOL;
        (*type_map)["SFriskSuspectGroupSaveData/m_target"] = TYPE_INT32;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_target"] = TYPE_INT32;
        (*type_map)["SFriskSuspectGroupSaveData/m_pLeader"] = TYPE_UINT32;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_pLeader"] = TYPE_UINT32;
        (*type_map)["SFriskSuspectGroupSaveData/m_pAssistant"] = TYPE_UINT32;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_pAssistant"] = TYPE_UINT32;
        (*type_map)["SFriskSuspectGroupSaveData/m_eAssistantState"] = TYPE_ENUM;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_eAssistantState"] = TYPE_ENUM;
        (*type_map)["SFriskSuspectGroupSaveData/m_eDisturbanceType"] = TYPE_ENUM;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_eDisturbanceType"] = TYPE_ENUM;
        (*type_map)["SFriskSuspectGroupSaveData/m_eHitmanGreetState"] = TYPE_ENUM;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_eHitmanGreetState"] = TYPE_ENUM;
        (*type_map)["SFriskSuspectGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SFriskSuspectGroupSaveData/m_fMovingTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_fMovingTime"] = TYPE_FLOAT32;
        (*type_map)["SFriskSuspectGroupSaveData/m_fRunningTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_fRunningTime"] = TYPE_FLOAT32;
        (*type_map)["SFriskSuspectGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SFriskSuspectGroupSaveData/m_bWarnOnWeaponFound"] = TYPE_BOOL;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_bWarnOnWeaponFound"] = TYPE_BOOL;
        (*type_map)["SFriskSuspectGroupSaveData/m_bWeaponFound"] = TYPE_BOOL;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_bWeaponFound"] = TYPE_BOOL;
        (*type_map)["SFriskSuspectGroupSaveData/m_bMoveWarning"] = TYPE_BOOL;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_bMoveWarning"] = TYPE_BOOL;
        (*type_map)["SFriskSuspectGroupSaveData/m_bFirskRequestRepeated"] = TYPE_BOOL;
        (*type_map)["TArray<SFriskSuspectGroupSaveData>/m_bFirskRequestRepeated"] = TYPE_BOOL;
        (*type_map)["STypeReference/sEntityID"] = TYPE_ZSTRING;
        (*type_map)["TArray<STypeReference>/sEntityID"] = TYPE_ZSTRING;
        (*type_map)["STypeReference/sTypeArgName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STypeReference>/sTypeArgName"] = TYPE_ZSTRING;
        (*type_map)["SExposedTypeInfo/sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExposedTypeInfo>/sName"] = TYPE_ZSTRING;
        (*type_map)["SExposedTypeInfo/sDisplayName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExposedTypeInfo>/sDisplayName"] = TYPE_ZSTRING;
        (*type_map)["SExposedTypeInfo/sHelpText"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExposedTypeInfo>/sHelpText"] = TYPE_ZSTRING;
        (*type_map)["SExposedTypeInfo/sEntityID"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExposedTypeInfo>/sEntityID"] = TYPE_ZSTRING;
        (*type_map)["SExposedTypeInfo/sTypeArgName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExposedTypeInfo>/sTypeArgName"] = TYPE_ZSTRING;
        (*type_map)["SDynamicEnforcerCandidateSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SDynamicEnforcerCandidateSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SDynamicEnforcerCandidateSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDynamicEnforcerCandidateSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDynamicEnforcerCandidateSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDynamicEnforcerCandidateSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDynamicEnforcerCandidateSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDynamicEnforcerCandidateSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDynamicEnforcerCandidateSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDynamicEnforcerCandidateSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDynamicEnforcerCandidateSaveData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<SDynamicEnforcerCandidateSaveData>/m_eType"] = TYPE_ENUM;
        (*type_map)["SDynamicEnforcerCandidateSaveData/m_fRadius"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDynamicEnforcerCandidateSaveData>/m_fRadius"] = TYPE_FLOAT32;
        (*type_map)["SDynamicEnforcerServiceSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SDynamicEnforcerServiceSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SDynamicEnforcerServiceSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDynamicEnforcerServiceSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDynamicEnforcerServiceSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDynamicEnforcerServiceSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDynamicEnforcerServiceSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDynamicEnforcerServiceSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDynamicEnforcerServiceSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDynamicEnforcerServiceSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDynamicEnforcerServiceSaveData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<SDynamicEnforcerServiceSaveData>/m_eType"] = TYPE_ENUM;
        (*type_map)["SDynamicEnforcerServiceSaveData/m_fRadius"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDynamicEnforcerServiceSaveData>/m_fRadius"] = TYPE_FLOAT32;
        (*type_map)["SActorStandInSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorStandInSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SDynamicRayCastEntitySaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SDynamicRayCastEntitySaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SDynamicRayCastEntitySaveData/m_bIsRayIntersecting"] = TYPE_BOOL;
        (*type_map)["TArray<SDynamicRayCastEntitySaveData>/m_bIsRayIntersecting"] = TYPE_BOOL;
        (*type_map)["SDynamicRayCastEntitySaveData/m_bIsCurrentlyEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SDynamicRayCastEntitySaveData>/m_bIsCurrentlyEnabled"] = TYPE_BOOL;
        (*type_map)["ZRuntimePinConDesc/m_nFromEntityID"] = TYPE_UINT64;
        (*type_map)["TArray<ZRuntimePinConDesc>/m_nFromEntityID"] = TYPE_UINT64;
        (*type_map)["ZRuntimePinConDesc/m_nToEntityID"] = TYPE_UINT64;
        (*type_map)["TArray<ZRuntimePinConDesc>/m_nToEntityID"] = TYPE_UINT64;
        (*type_map)["ZRuntimePinConDesc/m_nFromPinID"] = TYPE_UINT32;
        (*type_map)["TArray<ZRuntimePinConDesc>/m_nFromPinID"] = TYPE_UINT32;
        (*type_map)["ZRuntimePinConDesc/m_nToPinID"] = TYPE_UINT32;
        (*type_map)["TArray<ZRuntimePinConDesc>/m_nToPinID"] = TYPE_UINT32;
        (*type_map)["SPostfilterParametersSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SPostfilterParametersSaveData/m_bDepthOfFieldEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_bDepthOfFieldEnabled"] = TYPE_BOOL;
        (*type_map)["SPostfilterParametersSaveData/m_fDepthOfFieldBlurriness"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_fDepthOfFieldBlurriness"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/m_bRadialBlurEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_bRadialBlurEnabled"] = TYPE_BOOL;
        (*type_map)["SPostfilterParametersSaveData/m_fRadialBlurriness"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_fRadialBlurriness"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/m_fRadialBlurStart"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_fRadialBlurStart"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/m_bSpatialBlurEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_bSpatialBlurEnabled"] = TYPE_BOOL;
        (*type_map)["SPostfilterParametersSaveData/m_fSpatialBlurriness"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_fSpatialBlurriness"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/m_fSpatialBlurStart"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_fSpatialBlurStart"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/m_fSpatialBlurFade"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_fSpatialBlurFade"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/m_bDistortionWobbleEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_bDistortionWobbleEnabled"] = TYPE_BOOL;
        (*type_map)["SPostfilterParametersSaveData/m_fDistortionWobbleScale"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_fDistortionWobbleScale"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/m_bDistortionWobbleUseRealTime"] = TYPE_BOOL;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_bDistortionWobbleUseRealTime"] = TYPE_BOOL;
        (*type_map)["SPostfilterParametersSaveData/m_bHDRActive"] = TYPE_BOOL;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_bHDRActive"] = TYPE_BOOL;
        (*type_map)["SPostfilterParametersSaveData/m_bHDREnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_bHDREnabled"] = TYPE_BOOL;
        (*type_map)["SPostfilterParametersSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/m_fHDRWhitePoint"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_fHDRWhitePoint"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/m_fHDRBrightPassThreshold"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_fHDRBrightPassThreshold"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/m_fHDRBrightPassMaxPercentage"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/m_fHDRBrightPassMaxPercentage"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/r"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/g"] = TYPE_FLOAT32;
        (*type_map)["SPostfilterParametersSaveData/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPostfilterParametersSaveData>/b"] = TYPE_FLOAT32;
        (*type_map)["SMovementAgilitySaveData/m_rLedgeGuide"] = TYPE_UINT32;
        (*type_map)["TArray<SMovementAgilitySaveData>/m_rLedgeGuide"] = TYPE_UINT32;
        (*type_map)["SMovementAgilitySaveData/m_fFaceLeftRightTarget"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementAgilitySaveData>/m_fFaceLeftRightTarget"] = TYPE_FLOAT32;
        (*type_map)["SMovementAgilitySaveData/m_ePrevAgilityState"] = TYPE_ENUM;
        (*type_map)["TArray<SMovementAgilitySaveData>/m_ePrevAgilityState"] = TYPE_ENUM;
        (*type_map)["SMovementAgilitySaveData/m_eAgilityState"] = TYPE_ENUM;
        (*type_map)["TArray<SMovementAgilitySaveData>/m_eAgilityState"] = TYPE_ENUM;
        (*type_map)["SMovementAgilitySaveData/m_nActiveAnimNode"] = TYPE_UINT32;
        (*type_map)["TArray<SMovementAgilitySaveData>/m_nActiveAnimNode"] = TYPE_UINT32;
        (*type_map)["SMovementAgilitySaveData/m_eCameraOffset"] = TYPE_ENUM;
        (*type_map)["TArray<SMovementAgilitySaveData>/m_eCameraOffset"] = TYPE_ENUM;
        (*type_map)["SClothVertex/m_nColumn"] = TYPE_UINT16;
        (*type_map)["TArray<SClothVertex>/m_nColumn"] = TYPE_UINT16;
        (*type_map)["SClothVertex/m_nRow"] = TYPE_UINT16;
        (*type_map)["TArray<SClothVertex>/m_nRow"] = TYPE_UINT16;
        (*type_map)["SSituationOrderSaveData/m_sClassTypeName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSituationOrderSaveData>/m_sClassTypeName"] = TYPE_ZSTRING;
        (*type_map)["SSituationOrderSaveData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<SSituationOrderSaveData>/m_eType"] = TYPE_ENUM;
        (*type_map)["SSituationOrderSaveData/m_nTarget"] = TYPE_INT32;
        (*type_map)["TArray<SSituationOrderSaveData>/m_nTarget"] = TYPE_INT32;
        (*type_map)["SSituationOrderSaveData/m_bHasPosition"] = TYPE_BOOL;
        (*type_map)["TArray<SSituationOrderSaveData>/m_bHasPosition"] = TYPE_BOOL;
        (*type_map)["SSituationOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSituationOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SSituationOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSituationOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SSituationOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSituationOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SSituationOrderSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSituationOrderSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SSituationOrderSaveData/m_CustomData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSituationOrderSaveData>/m_CustomData"] = TYPE_ZVARIANT;
        (*type_map)["SEscortSituation2Actors/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituation2Actors>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SEscortSituation2ActorStateSaveData/m_nID"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituation2ActorStateSaveData>/m_nID"] = TYPE_UINT32;
        (*type_map)["SEscortSituation2ActorStateSaveData/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituation2ActorStateSaveData>/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["SEscortSituation2ActorStateSaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SEscortSituation2ActorStateSaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SEscortSituation2ActorStateSaveData/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["TArray<SEscortSituation2ActorStateSaveData>/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["SEscortSituation2ActorStateSaveData/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortSituation2ActorStateSaveData>/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["SEscortSituation2ActorStateSaveData/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituation2ActorStateSaveData>/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["SEscortSituation2ActorStateSaveData/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituation2ActorStateSaveData>/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["SEscortSituation2SaveData/m_bActivated"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_bActivated"] = TYPE_BOOL;
        (*type_map)["SEscortSituation2SaveData/m_bMayEscort"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_bMayEscort"] = TYPE_BOOL;
        (*type_map)["SEscortSituation2SaveData/m_bTargetDead"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_bTargetDead"] = TYPE_BOOL;
        (*type_map)["SEscortSituation2SaveData/m_bTargetInRange"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_bTargetInRange"] = TYPE_BOOL;
        (*type_map)["SEscortSituation2SaveData/m_bAllEscortsAreDead"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_bAllEscortsAreDead"] = TYPE_BOOL;
        (*type_map)["SEscortSituation2SaveData/m_bForceSearch"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_bForceSearch"] = TYPE_BOOL;
        (*type_map)["SEscortSituation2SaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortSituation2SaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SEscortSituation2SaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortSituation2SaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SEscortSituation2SaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortSituation2SaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SEscortSituation2SaveData/m_bFoundDeadTarget"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_bFoundDeadTarget"] = TYPE_BOOL;
        (*type_map)["SEscortSituation2SaveData/m_nTargetDeadTime"] = TYPE_INT64;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_nTargetDeadTime"] = TYPE_INT64;
        (*type_map)["SEscortSituation2SaveData/m_bTargetIsMoving"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_bTargetIsMoving"] = TYPE_BOOL;
        (*type_map)["SEscortSituation2SaveData/m_eTargetState"] = TYPE_ENUM;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_eTargetState"] = TYPE_ENUM;
        (*type_map)["SEscortSituation2SaveData/m_eTargetEmotionState"] = TYPE_ENUM;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_eTargetEmotionState"] = TYPE_ENUM;
        (*type_map)["SEscortSituation2SaveData/m_eTargetActState"] = TYPE_ENUM;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_eTargetActState"] = TYPE_ENUM;
        (*type_map)["SEscortSituation2SaveData/m_fTargetNotMovingTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_fTargetNotMovingTime"] = TYPE_FLOAT32;
        (*type_map)["SEscortSituation2SaveData/m_fTargetAgitationCooldownTimer"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_fTargetAgitationCooldownTimer"] = TYPE_FLOAT32;
        (*type_map)["SEscortSituation2SaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SEscortSituation2SaveData/m_nID"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_nID"] = TYPE_UINT32;
        (*type_map)["SEscortSituation2SaveData/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["SEscortSituation2SaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SEscortSituation2SaveData/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["SEscortSituation2SaveData/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["SEscortSituation2SaveData/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["SEscortSituation2SaveData/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituation2SaveData>/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["SDeadBodyInfoSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SDeadBodyInfoSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SDeadBodyInfoSaveData/m_rGuard"] = TYPE_UINT32;
        (*type_map)["TArray<SDeadBodyInfoSaveData>/m_rGuard"] = TYPE_UINT32;
        (*type_map)["SDeadBodyInfoSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SDeadBodyInfoSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SDeadBodyInfoSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SDeadBodyInfoSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SDeadBodyInfoSaveData/m_bGuarded"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodyInfoSaveData>/m_bGuarded"] = TYPE_BOOL;
        (*type_map)["SDeadBodyInfoSaveData/m_bBodyInvestigated"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodyInfoSaveData>/m_bBodyInvestigated"] = TYPE_BOOL;
        (*type_map)["SDeadBodyInfoSaveData/m_bHidden"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodyInfoSaveData>/m_bHidden"] = TYPE_BOOL;
        (*type_map)["SDeadBodyInfoSaveData/m_bDeadByAccident"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodyInfoSaveData>/m_bDeadByAccident"] = TYPE_BOOL;
        (*type_map)["SDeadBodyInfoSaveData/m_bDeadByUnnoticed"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodyInfoSaveData>/m_bDeadByUnnoticed"] = TYPE_BOOL;
        (*type_map)["SDeadBodyInfoSaveData/m_bHitmanSuspectedInCurrentOutfit"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodyInfoSaveData>/m_bHitmanSuspectedInCurrentOutfit"] = TYPE_BOOL;
        (*type_map)["SDeadBodyInfoSaveData/m_bDeadByExplosion"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodyInfoSaveData>/m_bDeadByExplosion"] = TYPE_BOOL;
        (*type_map)["SDeadBodyInfoSaveData/m_IsFoundOutsideNavmeshAndIgnored"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodyInfoSaveData>/m_IsFoundOutsideNavmeshAndIgnored"] = TYPE_BOOL;
        (*type_map)["SDeadBodySensorSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SDeadBodySensorSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SDeadBodySensorSaveData/m_rGuard"] = TYPE_UINT32;
        (*type_map)["TArray<SDeadBodySensorSaveData>/m_rGuard"] = TYPE_UINT32;
        (*type_map)["SDeadBodySensorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SDeadBodySensorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SDeadBodySensorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SDeadBodySensorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SDeadBodySensorSaveData/m_bGuarded"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodySensorSaveData>/m_bGuarded"] = TYPE_BOOL;
        (*type_map)["SDeadBodySensorSaveData/m_bBodyInvestigated"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodySensorSaveData>/m_bBodyInvestigated"] = TYPE_BOOL;
        (*type_map)["SDeadBodySensorSaveData/m_bHidden"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodySensorSaveData>/m_bHidden"] = TYPE_BOOL;
        (*type_map)["SDeadBodySensorSaveData/m_bDeadByAccident"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodySensorSaveData>/m_bDeadByAccident"] = TYPE_BOOL;
        (*type_map)["SDeadBodySensorSaveData/m_bDeadByUnnoticed"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodySensorSaveData>/m_bDeadByUnnoticed"] = TYPE_BOOL;
        (*type_map)["SDeadBodySensorSaveData/m_bHitmanSuspectedInCurrentOutfit"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodySensorSaveData>/m_bHitmanSuspectedInCurrentOutfit"] = TYPE_BOOL;
        (*type_map)["SDeadBodySensorSaveData/m_bDeadByExplosion"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodySensorSaveData>/m_bDeadByExplosion"] = TYPE_BOOL;
        (*type_map)["SDeadBodySensorSaveData/m_IsFoundOutsideNavmeshAndIgnored"] = TYPE_BOOL;
        (*type_map)["TArray<SDeadBodySensorSaveData>/m_IsFoundOutsideNavmeshAndIgnored"] = TYPE_BOOL;
        (*type_map)["SDeadBodySensorSaveData/m_nBodyIndex"] = TYPE_INT32;
        (*type_map)["TArray<SDeadBodySensorSaveData>/m_nBodyIndex"] = TYPE_INT32;
        (*type_map)["SCheckLastPositionGroupSaveData/m_pLeader"] = TYPE_UINT32;
        (*type_map)["TArray<SCheckLastPositionGroupSaveData>/m_pLeader"] = TYPE_UINT32;
        (*type_map)["SCheckLastPositionGroupSaveData/m_pAssistant"] = TYPE_UINT32;
        (*type_map)["TArray<SCheckLastPositionGroupSaveData>/m_pAssistant"] = TYPE_UINT32;
        (*type_map)["SCheckLastPositionGroupSaveData/m_nLeaderTargetNodeIndex"] = TYPE_UINT16;
        (*type_map)["TArray<SCheckLastPositionGroupSaveData>/m_nLeaderTargetNodeIndex"] = TYPE_UINT16;
        (*type_map)["SCheckLastPositionGroupSaveData/m_bLeaderOrderAssigned"] = TYPE_BOOL;
        (*type_map)["TArray<SCheckLastPositionGroupSaveData>/m_bLeaderOrderAssigned"] = TYPE_BOOL;
        (*type_map)["SCheckLastPositionGroupSaveData/m_bAssistantOrderAssigned"] = TYPE_BOOL;
        (*type_map)["TArray<SCheckLastPositionGroupSaveData>/m_bAssistantOrderAssigned"] = TYPE_BOOL;
        (*type_map)["SCheckLastPositionGroupSaveData/m_bSearchCompleted"] = TYPE_BOOL;
        (*type_map)["TArray<SCheckLastPositionGroupSaveData>/m_bSearchCompleted"] = TYPE_BOOL;
        (*type_map)["SItemInstanceSaveData/m_nEntityID"] = TYPE_UINT64;
        (*type_map)["TArray<SItemInstanceSaveData>/m_nEntityID"] = TYPE_UINT64;
        (*type_map)["SItemInstanceSaveData/m_sOnlineInstanceId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SItemInstanceSaveData>/m_sOnlineInstanceId"] = TYPE_ZSTRING;
        (*type_map)["SWorldInventoryInstanceSaveData/m_nEntityID"] = TYPE_UINT64;
        (*type_map)["TArray<SWorldInventoryInstanceSaveData>/m_nEntityID"] = TYPE_UINT64;
        (*type_map)["SWorldInventoryInstanceSaveData/m_sOnlineInstanceId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SWorldInventoryInstanceSaveData>/m_sOnlineInstanceId"] = TYPE_ZSTRING;
        (*type_map)["SEvacuateTrespassGroupSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SEvacuateTrespassGroupSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SEvacuateTrespassGroupSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SEvacuateTrespassGroupSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SEvacuateTrespassGroupSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SEvacuateTrespassGroupSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SEvacuateTrespassGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEvacuateTrespassGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEvacuateTrespassGroupSaveData/m_target"] = TYPE_INT32;
        (*type_map)["TArray<SEvacuateTrespassGroupSaveData>/m_target"] = TYPE_INT32;
        (*type_map)["SEvacuateTrespassGroupSaveData/m_safeRoomNode"] = TYPE_UINT32;
        (*type_map)["TArray<SEvacuateTrespassGroupSaveData>/m_safeRoomNode"] = TYPE_UINT32;
        (*type_map)["SEvacuateTrespassGroupSaveData/m_leader"] = TYPE_UINT32;
        (*type_map)["TArray<SEvacuateTrespassGroupSaveData>/m_leader"] = TYPE_UINT32;
        (*type_map)["SEvacuateTrespassGroupSaveData/m_assistant"] = TYPE_UINT32;
        (*type_map)["TArray<SEvacuateTrespassGroupSaveData>/m_assistant"] = TYPE_UINT32;
        (*type_map)["SEvacuateTrespassGroupSaveData/m_escalate"] = TYPE_BOOL;
        (*type_map)["TArray<SEvacuateTrespassGroupSaveData>/m_escalate"] = TYPE_BOOL;
        (*type_map)["SEvacuateTrespassGroupSaveData/m_completed"] = TYPE_BOOL;
        (*type_map)["TArray<SEvacuateTrespassGroupSaveData>/m_completed"] = TYPE_BOOL;
        (*type_map)["SEvacuateTrespassGroupSaveData/m_standDown"] = TYPE_BOOL;
        (*type_map)["TArray<SEvacuateTrespassGroupSaveData>/m_standDown"] = TYPE_BOOL;
        (*type_map)["SEvacuateTrespassGroupSaveData/m_warningCount"] = TYPE_INT32;
        (*type_map)["TArray<SEvacuateTrespassGroupSaveData>/m_warningCount"] = TYPE_INT32;
        (*type_map)["SActorSpreadTransitionOperatorMaterialActorSaveData/m_Actor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSpreadTransitionOperatorMaterialActorSaveData>/m_Actor"] = TYPE_UINT32;
        (*type_map)["SActorSpreadTransitionOperatorMaterialActorSaveData/m_fOpacity"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSpreadTransitionOperatorMaterialActorSaveData>/m_fOpacity"] = TYPE_FLOAT32;
        (*type_map)["SHeroCameraStandInSaveState/m_rHero"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroCameraStandInSaveState>/m_rHero"] = TYPE_UINT32;
        (*type_map)["SHeroCameraStandInSaveState/m_bPaused"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroCameraStandInSaveState>/m_bPaused"] = TYPE_BOOL;
        (*type_map)["SVolumeTriggerListenerSaveData/m_bColliding"] = TYPE_BOOL;
        (*type_map)["TArray<SVolumeTriggerListenerSaveData>/m_bColliding"] = TYPE_BOOL;
        (*type_map)["SVolumeTriggerListenerSaveData/m_bInternalEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SVolumeTriggerListenerSaveData>/m_bInternalEnabled"] = TYPE_BOOL;
        (*type_map)["SVolumeTriggersSaveData/m_bColliding"] = TYPE_BOOL;
        (*type_map)["TArray<SVolumeTriggersSaveData>/m_bColliding"] = TYPE_BOOL;
        (*type_map)["SVolumeTriggersSaveData/m_bInternalEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SVolumeTriggersSaveData>/m_bInternalEnabled"] = TYPE_BOOL;
        (*type_map)["SFaceOrderSaveData/m_bLookAt"] = TYPE_BOOL;
        (*type_map)["TArray<SFaceOrderSaveData>/m_bLookAt"] = TYPE_BOOL;
        (*type_map)["SFaceOrderSaveData/m_bAimAt"] = TYPE_BOOL;
        (*type_map)["TArray<SFaceOrderSaveData>/m_bAimAt"] = TYPE_BOOL;
        (*type_map)["SFaceOrderSaveData/m_bUpdateKnownPosition"] = TYPE_BOOL;
        (*type_map)["TArray<SFaceOrderSaveData>/m_bUpdateKnownPosition"] = TYPE_BOOL;
        (*type_map)["SFaceOrderSaveData/m_bStopActFast"] = TYPE_BOOL;
        (*type_map)["TArray<SFaceOrderSaveData>/m_bStopActFast"] = TYPE_BOOL;
        (*type_map)["SFaceOrderSaveData/m_fDuration"] = TYPE_FLOAT32;
        (*type_map)["TArray<SFaceOrderSaveData>/m_fDuration"] = TYPE_FLOAT32;
        (*type_map)["SFaceOrderSaveData/m_fDurationVariance"] = TYPE_FLOAT32;
        (*type_map)["TArray<SFaceOrderSaveData>/m_fDurationVariance"] = TYPE_FLOAT32;
        (*type_map)["SVIPEvacuationNodeSaveData/m_fPenaltyMultiplier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVIPEvacuationNodeSaveData>/m_fPenaltyMultiplier"] = TYPE_FLOAT32;
        (*type_map)["SVIPEvacuationNodeSaveData/m_fPenaltyDuration"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVIPEvacuationNodeSaveData>/m_fPenaltyDuration"] = TYPE_FLOAT32;
        (*type_map)["SVIPEvacuationNodeSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SVIPEvacuationNodeSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SVIPEvacuationNodeSaveData/m_bIsEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SVIPEvacuationNodeSaveData>/m_bIsEnabled"] = TYPE_BOOL;
        (*type_map)["SVIPEvacuationNodeSaveData/m_compromisedOnEnter"] = TYPE_BOOL;
        (*type_map)["TArray<SVIPEvacuationNodeSaveData>/m_compromisedOnEnter"] = TYPE_BOOL;
        (*type_map)["SVIPEvacuationNodesSaveData/m_fPenaltyMultiplier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVIPEvacuationNodesSaveData>/m_fPenaltyMultiplier"] = TYPE_FLOAT32;
        (*type_map)["SVIPEvacuationNodesSaveData/m_fPenaltyDuration"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVIPEvacuationNodesSaveData>/m_fPenaltyDuration"] = TYPE_FLOAT32;
        (*type_map)["SVIPEvacuationNodesSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SVIPEvacuationNodesSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SVIPEvacuationNodesSaveData/m_bIsEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SVIPEvacuationNodesSaveData>/m_bIsEnabled"] = TYPE_BOOL;
        (*type_map)["SVIPEvacuationNodesSaveData/m_compromisedOnEnter"] = TYPE_BOOL;
        (*type_map)["TArray<SVIPEvacuationNodesSaveData>/m_compromisedOnEnter"] = TYPE_BOOL;
        (*type_map)["ZInteractionEventConsumer.SInteractionEventData/m_nEvent"] = TYPE_ENUM;
        (*type_map)["TArray<ZInteractionEventConsumer.SInteractionEventData>/m_nEvent"] = TYPE_ENUM;
        (*type_map)["AI.SEventDescription/m_eEventType"] = TYPE_ENUM;
        (*type_map)["TArray<AI.SEventDescription>/m_eEventType"] = TYPE_ENUM;
        (*type_map)["AI.SEventDescription/m_bPulsing"] = TYPE_BOOL;
        (*type_map)["TArray<AI.SEventDescription>/m_bPulsing"] = TYPE_BOOL;
        (*type_map)["AI.SEventDescription/m_fRange"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SEventDescription>/m_fRange"] = TYPE_FLOAT32;
        (*type_map)["AI.SEventDescription/m_fLoudness"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SEventDescription>/m_fLoudness"] = TYPE_FLOAT32;
        (*type_map)["SExactCompressedGridFloatField/m_fInitialValue"] = TYPE_FLOAT32;
        (*type_map)["TArray<SExactCompressedGridFloatField>/m_fInitialValue"] = TYPE_FLOAT32;
        (*type_map)["SExactCompressedGridFloatField/m_nFieldSize"] = TYPE_UINT32;
        (*type_map)["TArray<SExactCompressedGridFloatField>/m_nFieldSize"] = TYPE_UINT32;
        (*type_map)["SExactCompressedGridFloatField/m_nGridCRC"] = TYPE_UINT32;
        (*type_map)["TArray<SExactCompressedGridFloatField>/m_nGridCRC"] = TYPE_UINT32;
        (*type_map)["SIntelData/m_sHeadline"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelData>/m_sHeadline"] = TYPE_ZSTRING;
        (*type_map)["SIntelData/m_sBodyHeadline"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelData>/m_sBodyHeadline"] = TYPE_ZSTRING;
        (*type_map)["SIntelData/m_sBodytext"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelData>/m_sBodytext"] = TYPE_ZSTRING;
        (*type_map)["SIntelData/m_sImage"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelData>/m_sImage"] = TYPE_ZSTRING;
        (*type_map)["SMathMultiplyDivideSaveData_SVector3/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector3>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector3/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector3>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector3/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector3>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector3/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector3>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector3/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector3>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector3/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector3>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector3/m_bDivide"] = TYPE_BOOL;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector3>/m_bDivide"] = TYPE_BOOL;
        (*type_map)["SMathMultipliesSaveData_SVector3/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector3>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector3/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector3>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector3/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector3>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector3/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector3>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector3/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector3>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector3/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector3>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector3/m_bDivide"] = TYPE_BOOL;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector3>/m_bDivide"] = TYPE_BOOL;
        (*type_map)["SMapMarkerData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMapMarkerData>/x"] = TYPE_FLOAT32;
        (*type_map)["SMapMarkerData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMapMarkerData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDramaSituationSaveData/m_bSituationRunning"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaSituationSaveData>/m_bSituationRunning"] = TYPE_BOOL;
        (*type_map)["SDramaSituationSaveData/m_bIsTerminated"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaSituationSaveData>/m_bIsTerminated"] = TYPE_BOOL;
        (*type_map)["SDramaSituationSaveData/m_nPriorityModifier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDramaSituationSaveData>/m_nPriorityModifier"] = TYPE_FLOAT32;
        (*type_map)["SDramaSituationSaveData/m_nCurrentDrama"] = TYPE_INT32;
        (*type_map)["TArray<SDramaSituationSaveData>/m_nCurrentDrama"] = TYPE_INT32;
        (*type_map)["SDramaSituationSaveData/m_bProvidersStarted"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaSituationSaveData>/m_bProvidersStarted"] = TYPE_BOOL;
        (*type_map)["SDrama2SituationSaveData/m_nPriorityModifier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDrama2SituationSaveData>/m_nPriorityModifier"] = TYPE_FLOAT32;
        (*type_map)["SDrama2SituationSaveData/m_nCurrentDrama"] = TYPE_INT32;
        (*type_map)["TArray<SDrama2SituationSaveData>/m_nCurrentDrama"] = TYPE_INT32;
        (*type_map)["SDrama2SituationSaveData/m_nDoneTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDrama2SituationSaveData>/m_nDoneTime"] = TYPE_FLOAT32;
        (*type_map)["SDrama2SituationSaveData/m_bIsOnCooldown"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2SituationSaveData>/m_bIsOnCooldown"] = TYPE_BOOL;
        (*type_map)["SDrama2SituationSaveData/m_bProvidersStarted"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2SituationSaveData>/m_bProvidersStarted"] = TYPE_BOOL;
        (*type_map)["SDrama2SituationSaveData/m_bSituationRunning"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2SituationSaveData>/m_bSituationRunning"] = TYPE_BOOL;
        (*type_map)["SDrama2SituationSaveData/m_bIsTerminated"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2SituationSaveData>/m_bIsTerminated"] = TYPE_BOOL;
        (*type_map)["SDrama2SituationCollectionSaveData/m_nPriorityModifier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDrama2SituationCollectionSaveData>/m_nPriorityModifier"] = TYPE_FLOAT32;
        (*type_map)["SDrama2SituationCollectionSaveData/m_nCurrentDrama"] = TYPE_INT32;
        (*type_map)["TArray<SDrama2SituationCollectionSaveData>/m_nCurrentDrama"] = TYPE_INT32;
        (*type_map)["SDrama2SituationCollectionSaveData/m_nDoneTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDrama2SituationCollectionSaveData>/m_nDoneTime"] = TYPE_FLOAT32;
        (*type_map)["SDrama2SituationCollectionSaveData/m_bIsOnCooldown"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2SituationCollectionSaveData>/m_bIsOnCooldown"] = TYPE_BOOL;
        (*type_map)["SDrama2SituationCollectionSaveData/m_bProvidersStarted"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2SituationCollectionSaveData>/m_bProvidersStarted"] = TYPE_BOOL;
        (*type_map)["SDrama2SituationCollectionSaveData/m_bSituationRunning"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2SituationCollectionSaveData>/m_bSituationRunning"] = TYPE_BOOL;
        (*type_map)["SDrama2SituationCollectionSaveData/m_bIsTerminated"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2SituationCollectionSaveData>/m_bIsTerminated"] = TYPE_BOOL;
        (*type_map)["SActorVisibilityConditionSaveData/m_pActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorVisibilityConditionSaveData>/m_pActor"] = TYPE_UINT32;
        (*type_map)["SCollisionControllerAspectSaveData/m_bCollideHitman"] = TYPE_BOOL;
        (*type_map)["TArray<SCollisionControllerAspectSaveData>/m_bCollideHitman"] = TYPE_BOOL;
        (*type_map)["SCollisionControllerAspectSaveData/m_bCollideCamera"] = TYPE_BOOL;
        (*type_map)["TArray<SCollisionControllerAspectSaveData>/m_bCollideCamera"] = TYPE_BOOL;
        (*type_map)["SCollisionControllerAspectsSaveData/m_bCollideHitman"] = TYPE_BOOL;
        (*type_map)["TArray<SCollisionControllerAspectsSaveData>/m_bCollideHitman"] = TYPE_BOOL;
        (*type_map)["SCollisionControllerAspectsSaveData/m_bCollideCamera"] = TYPE_BOOL;
        (*type_map)["TArray<SCollisionControllerAspectsSaveData>/m_bCollideCamera"] = TYPE_BOOL;
        (*type_map)["SMathLerpSaveData_SVector3/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector3>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector3/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector3>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector3/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector3>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector3/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector3>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector3/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector3>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector3/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector3>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector3/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector3>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector4/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector4>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector4/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector4>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector4/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector4>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector4/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector4>/w"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector4/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector4>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector4/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector4>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector4/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector4>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector4/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector4>/w"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector4/m_bDivide"] = TYPE_BOOL;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector4>/m_bDivide"] = TYPE_BOOL;
        (*type_map)["SOptionValueSaveData/m_Value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SOptionValueSaveData>/m_Value"] = TYPE_ZVARIANT;
        (*type_map)["SFontDefinition/sFontId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SFontDefinition>/sFontId"] = TYPE_ZSTRING;
        (*type_map)["SFontDefinition/sFontName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SFontDefinition>/sFontName"] = TYPE_ZSTRING;
        (*type_map)["SFontDefinition/eFontFlags"] = TYPE_ENUM;
        (*type_map)["TArray<SFontDefinition>/eFontFlags"] = TYPE_ENUM;
        (*type_map)["SFontDefinition/fScaleFactor"] = TYPE_FLOAT32;
        (*type_map)["TArray<SFontDefinition>/fScaleFactor"] = TYPE_FLOAT32;
        (*type_map)["SFontLibraryDefinition/sFontLocaleID"] = TYPE_ZSTRING;
        (*type_map)["TArray<SFontLibraryDefinition>/sFontLocaleID"] = TYPE_ZSTRING;
        (*type_map)["SFontLibraryDefinition/sFontId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SFontLibraryDefinition>/sFontId"] = TYPE_ZSTRING;
        (*type_map)["SFontLibraryDefinition/sFontName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SFontLibraryDefinition>/sFontName"] = TYPE_ZSTRING;
        (*type_map)["SFontLibraryDefinition/eFontFlags"] = TYPE_ENUM;
        (*type_map)["TArray<SFontLibraryDefinition>/eFontFlags"] = TYPE_ENUM;
        (*type_map)["SFontLibraryDefinition/fScaleFactor"] = TYPE_FLOAT32;
        (*type_map)["TArray<SFontLibraryDefinition>/fScaleFactor"] = TYPE_FLOAT32;
        (*type_map)["SAccessoryItemSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SAccessoryItemSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SAccessoryItemSaveData/m_nBoneId"] = TYPE_UINT32;
        (*type_map)["TArray<SAccessoryItemSaveData>/m_nBoneId"] = TYPE_UINT32;
        (*type_map)["SAccessoryItemSaveData/m_bAttached"] = TYPE_BOOL;
        (*type_map)["TArray<SAccessoryItemSaveData>/m_bAttached"] = TYPE_BOOL;
        (*type_map)["SAccessoryItemSaveData/m_bVisible"] = TYPE_BOOL;
        (*type_map)["TArray<SAccessoryItemSaveData>/m_bVisible"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SSentryZoneSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SSentryZoneSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SSentryZoneSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SSentryZoneSaveData/m_nWarningCount"] = TYPE_INT32;
        (*type_map)["TArray<SSentryZoneSaveData>/m_nWarningCount"] = TYPE_INT32;
        (*type_map)["SSentryZoneSaveData/m_bShowingWarning"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/m_bShowingWarning"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/bLeftThroughWarningZone"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/bLeftThroughWarningZone"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/bEnteredThroughEntranceZone"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/bEnteredThroughEntranceZone"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/bInEntranceZone"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/bInEntranceZone"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/bInWarningZone"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/bInWarningZone"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/bInGreetingZone"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/bInGreetingZone"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/bInReFriskZone"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/bInReFriskZone"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/m_bInRequiredDisguise"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/m_bInRequiredDisguise"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/m_bInFriskExemptDisguise"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/m_bInFriskExemptDisguise"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/m_bHasRequiredItem"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/m_bHasRequiredItem"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/m_bCanShowActionPrompt"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/m_bCanShowActionPrompt"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/m_bTargetInAnyZone"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/m_bTargetInAnyZone"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/m_bSituationActive"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/m_bSituationActive"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/m_bFrisked"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/m_bFrisked"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/m_bItemChecked"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/m_bItemChecked"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/m_bGreeted"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/m_bGreeted"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/m_bGreetedInstruction"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/m_bGreetedInstruction"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/m_bGreetedLoitering"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/m_bGreetedLoitering"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/m_bGreetedUnexpected"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/m_bGreetedUnexpected"] = TYPE_BOOL;
        (*type_map)["SSentryZoneSaveData/m_bInFriskWarningZone"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryZoneSaveData>/m_bInFriskWarningZone"] = TYPE_BOOL;
        (*type_map)["ZHUDHintController.SData/m_sTitleText"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZHUDHintController.SData>/m_sTitleText"] = TYPE_ZSTRING;
        (*type_map)["ZHUDHintController.SData/m_sBodyText"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZHUDHintController.SData>/m_sBodyText"] = TYPE_ZSTRING;
        (*type_map)["SCautiousVIPGroupSaveData/m_vip"] = TYPE_UINT32;
        (*type_map)["TArray<SCautiousVIPGroupSaveData>/m_vip"] = TYPE_UINT32;
        (*type_map)["SCautiousVIPGroupSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SCautiousVIPGroupSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SCautiousVIPGroupSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SCautiousVIPGroupSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SCautiousVIPGroupSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SCautiousVIPGroupSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SCautiousVIPGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousVIPGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCautiousVIPGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousVIPGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCautiousVIPGroupSaveData/m_vipTargetNode"] = TYPE_INT32;
        (*type_map)["TArray<SCautiousVIPGroupSaveData>/m_vipTargetNode"] = TYPE_INT32;
        (*type_map)["SCautiousVIPGroupSaveData/m_occupancyNode"] = TYPE_INT32;
        (*type_map)["TArray<SCautiousVIPGroupSaveData>/m_occupancyNode"] = TYPE_INT32;
        (*type_map)["SSituationGroupSaveData/m_sClassTypeName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSituationGroupSaveData>/m_sClassTypeName"] = TYPE_ZSTRING;
        (*type_map)["SSituationGroupSaveData/m_nSituation"] = TYPE_UINT32;
        (*type_map)["TArray<SSituationGroupSaveData>/m_nSituation"] = TYPE_UINT32;
        (*type_map)["SSituationGroupSaveData/m_nGroupID"] = TYPE_INT32;
        (*type_map)["TArray<SSituationGroupSaveData>/m_nGroupID"] = TYPE_INT32;
        (*type_map)["SSituationGroupSaveData/m_CustomData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSituationGroupSaveData>/m_CustomData"] = TYPE_ZVARIANT;
        (*type_map)["SMathLerpSaveData_SVector2/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector2>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector2/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector2>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector2/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector2>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector2/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector2>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector2/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector2>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector2/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector2>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector2/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector2>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector2/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector2>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector2/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector2>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector2/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector2>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["STestStruct/stringField"] = TYPE_ZSTRING;
        (*type_map)["TArray<STestStruct>/stringField"] = TYPE_ZSTRING;
        (*type_map)["STestStruct/intField"] = TYPE_UINT32;
        (*type_map)["TArray<STestStruct>/intField"] = TYPE_UINT32;
        (*type_map)["STestStruct/floatField"] = TYPE_FLOAT32;
        (*type_map)["TArray<STestStruct>/floatField"] = TYPE_FLOAT32;
        (*type_map)["STestStruct/enumField"] = TYPE_ENUM;
        (*type_map)["TArray<STestStruct>/enumField"] = TYPE_ENUM;
        (*type_map)["STestStruct2/stringField"] = TYPE_ZSTRING;
        (*type_map)["TArray<STestStruct2>/stringField"] = TYPE_ZSTRING;
        (*type_map)["STestStruct2/intField"] = TYPE_UINT32;
        (*type_map)["TArray<STestStruct2>/intField"] = TYPE_UINT32;
        (*type_map)["STestStruct2/floatField"] = TYPE_FLOAT32;
        (*type_map)["TArray<STestStruct2>/floatField"] = TYPE_FLOAT32;
        (*type_map)["STestStruct2/enumField"] = TYPE_ENUM;
        (*type_map)["TArray<STestStruct2>/enumField"] = TYPE_ENUM;
        (*type_map)["STestStruct2/variantField"] = TYPE_ZVARIANT;
        (*type_map)["TArray<STestStruct2>/variantField"] = TYPE_ZVARIANT;
        (*type_map)["SAnimatedActorStandOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorStandOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorStandOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorStandOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorStandOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorStandOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SInventoryUISlotSlim/icon"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SInventoryUISlotSlim>/icon"] = TYPE_ZVARIANT;
        (*type_map)["SInventoryUISlotSlim/containedIcon"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SInventoryUISlotSlim>/containedIcon"] = TYPE_ZVARIANT;
        (*type_map)["SIntelDataArray_dummy/m_sHeadline"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelDataArray_dummy>/m_sHeadline"] = TYPE_ZSTRING;
        (*type_map)["SIntelDataArray_dummy/m_sBodyHeadline"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelDataArray_dummy>/m_sBodyHeadline"] = TYPE_ZSTRING;
        (*type_map)["SIntelDataArray_dummy/m_sBodytext"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelDataArray_dummy>/m_sBodytext"] = TYPE_ZSTRING;
        (*type_map)["SIntelDataArray_dummy/m_sImage"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelDataArray_dummy>/m_sImage"] = TYPE_ZSTRING;
        (*type_map)["SItemSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SItemSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SItemSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SItemSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SItemSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SItemSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SItemSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SItemSaveData/m_bShowItem"] = TYPE_BOOL;
        (*type_map)["TArray<SItemSaveData>/m_bShowItem"] = TYPE_BOOL;
        (*type_map)["SItemSaveData/m_bEnablePickup"] = TYPE_BOOL;
        (*type_map)["TArray<SItemSaveData>/m_bEnablePickup"] = TYPE_BOOL;
        (*type_map)["SItemSaveData/m_bKinematic"] = TYPE_BOOL;
        (*type_map)["TArray<SItemSaveData>/m_bKinematic"] = TYPE_BOOL;
        (*type_map)["SItemSaveData/m_bSleeping"] = TYPE_BOOL;
        (*type_map)["TArray<SItemSaveData>/m_bSleeping"] = TYPE_BOOL;
        (*type_map)["SItemSaveData/m_bIsPerceptible"] = TYPE_BOOL;
        (*type_map)["TArray<SItemSaveData>/m_bIsPerceptible"] = TYPE_BOOL;
        (*type_map)["SItemSaveData/m_bDestroyed"] = TYPE_BOOL;
        (*type_map)["TArray<SItemSaveData>/m_bDestroyed"] = TYPE_BOOL;
        (*type_map)["SItemSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SItemSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SItemSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SItemSaveData/m_rTransformParent"] = TYPE_UINT32;
        (*type_map)["TArray<SItemSaveData>/m_rTransformParent"] = TYPE_UINT32;
        (*type_map)["SItemSaveData/m_rSpawner"] = TYPE_UINT32;
        (*type_map)["TArray<SItemSaveData>/m_rSpawner"] = TYPE_UINT32;
        (*type_map)["SItemSaveData/m_rOwner"] = TYPE_UINT32;
        (*type_map)["TArray<SItemSaveData>/m_rOwner"] = TYPE_UINT32;
        (*type_map)["SItemSaveData/m_rHoldingContainer"] = TYPE_UINT32;
        (*type_map)["TArray<SItemSaveData>/m_rHoldingContainer"] = TYPE_UINT32;
        (*type_map)["SItemSaveData/m_pPreviousOwner"] = TYPE_UINT32;
        (*type_map)["TArray<SItemSaveData>/m_pPreviousOwner"] = TYPE_UINT32;
        (*type_map)["SItemSaveData/m_bTurnedOn"] = TYPE_BOOL;
        (*type_map)["TArray<SItemSaveData>/m_bTurnedOn"] = TYPE_BOOL;
        (*type_map)["SItemSaveData/m_bEverOwnedByHitman"] = TYPE_BOOL;
        (*type_map)["TArray<SItemSaveData>/m_bEverOwnedByHitman"] = TYPE_BOOL;
        (*type_map)["SItemSaveData/m_bWasPlacedAndAttached"] = TYPE_BOOL;
        (*type_map)["TArray<SItemSaveData>/m_bWasPlacedAndAttached"] = TYPE_BOOL;
        (*type_map)["SItemSaveData/m_bObjectInPhysicsWorld"] = TYPE_BOOL;
        (*type_map)["TArray<SItemSaveData>/m_bObjectInPhysicsWorld"] = TYPE_BOOL;
        (*type_map)["SItemSaveData/m_nQuantity"] = TYPE_INT32;
        (*type_map)["TArray<SItemSaveData>/m_nQuantity"] = TYPE_INT32;
        (*type_map)["SItemSaveData/m_eGlowType"] = TYPE_ENUM;
        (*type_map)["TArray<SItemSaveData>/m_eGlowType"] = TYPE_ENUM;
        (*type_map)["SAnimatedActorReactOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorReactOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorReactOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorReactOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorReactOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorReactOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorReactOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorReactOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorReactOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorReactOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorReactOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorReactOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorReactOrderSaveData/m_rChildNetworkEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SAnimatedActorReactOrderSaveData>/m_rChildNetworkEntity"] = TYPE_UINT32;
        (*type_map)["SAnimatedActorReactOrderSaveData/m_targetEmotionState"] = TYPE_ENUM;
        (*type_map)["TArray<SAnimatedActorReactOrderSaveData>/m_targetEmotionState"] = TYPE_ENUM;
        (*type_map)["SAnimatedActorReactOrderSaveData/m_bDeadbody"] = TYPE_BOOL;
        (*type_map)["TArray<SAnimatedActorReactOrderSaveData>/m_bDeadbody"] = TYPE_BOOL;
        (*type_map)["SAnimatedActorReactOrderSaveData/m_bExplosion"] = TYPE_BOOL;
        (*type_map)["TArray<SAnimatedActorReactOrderSaveData>/m_bExplosion"] = TYPE_BOOL;
        (*type_map)["SAnimatedActorReactOrderSaveData/m_bTrespassing"] = TYPE_BOOL;
        (*type_map)["TArray<SAnimatedActorReactOrderSaveData>/m_bTrespassing"] = TYPE_BOOL;
        (*type_map)["SAnimatedActorReactOrderSaveData/m_bDropCarriedItems"] = TYPE_BOOL;
        (*type_map)["TArray<SAnimatedActorReactOrderSaveData>/m_bDropCarriedItems"] = TYPE_BOOL;
        (*type_map)["SAnimatedActorReactOrderSaveData/m_bFaceTargetSet"] = TYPE_BOOL;
        (*type_map)["TArray<SAnimatedActorReactOrderSaveData>/m_bFaceTargetSet"] = TYPE_BOOL;
        (*type_map)["SAnimatedActorReactOrderSaveData/m_bLookAtTargetSet"] = TYPE_BOOL;
        (*type_map)["TArray<SAnimatedActorReactOrderSaveData>/m_bLookAtTargetSet"] = TYPE_BOOL;
        (*type_map)["SAnimatedActorReactOrderSaveData/m_sAct"] = TYPE_ZSTRING;
        (*type_map)["TArray<SAnimatedActorReactOrderSaveData>/m_sAct"] = TYPE_ZSTRING;
        (*type_map)["SSaveGameHeader/nFourCC"] = TYPE_UINT32;
        (*type_map)["TArray<SSaveGameHeader>/nFourCC"] = TYPE_UINT32;
        (*type_map)["SSaveGameHeader/nVersion"] = TYPE_UINT32;
        (*type_map)["TArray<SSaveGameHeader>/nVersion"] = TYPE_UINT32;
        (*type_map)["SSaveGameHeader/nCrc32"] = TYPE_UINT32;
        (*type_map)["TArray<SSaveGameHeader>/nCrc32"] = TYPE_UINT32;
        (*type_map)["SSaveGameHeader/nSize"] = TYPE_UINT32;
        (*type_map)["TArray<SSaveGameHeader>/nSize"] = TYPE_UINT32;
        (*type_map)["SSaveGameHeader/nTimeStamp"] = TYPE_INT64;
        (*type_map)["TArray<SSaveGameHeader>/nTimeStamp"] = TYPE_INT64;
        (*type_map)["SSaveGameHeader/nSlot"] = TYPE_UINT8;
        (*type_map)["TArray<SSaveGameHeader>/nSlot"] = TYPE_UINT8;
        (*type_map)["SSaveGameHeader/eSaveType"] = TYPE_ENUM;
        (*type_map)["TArray<SSaveGameHeader>/eSaveType"] = TYPE_ENUM;
        (*type_map)["SSaveGameHeader/eDifficultyLevel"] = TYPE_INT32;
        (*type_map)["TArray<SSaveGameHeader>/eDifficultyLevel"] = TYPE_INT32;
        (*type_map)["SSaveGameHeader/sContractId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSaveGameHeader>/sContractId"] = TYPE_ZSTRING;
        (*type_map)["SSaveGameHeader/sContractTitle"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSaveGameHeader>/sContractTitle"] = TYPE_ZSTRING;
        (*type_map)["SSaveGameHeader/sContractType"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSaveGameHeader>/sContractType"] = TYPE_ZSTRING;
        (*type_map)["SSaveGameHeader/sLocationId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSaveGameHeader>/sLocationId"] = TYPE_ZSTRING;
        (*type_map)["SSaveGameHeader/sContractSessionId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSaveGameHeader>/sContractSessionId"] = TYPE_ZSTRING;
        (*type_map)["SSaveGameHeader/sLastEventToken"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSaveGameHeader>/sLastEventToken"] = TYPE_ZSTRING;
        (*type_map)["SSaveGameHeader/bIsOnline"] = TYPE_BOOL;
        (*type_map)["TArray<SSaveGameHeader>/bIsOnline"] = TYPE_BOOL;
        (*type_map)["SSaveGameHeader/bIsVR"] = TYPE_BOOL;
        (*type_map)["TArray<SSaveGameHeader>/bIsVR"] = TYPE_BOOL;
        (*type_map)["SVoidSignalEntitySaveData/m_bSignaling"] = TYPE_BOOL;
        (*type_map)["TArray<SVoidSignalEntitySaveData>/m_bSignaling"] = TYPE_BOOL;
        (*type_map)["SVoidSignalEntitySaveData/m_fFiredAtTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SVoidSignalEntitySaveData>/m_fFiredAtTime"] = TYPE_FLOAT32;
        (*type_map)["SRenderMaterialSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SRenderMaterialSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SRenderMaterialSaveData/m_bActive"] = TYPE_BOOL;
        (*type_map)["TArray<SRenderMaterialSaveData>/m_bActive"] = TYPE_BOOL;
        (*type_map)["SContractObjectiveSaveData/_a"] = TYPE_UINT32;
        (*type_map)["TArray<SContractObjectiveSaveData>/_a"] = TYPE_UINT32;
        (*type_map)["SContractObjectiveSaveData/_b"] = TYPE_UINT16;
        (*type_map)["TArray<SContractObjectiveSaveData>/_b"] = TYPE_UINT16;
        (*type_map)["SContractObjectiveSaveData/_c"] = TYPE_UINT16;
        (*type_map)["TArray<SContractObjectiveSaveData>/_c"] = TYPE_UINT16;
        (*type_map)["SContractObjectiveSaveData/_d"] = TYPE_UINT8;
        (*type_map)["TArray<SContractObjectiveSaveData>/_d"] = TYPE_UINT8;
        (*type_map)["SContractObjectiveSaveData/_e"] = TYPE_UINT8;
        (*type_map)["TArray<SContractObjectiveSaveData>/_e"] = TYPE_UINT8;
        (*type_map)["SContractObjectiveSaveData/_f"] = TYPE_UINT8;
        (*type_map)["TArray<SContractObjectiveSaveData>/_f"] = TYPE_UINT8;
        (*type_map)["SContractObjectiveSaveData/_g"] = TYPE_UINT8;
        (*type_map)["TArray<SContractObjectiveSaveData>/_g"] = TYPE_UINT8;
        (*type_map)["SContractObjectiveSaveData/_h"] = TYPE_UINT8;
        (*type_map)["TArray<SContractObjectiveSaveData>/_h"] = TYPE_UINT8;
        (*type_map)["SContractObjectiveSaveData/_i"] = TYPE_UINT8;
        (*type_map)["TArray<SContractObjectiveSaveData>/_i"] = TYPE_UINT8;
        (*type_map)["SContractObjectiveSaveData/_j"] = TYPE_UINT8;
        (*type_map)["TArray<SContractObjectiveSaveData>/_j"] = TYPE_UINT8;
        (*type_map)["SContractObjectiveSaveData/_k"] = TYPE_UINT8;
        (*type_map)["TArray<SContractObjectiveSaveData>/_k"] = TYPE_UINT8;
        (*type_map)["SContractObjectiveSaveData/m_sText"] = TYPE_ZSTRING;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_sText"] = TYPE_ZSTRING;
        (*type_map)["SContractObjectiveSaveData/m_eCategory"] = TYPE_ENUM;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_eCategory"] = TYPE_ENUM;
        (*type_map)["SContractObjectiveSaveData/m_bCompleted"] = TYPE_BOOL;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_bCompleted"] = TYPE_BOOL;
        (*type_map)["SContractObjectiveSaveData/m_bFailed"] = TYPE_BOOL;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_bFailed"] = TYPE_BOOL;
        (*type_map)["SContractObjectiveSaveData/m_bIsHidden"] = TYPE_BOOL;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_bIsHidden"] = TYPE_BOOL;
        (*type_map)["SContractObjectiveSaveData/m_sSuccessEventName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_sSuccessEventName"] = TYPE_ZSTRING;
        (*type_map)["SContractObjectiveSaveData/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["SContractObjectiveSaveData/m_sFailedEventName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_sFailedEventName"] = TYPE_ZSTRING;
        (*type_map)["SContractObjectiveSaveData/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["SContractObjectiveSaveData/m_sResetEventName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_sResetEventName"] = TYPE_ZSTRING;
        (*type_map)["SContractObjectiveSaveData/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["SContractObjectiveSaveData/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["SContractObjectiveSaveData/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["SContractObjectiveSaveData/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["SContractObjectiveSaveData/m_iRepeatSuccess"] = TYPE_INT32;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_iRepeatSuccess"] = TYPE_INT32;
        (*type_map)["SContractObjectiveSaveData/m_iRepeatFailed"] = TYPE_INT32;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_iRepeatFailed"] = TYPE_INT32;
        (*type_map)["SContractObjectiveSaveData/m_iCurrentSuccess"] = TYPE_INT32;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_iCurrentSuccess"] = TYPE_INT32;
        (*type_map)["SContractObjectiveSaveData/m_iCurrentFailed"] = TYPE_INT32;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_iCurrentFailed"] = TYPE_INT32;
        (*type_map)["SContractObjectiveSaveData/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["SContractObjectiveSaveData/m_ActivationValue"] = TYPE_BOOL;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_ActivationValue"] = TYPE_BOOL;
        (*type_map)["SContractObjectiveSaveData/m_bUpdateActivationOnCompleted"] = TYPE_BOOL;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_bUpdateActivationOnCompleted"] = TYPE_BOOL;
        (*type_map)["SContractObjectiveSaveData/m_bDisplayAsKill"] = TYPE_BOOL;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_bDisplayAsKill"] = TYPE_BOOL;
        (*type_map)["SContractObjectiveSaveData/m_bIgnoreIfInactive"] = TYPE_BOOL;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_bIgnoreIfInactive"] = TYPE_BOOL;
        (*type_map)["SContractObjectiveSaveData/m_bShowInHud"] = TYPE_BOOL;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_bShowInHud"] = TYPE_BOOL;
        (*type_map)["SContractObjectiveSaveData/m_bCombinedDisplayInHud"] = TYPE_BOOL;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_bCombinedDisplayInHud"] = TYPE_BOOL;
        (*type_map)["SContractObjectiveSaveData/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["SContractObjectiveSaveData/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["SContractObjectiveSaveData/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["SContractObjectiveSaveData/m_sImage"] = TYPE_ZSTRING;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_sImage"] = TYPE_ZSTRING;
        (*type_map)["SContractObjectiveSaveData/m_sObjectiveType"] = TYPE_ZSTRING;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_sObjectiveType"] = TYPE_ZSTRING;
        (*type_map)["SContractObjectiveSaveData/m_sBriefingName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_sBriefingName"] = TYPE_ZSTRING;
        (*type_map)["SContractObjectiveSaveData/m_bForceShowOnLoadingScreen"] = TYPE_BOOL;
        (*type_map)["TArray<SContractObjectiveSaveData>/m_bForceShowOnLoadingScreen"] = TYPE_BOOL;
        (*type_map)["SCrowdReactionSaveData/m_nNumPacify"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdReactionSaveData>/m_nNumPacify"] = TYPE_UINT32;
        (*type_map)["SCrowdReactionSaveData/m_nNumShotsFired"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdReactionSaveData>/m_nNumShotsFired"] = TYPE_UINT32;
        (*type_map)["SCrowdReactionSaveData/m_nNumDeaths"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdReactionSaveData>/m_nNumDeaths"] = TYPE_UINT32;
        (*type_map)["SCrowdReactionSaveData/m_nNumScared"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdReactionSaveData>/m_nNumScared"] = TYPE_UINT32;
        (*type_map)["SCrowdReactionSaveData/m_bWarzoneSpawned"] = TYPE_BOOL;
        (*type_map)["TArray<SCrowdReactionSaveData>/m_bWarzoneSpawned"] = TYPE_BOOL;
        (*type_map)["SInvestigateWeaponGroupSaveData/m_rTarget"] = TYPE_UINT32;
        (*type_map)["TArray<SInvestigateWeaponGroupSaveData>/m_rTarget"] = TYPE_UINT32;
        (*type_map)["SInvestigateWeaponGroupSaveData/m_rReporter"] = TYPE_UINT32;
        (*type_map)["TArray<SInvestigateWeaponGroupSaveData>/m_rReporter"] = TYPE_UINT32;
        (*type_map)["SInvestigateWeaponGroupSaveData/m_rInvestigator"] = TYPE_UINT32;
        (*type_map)["TArray<SInvestigateWeaponGroupSaveData>/m_rInvestigator"] = TYPE_UINT32;
        (*type_map)["SInvestigateWeaponGroupSaveData/m_rGuard"] = TYPE_UINT32;
        (*type_map)["TArray<SInvestigateWeaponGroupSaveData>/m_rGuard"] = TYPE_UINT32;
        (*type_map)["SInvestigateWeaponGroupSaveData/m_ReporterIsVIPWithAmbientEscort"] = TYPE_BOOL;
        (*type_map)["TArray<SInvestigateWeaponGroupSaveData>/m_ReporterIsVIPWithAmbientEscort"] = TYPE_BOOL;
        (*type_map)["SInvestigateWeaponGroupSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SInvestigateWeaponGroupSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SInvestigateWeaponGroupSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SInvestigateWeaponGroupSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SInvestigateWeaponGroupSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SInvestigateWeaponGroupSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SInvestigateWeaponGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SInvestigateWeaponGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SInvestigateWeaponGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SInvestigateWeaponGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SAttentionHUDUIElement/fAngle"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAttentionHUDUIElement>/fAngle"] = TYPE_FLOAT32;
        (*type_map)["SAttentionHUDUIElement/fAttention"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAttentionHUDUIElement>/fAttention"] = TYPE_FLOAT32;
        (*type_map)["SAttentionHUDUIElement/fAlpha"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAttentionHUDUIElement>/fAlpha"] = TYPE_FLOAT32;
        (*type_map)["SAttentionHUDUIElement/fRadius"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAttentionHUDUIElement>/fRadius"] = TYPE_FLOAT32;
        (*type_map)["SAttentionHUDUIElement/nColor"] = TYPE_INT32;
        (*type_map)["TArray<SAttentionHUDUIElement>/nColor"] = TYPE_INT32;
        (*type_map)["SItemLeftHandUIData/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<SItemLeftHandUIData>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["SItemLeftHandUIData/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<SItemLeftHandUIData>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["SItemLeftHandUIData/nItemHUDType"] = TYPE_INT32;
        (*type_map)["TArray<SItemLeftHandUIData>/nItemHUDType"] = TYPE_INT32;
        (*type_map)["SItemLeftHandUIData/bHasItemToShow"] = TYPE_BOOL;
        (*type_map)["TArray<SItemLeftHandUIData>/bHasItemToShow"] = TYPE_BOOL;
        (*type_map)["SItemLeftHandUIData/bSuspicious"] = TYPE_BOOL;
        (*type_map)["TArray<SItemLeftHandUIData>/bSuspicious"] = TYPE_BOOL;
        (*type_map)["SItemLeftHandUIData/bIllegal"] = TYPE_BOOL;
        (*type_map)["TArray<SItemLeftHandUIData>/bIllegal"] = TYPE_BOOL;
        (*type_map)["SItemOnBackUIData/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<SItemOnBackUIData>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["SItemOnBackUIData/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<SItemOnBackUIData>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["SItemOnBackUIData/nItemHUDType"] = TYPE_INT32;
        (*type_map)["TArray<SItemOnBackUIData>/nItemHUDType"] = TYPE_INT32;
        (*type_map)["SItemOnBackUIData/bHasItemToShow"] = TYPE_BOOL;
        (*type_map)["TArray<SItemOnBackUIData>/bHasItemToShow"] = TYPE_BOOL;
        (*type_map)["SItemOnBackUIData/bSuspicious"] = TYPE_BOOL;
        (*type_map)["TArray<SItemOnBackUIData>/bSuspicious"] = TYPE_BOOL;
        (*type_map)["SItemOnBackUIData/bIllegal"] = TYPE_BOOL;
        (*type_map)["TArray<SItemOnBackUIData>/bIllegal"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/sWeaponName"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/sWeaponName"] = TYPE_ZSTRING;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/sContainedItemName"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/sContainedItemName"] = TYPE_ZSTRING;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/nWeaponType"] = TYPE_INT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/nWeaponType"] = TYPE_INT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/nItemHUDType"] = TYPE_INT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/nItemHUDType"] = TYPE_INT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/nAmmoRemaining"] = TYPE_INT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/nAmmoRemaining"] = TYPE_INT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/nAmmoTotal"] = TYPE_INT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/nAmmoTotal"] = TYPE_INT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/nAmmoInClip"] = TYPE_INT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/nAmmoInClip"] = TYPE_INT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bSilenced"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bSilenced"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bIsFirearm"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bIsFirearm"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bHolstered"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bHolstered"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bCannotBeHolstered"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bCannotBeHolstered"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bHasItemToShow"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bHasItemToShow"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bSuspicious"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bSuspicious"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bIllegal"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bIllegal"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bCanReload"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bCanReload"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bIsReloading"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bIsReloading"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/fReloadDuration"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/fReloadDuration"] = TYPE_FLOAT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bInfiniteAmmo"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bInfiniteAmmo"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bIsContainer"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bIsContainer"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bContainsItem"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bContainsItem"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/nContainedItemHUDType"] = TYPE_INT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/nContainedItemHUDType"] = TYPE_INT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bContainedItemIllegal"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bContainedItemIllegal"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bContainedItemSuspicious"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bContainedItemSuspicious"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bContainedItemDetectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bContainedItemDetectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/fLastBulletFiredTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/fLastBulletFiredTime"] = TYPE_FLOAT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/fTimeBetweenBullets"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/fTimeBetweenBullets"] = TYPE_FLOAT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/nCurrentAmmoType"] = TYPE_UINT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/nCurrentAmmoType"] = TYPE_UINT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/nItemHUDType"] = TYPE_INT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/nItemHUDType"] = TYPE_INT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bHasItemToShow"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bHasItemToShow"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bSuspicious"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bSuspicious"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bIllegal"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bIllegal"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/nItemHUDType"] = TYPE_INT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/nItemHUDType"] = TYPE_INT32;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bHasItemToShow"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bHasItemToShow"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bSuspicious"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bSuspicious"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bIllegal"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bIllegal"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/bShowHolstered"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/bShowHolstered"] = TYPE_BOOL;
        (*type_map)["ZHUDUIControllerEntity.SWeaponViewData/nDisplayMode"] = TYPE_INT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SWeaponViewData>/nDisplayMode"] = TYPE_INT32;
        (*type_map)["SValueBoolDelayedEntitySaveData/m_bValue"] = TYPE_BOOL;
        (*type_map)["TArray<SValueBoolDelayedEntitySaveData>/m_bValue"] = TYPE_BOOL;
        (*type_map)["SValueBoolDelayedEntitySaveData/m_bWaitingValue"] = TYPE_BOOL;
        (*type_map)["TArray<SValueBoolDelayedEntitySaveData>/m_bWaitingValue"] = TYPE_BOOL;
        (*type_map)["SValueBoolDelayedEntitySaveData/m_fTimeToNextEvent"] = TYPE_FLOAT32;
        (*type_map)["TArray<SValueBoolDelayedEntitySaveData>/m_fTimeToNextEvent"] = TYPE_FLOAT32;
        (*type_map)["SDrama2ActorCollectionSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SDrama2ActorCollectionSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SDrama2ActorCollectionSaveData/m_rSequence"] = TYPE_UINT32;
        (*type_map)["TArray<SDrama2ActorCollectionSaveData>/m_rSequence"] = TYPE_UINT32;
        (*type_map)["SDrama2ActorCollectionSaveData/m_rBehavior"] = TYPE_UINT32;
        (*type_map)["TArray<SDrama2ActorCollectionSaveData>/m_rBehavior"] = TYPE_UINT32;
        (*type_map)["SDrama2ActorCollectionSaveData/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SDrama2ActorCollectionSaveData>/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["SDrama2ActorCollectionSaveData/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SDrama2ActorCollectionSaveData>/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["SDrama2ActorCollectionSaveData/m_sMatchName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SDrama2ActorCollectionSaveData>/m_sMatchName"] = TYPE_ZSTRING;
        (*type_map)["SDrama2ActorCollectionSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SDrama2ActorCollectionSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SDrama2ActorCollectionSaveData/m_bIsDone"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2ActorCollectionSaveData>/m_bIsDone"] = TYPE_BOOL;
        (*type_map)["SDrama2ActorCollectionSaveData/m_bIsPaused"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2ActorCollectionSaveData>/m_bIsPaused"] = TYPE_BOOL;
        (*type_map)["SDrama2ActorCollectionSaveData/m_bIsSpeaking"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2ActorCollectionSaveData>/m_bIsSpeaking"] = TYPE_BOOL;
        (*type_map)["SDrama2ActorCollectionSaveData/m_bOwnsCurrentBehavior"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2ActorCollectionSaveData>/m_bOwnsCurrentBehavior"] = TYPE_BOOL;
        (*type_map)["SDrama2ActorCollectionSaveData/m_bActive"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2ActorCollectionSaveData>/m_bActive"] = TYPE_BOOL;
        (*type_map)["SDrama2ActorCollectionSaveData/m_bRequired"] = TYPE_BOOL;
        (*type_map)["TArray<SDrama2ActorCollectionSaveData>/m_bRequired"] = TYPE_BOOL;
        (*type_map)["SDramaActorCollectionSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SDramaActorCollectionSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SDramaActorCollectionSaveData/m_rSequence"] = TYPE_UINT32;
        (*type_map)["TArray<SDramaActorCollectionSaveData>/m_rSequence"] = TYPE_UINT32;
        (*type_map)["SDramaActorCollectionSaveData/m_rBehavior"] = TYPE_UINT32;
        (*type_map)["TArray<SDramaActorCollectionSaveData>/m_rBehavior"] = TYPE_UINT32;
        (*type_map)["SDramaActorCollectionSaveData/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SDramaActorCollectionSaveData>/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["SDramaActorCollectionSaveData/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SDramaActorCollectionSaveData>/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["SDramaActorCollectionSaveData/m_sMatchName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SDramaActorCollectionSaveData>/m_sMatchName"] = TYPE_ZSTRING;
        (*type_map)["SDramaActorCollectionSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SDramaActorCollectionSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SDramaActorCollectionSaveData/m_bIsDone"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaActorCollectionSaveData>/m_bIsDone"] = TYPE_BOOL;
        (*type_map)["SDramaActorCollectionSaveData/m_bIsPaused"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaActorCollectionSaveData>/m_bIsPaused"] = TYPE_BOOL;
        (*type_map)["SDramaActorCollectionSaveData/m_bIsSpeaking"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaActorCollectionSaveData>/m_bIsSpeaking"] = TYPE_BOOL;
        (*type_map)["SDramaSituationCollectionSaveData/m_bSituationRunning"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaSituationCollectionSaveData>/m_bSituationRunning"] = TYPE_BOOL;
        (*type_map)["SDramaSituationCollectionSaveData/m_bIsTerminated"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaSituationCollectionSaveData>/m_bIsTerminated"] = TYPE_BOOL;
        (*type_map)["SDramaSituationCollectionSaveData/m_nPriorityModifier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDramaSituationCollectionSaveData>/m_nPriorityModifier"] = TYPE_FLOAT32;
        (*type_map)["SDramaSituationCollectionSaveData/m_nCurrentDrama"] = TYPE_INT32;
        (*type_map)["TArray<SDramaSituationCollectionSaveData>/m_nCurrentDrama"] = TYPE_INT32;
        (*type_map)["SDramaSituationCollectionSaveData/m_bProvidersStarted"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaSituationCollectionSaveData>/m_bProvidersStarted"] = TYPE_BOOL;
        (*type_map)["SDramaSetupSaveData/m_bDoneTriggered"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaSetupSaveData>/m_bDoneTriggered"] = TYPE_BOOL;
        (*type_map)["SDramaSetupSaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SDramaSetupSaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SDramaSetupSaveData/m_rSituation"] = TYPE_UINT32;
        (*type_map)["TArray<SDramaSetupSaveData>/m_rSituation"] = TYPE_UINT32;
        (*type_map)["SDramaSetupCollectionSaveData/m_bDoneTriggered"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaSetupCollectionSaveData>/m_bDoneTriggered"] = TYPE_BOOL;
        (*type_map)["SDramaSetupCollectionSaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SDramaSetupCollectionSaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SDramaSetupCollectionSaveData/m_rSituation"] = TYPE_UINT32;
        (*type_map)["TArray<SDramaSetupCollectionSaveData>/m_rSituation"] = TYPE_UINT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_rSequence"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_rSequence"] = TYPE_UINT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_rBehavior"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_rBehavior"] = TYPE_UINT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_sMatchName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_sMatchName"] = TYPE_ZSTRING;
        (*type_map)["SScreenplay2ManagerSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SScreenplay2ManagerSaveData/m_bIsDone"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bIsDone"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_bIsPaused"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bIsPaused"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_bIsSpeaking"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bIsSpeaking"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_bSituationRunning"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bSituationRunning"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_bIsTerminated"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bIsTerminated"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_nPriorityModifier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_nPriorityModifier"] = TYPE_FLOAT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_nCurrentDrama"] = TYPE_INT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_nCurrentDrama"] = TYPE_INT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_bProvidersStarted"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bProvidersStarted"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_bDoneTriggered"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bDoneTriggered"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SScreenplay2ManagerSaveData/m_rSituation"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_rSituation"] = TYPE_UINT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_rSequence"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_rSequence"] = TYPE_UINT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_rBehavior"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_rBehavior"] = TYPE_UINT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_sMatchName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_sMatchName"] = TYPE_ZSTRING;
        (*type_map)["SScreenplay2ManagerSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SScreenplay2ManagerSaveData/m_bIsDone"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bIsDone"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_bIsPaused"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bIsPaused"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_bIsSpeaking"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bIsSpeaking"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_bOwnsCurrentBehavior"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bOwnsCurrentBehavior"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_bActive"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bActive"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_bRequired"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bRequired"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_nPriorityModifier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_nPriorityModifier"] = TYPE_FLOAT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_nCurrentDrama"] = TYPE_INT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_nCurrentDrama"] = TYPE_INT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_nDoneTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_nDoneTime"] = TYPE_FLOAT32;
        (*type_map)["SScreenplay2ManagerSaveData/m_bIsOnCooldown"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bIsOnCooldown"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_bProvidersStarted"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bProvidersStarted"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_bSituationRunning"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bSituationRunning"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_bIsTerminated"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bIsTerminated"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_bDoneTriggered"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_bDoneTriggered"] = TYPE_BOOL;
        (*type_map)["SScreenplay2ManagerSaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SScreenplay2ManagerSaveData/m_rSituation"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplay2ManagerSaveData>/m_rSituation"] = TYPE_UINT32;
        (*type_map)["SInventoryUI/icon"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SInventoryUI>/icon"] = TYPE_ZVARIANT;
        (*type_map)["SInventoryUI/containedIcon"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SInventoryUI>/containedIcon"] = TYPE_ZVARIANT;
        (*type_map)["SInventoryUI/otherslotsCount"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUI>/otherslotsCount"] = TYPE_INT32;
        (*type_map)["SInventoryUI/selectedIndex"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUI>/selectedIndex"] = TYPE_INT32;
        (*type_map)["SInventoryUI/isActionInventory"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUI>/isActionInventory"] = TYPE_BOOL;
        (*type_map)["SActorBoneAttachSaveData/m_rAttachmentTarget"] = TYPE_UINT32;
        (*type_map)["TArray<SActorBoneAttachSaveData>/m_rAttachmentTarget"] = TYPE_UINT32;
        (*type_map)["SActorBoneAttachSaveData/m_bIsAttached"] = TYPE_BOOL;
        (*type_map)["TArray<SActorBoneAttachSaveData>/m_bIsAttached"] = TYPE_BOOL;
        (*type_map)["SActorBoneAttachmentsSaveData/m_rAttachmentTarget"] = TYPE_UINT32;
        (*type_map)["TArray<SActorBoneAttachmentsSaveData>/m_rAttachmentTarget"] = TYPE_UINT32;
        (*type_map)["SActorBoneAttachmentsSaveData/m_bIsAttached"] = TYPE_BOOL;
        (*type_map)["TArray<SActorBoneAttachmentsSaveData>/m_bIsAttached"] = TYPE_BOOL;
        (*type_map)["SUIBreadcrumbDataSaveData/m_fProgress"] = TYPE_FLOAT32;
        (*type_map)["TArray<SUIBreadcrumbDataSaveData>/m_fProgress"] = TYPE_FLOAT32;
        (*type_map)["SUIBreadcrumbDataSaveData/m_nState"] = TYPE_INT32;
        (*type_map)["TArray<SUIBreadcrumbDataSaveData>/m_nState"] = TYPE_INT32;
        (*type_map)["SGeomScaleSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGeomScaleSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGeomScaleSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGeomScaleSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGeomScaleSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGeomScaleSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SGeomScaleSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGeomScaleSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCamBone/m_eBoneId"] = TYPE_ENUM;
        (*type_map)["TArray<SCamBone>/m_eBoneId"] = TYPE_ENUM;
        (*type_map)["SCamBone/m_fWeight"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCamBone>/m_fWeight"] = TYPE_FLOAT32;
        (*type_map)["STemplateBlueprintSubEntity/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/entityID"] = TYPE_UINT64;
        (*type_map)["STemplateBlueprintSubEntity/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["STemplateBlueprintSubEntity/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/entityIndex"] = TYPE_INT32;
        (*type_map)["STemplateBlueprintSubEntity/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["STemplateBlueprintSubEntity/entityTypeResourceIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/entityTypeResourceIndex"] = TYPE_INT32;
        (*type_map)["STemplateBlueprintSubEntity/entityId"] = TYPE_UINT64;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/entityId"] = TYPE_UINT64;
        (*type_map)["STemplateBlueprintSubEntity/editorOnly"] = TYPE_BOOL;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/editorOnly"] = TYPE_BOOL;
        (*type_map)["STemplateBlueprintSubEntity/entityName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/entityName"] = TYPE_ZSTRING;
        (*type_map)["STemplateBlueprintSubEntity/sAliasName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/sAliasName"] = TYPE_ZSTRING;
        (*type_map)["STemplateBlueprintSubEntity/entityID"] = TYPE_INT32;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/entityID"] = TYPE_INT32;
        (*type_map)["STemplateBlueprintSubEntity/sPropertyName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/sPropertyName"] = TYPE_ZSTRING;
        (*type_map)["STemplateBlueprintSubEntity/sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/sName"] = TYPE_ZSTRING;
        (*type_map)["STemplateBlueprintSubEntity/bIsArray"] = TYPE_BOOL;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/bIsArray"] = TYPE_BOOL;
        (*type_map)["STemplateBlueprintSubEntity/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/entityID"] = TYPE_UINT64;
        (*type_map)["STemplateBlueprintSubEntity/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["STemplateBlueprintSubEntity/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/entityIndex"] = TYPE_INT32;
        (*type_map)["STemplateBlueprintSubEntity/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateBlueprintSubEntity>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["ZSecuritySystemCameraConfiguration.SDeadBodyVisibleEscalationRule/m_NrGuardsToSend"] = TYPE_INT32;
        (*type_map)["TArray<ZSecuritySystemCameraConfiguration.SDeadBodyVisibleEscalationRule>/m_NrGuardsToSend"] = TYPE_INT32;
        (*type_map)["ZComponentCreator/m_sComponentName"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZComponentCreator>/m_sComponentName"] = TYPE_ZSTRING;
        (*type_map)["SStashPointSaveData/m_pSuitcase"] = TYPE_UINT32;
        (*type_map)["TArray<SStashPointSaveData>/m_pSuitcase"] = TYPE_UINT32;
        (*type_map)["SStashPointSaveData/m_pMainItem"] = TYPE_UINT32;
        (*type_map)["TArray<SStashPointSaveData>/m_pMainItem"] = TYPE_UINT32;
        (*type_map)["SStashPointSaveData/m_eContainedType"] = TYPE_ENUM;
        (*type_map)["TArray<SStashPointSaveData>/m_eContainedType"] = TYPE_ENUM;
        (*type_map)["SComboDeviceBinding/type"] = TYPE_UINT32;
        (*type_map)["TArray<SComboDeviceBinding>/type"] = TYPE_UINT32;
        (*type_map)["SComboDeviceBinding/button"] = TYPE_UINT32;
        (*type_map)["TArray<SComboDeviceBinding>/button"] = TYPE_UINT32;
        (*type_map)["SActorSpreadTransitionOperatorMaterialSaveData/m_Actor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSpreadTransitionOperatorMaterialSaveData>/m_Actor"] = TYPE_UINT32;
        (*type_map)["SActorSpreadTransitionOperatorMaterialSaveData/m_fOpacity"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorSpreadTransitionOperatorMaterialSaveData>/m_fOpacity"] = TYPE_FLOAT32;
        (*type_map)["SSentryOrderSaveData/m_rSentryZone"] = TYPE_UINT32;
        (*type_map)["TArray<SSentryOrderSaveData>/m_rSentryZone"] = TYPE_UINT32;
        (*type_map)["SMathLerpSaveData_SVector4/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector4>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector4/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector4>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector4/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector4>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector4/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector4>/w"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector4/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector4>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector4/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector4>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector4/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector4>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector4/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector4>/w"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SVector4/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SVector4>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector4/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector4>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector4/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector4>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector4/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector4>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector4/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector4>/w"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector4/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector4>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector4/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector4>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector4/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector4>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector4/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector4>/w"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector4/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector4>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["ZSniperCombatSituation.SSniperSuspiciousArea/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZSniperCombatSituation.SSniperSuspiciousArea>/x"] = TYPE_FLOAT32;
        (*type_map)["ZSniperCombatSituation.SSniperSuspiciousArea/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZSniperCombatSituation.SSniperSuspiciousArea>/y"] = TYPE_FLOAT32;
        (*type_map)["ZSniperCombatSituation.SSniperSuspiciousArea/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZSniperCombatSituation.SSniperSuspiciousArea>/z"] = TYPE_FLOAT32;
        (*type_map)["ZSniperCombatSituation.SSniperSuspiciousArea/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZSniperCombatSituation.SSniperSuspiciousArea>/w"] = TYPE_FLOAT32;
        (*type_map)["ZSniperCombatSituation.SSniperSuspiciousArea/m_fRange"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZSniperCombatSituation.SSniperSuspiciousArea>/m_fRange"] = TYPE_FLOAT32;
        (*type_map)["ZSniperCombatSituation.SSniperSuspiciousArea/m_bIsIslandEntrance"] = TYPE_BOOL;
        (*type_map)["TArray<ZSniperCombatSituation.SSniperSuspiciousArea>/m_bIsIslandEntrance"] = TYPE_BOOL;
        (*type_map)["SAgitatedBystanderOrderSaveData/m_rBystanderPoint"] = TYPE_UINT32;
        (*type_map)["TArray<SAgitatedBystanderOrderSaveData>/m_rBystanderPoint"] = TYPE_UINT32;
        (*type_map)["SAgitatedBystanderOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAgitatedBystanderOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SAgitatedBystanderOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAgitatedBystanderOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SAgitatedBystanderOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAgitatedBystanderOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SAgitatedBystanderOrderSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAgitatedBystanderOrderSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SAgitatedBystanderOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAgitatedBystanderOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SAgitatedBystanderOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAgitatedBystanderOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SAgitatedBystanderOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAgitatedBystanderOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SAgitatedBystanderOrderSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAgitatedBystanderOrderSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorAccessoryItemActionSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorAccessoryItemActionSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SGameStatsWeapon/m_eItemWeapon"] = TYPE_ENUM;
        (*type_map)["TArray<SGameStatsWeapon>/m_eItemWeapon"] = TYPE_ENUM;
        (*type_map)["SGameStatsWeapon/m_eSpecialSituation"] = TYPE_ENUM;
        (*type_map)["TArray<SGameStatsWeapon>/m_eSpecialSituation"] = TYPE_ENUM;
        (*type_map)["SGameStatsWeapon/m_eAmmoType"] = TYPE_ENUM;
        (*type_map)["TArray<SGameStatsWeapon>/m_eAmmoType"] = TYPE_ENUM;
        (*type_map)["SGUIViewPort/x"] = TYPE_UINT32;
        (*type_map)["TArray<SGUIViewPort>/x"] = TYPE_UINT32;
        (*type_map)["SGUIViewPort/y"] = TYPE_UINT32;
        (*type_map)["TArray<SGUIViewPort>/y"] = TYPE_UINT32;
        (*type_map)["SGUIViewPort/h"] = TYPE_UINT32;
        (*type_map)["TArray<SGUIViewPort>/h"] = TYPE_UINT32;
        (*type_map)["SGUIViewPort/w"] = TYPE_UINT32;
        (*type_map)["TArray<SGUIViewPort>/w"] = TYPE_UINT32;
        (*type_map)["SShotListenersSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SShotListenersSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SShotListenersSaveData/m_bNPCShotProcessed"] = TYPE_BOOL;
        (*type_map)["TArray<SShotListenersSaveData>/m_bNPCShotProcessed"] = TYPE_BOOL;
        (*type_map)["SBoneTransformSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBoneTransformSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SBoneTransformSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBoneTransformSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SBoneTransformSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBoneTransformSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SBoneTransformSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBoneTransformSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SBoneTransformSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBoneTransformSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SBoneTransformSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBoneTransformSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SBoneTransformSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBoneTransformSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SBoneTransformSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBoneTransformSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorProviderApproachSaveData/m_rCastActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorProviderApproachSaveData>/m_rCastActor"] = TYPE_UINT32;
        (*type_map)["SBodyContainersSaveData/m_eBCState"] = TYPE_ENUM;
        (*type_map)["TArray<SBodyContainersSaveData>/m_eBCState"] = TYPE_ENUM;
        (*type_map)["SBodyContainersSaveData/m_fLidAutoCloseTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyContainersSaveData>/m_fLidAutoCloseTime"] = TYPE_FLOAT32;
        (*type_map)["SBodyContainersSaveData/m_fLidOpenFraction"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyContainersSaveData>/m_fLidOpenFraction"] = TYPE_FLOAT32;
        (*type_map)["SBodyContainersSaveData/m_bFrameUpdateActive"] = TYPE_BOOL;
        (*type_map)["TArray<SBodyContainersSaveData>/m_bFrameUpdateActive"] = TYPE_BOOL;
        (*type_map)["SOnlineSaveData/m_sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SOnlineSaveData>/m_sName"] = TYPE_ZSTRING;
        (*type_map)["SOnlineSaveData/m_nTimeStamp"] = TYPE_INT64;
        (*type_map)["TArray<SOnlineSaveData>/m_nTimeStamp"] = TYPE_INT64;
        (*type_map)["SOnlineSaveData/m_bIsOnline"] = TYPE_BOOL;
        (*type_map)["TArray<SOnlineSaveData>/m_bIsOnline"] = TYPE_BOOL;
        (*type_map)["SOnlineSaveData/m_sContractSessionId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SOnlineSaveData>/m_sContractSessionId"] = TYPE_ZSTRING;
        (*type_map)["SOnlineSaveData/m_sLastEventToken"] = TYPE_ZSTRING;
        (*type_map)["TArray<SOnlineSaveData>/m_sLastEventToken"] = TYPE_ZSTRING;
        (*type_map)["SMathLerpsSaveData_SVector3/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector3>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector3/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector3>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector3/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector3>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector3/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector3>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector3/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector3>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector3/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector3>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SVector3/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SVector3>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["ZDeadBodySituation.SIncidentSaveData/m_body"] = TYPE_UINT32;
        (*type_map)["TArray<ZDeadBodySituation.SIncidentSaveData>/m_body"] = TYPE_UINT32;
        (*type_map)["ZDeadBodySituation.SIncidentSaveData/m_bAccident"] = TYPE_BOOL;
        (*type_map)["TArray<ZDeadBodySituation.SIncidentSaveData>/m_bAccident"] = TYPE_BOOL;
        (*type_map)["SHUDTimerControllerSaveData/m_pCurrentInstance"] = TYPE_UINT32;
        (*type_map)["TArray<SHUDTimerControllerSaveData>/m_pCurrentInstance"] = TYPE_UINT32;
        (*type_map)["SDangerousAreaSaveData/m_bDangerous"] = TYPE_BOOL;
        (*type_map)["TArray<SDangerousAreaSaveData>/m_bDangerous"] = TYPE_BOOL;
        (*type_map)["SLampCoreSaveState/m_fDiffusePower"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLampCoreSaveState>/m_fDiffusePower"] = TYPE_FLOAT32;
        (*type_map)["SLampCoreSaveState/m_bSwitchState"] = TYPE_BOOL;
        (*type_map)["TArray<SLampCoreSaveState>/m_bSwitchState"] = TYPE_BOOL;
        (*type_map)["SLampCoreSaveData/m_fDiffusePower"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLampCoreSaveData>/m_fDiffusePower"] = TYPE_FLOAT32;
        (*type_map)["SLampCoreSaveData/m_bSwitchState"] = TYPE_BOOL;
        (*type_map)["TArray<SLampCoreSaveData>/m_bSwitchState"] = TYPE_BOOL;
        (*type_map)["SSecuritySystemCameraSaveData/m_nEscalation"] = TYPE_UINT16;
        (*type_map)["TArray<SSecuritySystemCameraSaveData>/m_nEscalation"] = TYPE_UINT16;
        (*type_map)["SSecuritySystemCameraSaveData/m_bIsFunctional"] = TYPE_BOOL;
        (*type_map)["TArray<SSecuritySystemCameraSaveData>/m_bIsFunctional"] = TYPE_BOOL;
        (*type_map)["SSecuritySystemCameraSaveData/m_bHasEnteredOnce"] = TYPE_BOOL;
        (*type_map)["TArray<SSecuritySystemCameraSaveData>/m_bHasEnteredOnce"] = TYPE_BOOL;
        (*type_map)["SSecuritySystemCameraSaveData/m_bWasInvestigated"] = TYPE_BOOL;
        (*type_map)["TArray<SSecuritySystemCameraSaveData>/m_bWasInvestigated"] = TYPE_BOOL;
        (*type_map)["SSecuritySystemCameraSaveData/m_bDestroyed"] = TYPE_BOOL;
        (*type_map)["TArray<SSecuritySystemCameraSaveData>/m_bDestroyed"] = TYPE_BOOL;
        (*type_map)["SRotateEntitySaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SRotateEntitySaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SRotateEntitySaveData/m_fXAxisSpeed"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRotateEntitySaveData>/m_fXAxisSpeed"] = TYPE_FLOAT32;
        (*type_map)["SRotateEntitySaveData/m_fYAxisSpeed"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRotateEntitySaveData>/m_fYAxisSpeed"] = TYPE_FLOAT32;
        (*type_map)["SRotateEntitySaveData/m_fZAxisSpeed"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRotateEntitySaveData>/m_fZAxisSpeed"] = TYPE_FLOAT32;
        (*type_map)["ZPhotoModeMenuDataProvider.SMenuEntry/sLabel"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZPhotoModeMenuDataProvider.SMenuEntry>/sLabel"] = TYPE_ZSTRING;
        (*type_map)["ZPhotoModeMenuDataProvider.SMenuEntry/bIsEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<ZPhotoModeMenuDataProvider.SMenuEntry>/bIsEnabled"] = TYPE_BOOL;
        (*type_map)["ZPhotoModeMenuDataProvider.SMenuEntry/bIsHighlighted"] = TYPE_BOOL;
        (*type_map)["TArray<ZPhotoModeMenuDataProvider.SMenuEntry>/bIsHighlighted"] = TYPE_BOOL;
        (*type_map)["SSpeakEntitySaveData/m_fSeekPosition"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSpeakEntitySaveData>/m_fSeekPosition"] = TYPE_FLOAT32;
        (*type_map)["SCombatOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCombatOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCombatOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCombatOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCombatOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCombatOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCombatOrderSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCombatOrderSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCombatOrderSaveData/m_coverPlane"] = TYPE_UINT32;
        (*type_map)["TArray<SCombatOrderSaveData>/m_coverPlane"] = TYPE_UINT32;
        (*type_map)["SCombatOrderSaveData/m_rInteraction"] = TYPE_UINT32;
        (*type_map)["TArray<SCombatOrderSaveData>/m_rInteraction"] = TYPE_UINT32;
        (*type_map)["SHintEntrySaveData/m_bIsValid"] = TYPE_BOOL;
        (*type_map)["TArray<SHintEntrySaveData>/m_bIsValid"] = TYPE_BOOL;
        (*type_map)["SHintEntrySaveData/m_hint"] = TYPE_UINT32;
        (*type_map)["TArray<SHintEntrySaveData>/m_hint"] = TYPE_UINT32;
        (*type_map)["SHintEntrySaveData/m_context"] = TYPE_UINT32;
        (*type_map)["TArray<SHintEntrySaveData>/m_context"] = TYPE_UINT32;
        (*type_map)["SHintManagerSaveData/m_bIsValid"] = TYPE_BOOL;
        (*type_map)["TArray<SHintManagerSaveData>/m_bIsValid"] = TYPE_BOOL;
        (*type_map)["SHintManagerSaveData/m_hint"] = TYPE_UINT32;
        (*type_map)["TArray<SHintManagerSaveData>/m_hint"] = TYPE_UINT32;
        (*type_map)["SHintManagerSaveData/m_context"] = TYPE_UINT32;
        (*type_map)["TArray<SHintManagerSaveData>/m_context"] = TYPE_UINT32;
        (*type_map)["SHintManagerSaveData/m_bIsValid"] = TYPE_BOOL;
        (*type_map)["TArray<SHintManagerSaveData>/m_bIsValid"] = TYPE_BOOL;
        (*type_map)["SHintManagerSaveData/m_hint"] = TYPE_UINT32;
        (*type_map)["TArray<SHintManagerSaveData>/m_hint"] = TYPE_UINT32;
        (*type_map)["SHintManagerSaveData/m_context"] = TYPE_UINT32;
        (*type_map)["TArray<SHintManagerSaveData>/m_context"] = TYPE_UINT32;
        (*type_map)["SHintManagerSaveData/m_bIsRunning"] = TYPE_BOOL;
        (*type_map)["TArray<SHintManagerSaveData>/m_bIsRunning"] = TYPE_BOOL;
        (*type_map)["ZHM5FaceFXReactionEventConsumer.SFaceFXEventData/m_nEvent"] = TYPE_ENUM;
        (*type_map)["TArray<ZHM5FaceFXReactionEventConsumer.SFaceFXEventData>/m_nEvent"] = TYPE_ENUM;
        (*type_map)["SCppEntity/blueprintIndexInResourceHeader"] = TYPE_INT32;
        (*type_map)["TArray<SCppEntity>/blueprintIndexInResourceHeader"] = TYPE_INT32;
        (*type_map)["SCppEntity/nPropertyID"] = TYPE_UINT32;
        (*type_map)["TArray<SCppEntity>/nPropertyID"] = TYPE_UINT32;
        (*type_map)["SCppEntity/value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SCppEntity>/value"] = TYPE_ZVARIANT;
        (*type_map)["SClothWireEntitySaveData/m_fWireLength"] = TYPE_FLOAT32;
        (*type_map)["TArray<SClothWireEntitySaveData>/m_fWireLength"] = TYPE_FLOAT32;
        (*type_map)["SClothWireEntitySaveData/m_bAttachToAnchorTransform"] = TYPE_BOOL;
        (*type_map)["TArray<SClothWireEntitySaveData>/m_bAttachToAnchorTransform"] = TYPE_BOOL;
        (*type_map)["SClothWireEntitySaveData/m_bSimulationEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SClothWireEntitySaveData>/m_bSimulationEnabled"] = TYPE_BOOL;
        (*type_map)["SClothWireEntitySaveData/m_bVisible"] = TYPE_BOOL;
        (*type_map)["TArray<SClothWireEntitySaveData>/m_bVisible"] = TYPE_BOOL;
        (*type_map)["SParticleEmitterSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SParticleEmitterSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SParticleEmitterSaveData/m_bIsActivated"] = TYPE_BOOL;
        (*type_map)["TArray<SParticleEmitterSaveData>/m_bIsActivated"] = TYPE_BOOL;
        (*type_map)["SParticleEmitterSaveData/m_bIsVisible"] = TYPE_BOOL;
        (*type_map)["TArray<SParticleEmitterSaveData>/m_bIsVisible"] = TYPE_BOOL;
        (*type_map)["SParticleEmitterSaveData/m_fEmissionTimeLeft"] = TYPE_FLOAT32;
        (*type_map)["TArray<SParticleEmitterSaveData>/m_fEmissionTimeLeft"] = TYPE_FLOAT32;
        (*type_map)["SParticleEmitterSaveData/m_fEmissionTimeFraction"] = TYPE_FLOAT32;
        (*type_map)["TArray<SParticleEmitterSaveData>/m_fEmissionTimeFraction"] = TYPE_FLOAT32;
        (*type_map)["SParticleEmitterSaveData/m_fEmissionCntLeft"] = TYPE_FLOAT32;
        (*type_map)["TArray<SParticleEmitterSaveData>/m_fEmissionCntLeft"] = TYPE_FLOAT32;
        (*type_map)["SBoneAttachSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SBoneAttachSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SBoneAttachSaveData/m_bIsAttached"] = TYPE_BOOL;
        (*type_map)["TArray<SBoneAttachSaveData>/m_bIsAttached"] = TYPE_BOOL;
        (*type_map)["SGameplayRenderablesSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SGameplayRenderablesSaveData/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/r"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/g"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/b"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_fDiffusePower"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fDiffusePower"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_fAspectXByY_Actual"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fAspectXByY_Actual"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_bVisible"] = TYPE_BOOL;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_bVisible"] = TYPE_BOOL;
        (*type_map)["SGameplayRenderablesSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SGameplayRenderablesSaveData/m_bActive"] = TYPE_BOOL;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_bActive"] = TYPE_BOOL;
        (*type_map)["SGameplayRenderablesSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SGameplayRenderablesSaveData/m_bIsActivated"] = TYPE_BOOL;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_bIsActivated"] = TYPE_BOOL;
        (*type_map)["SGameplayRenderablesSaveData/m_bIsVisible"] = TYPE_BOOL;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_bIsVisible"] = TYPE_BOOL;
        (*type_map)["SGameplayRenderablesSaveData/m_fEmissionTimeLeft"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fEmissionTimeLeft"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_fEmissionTimeFraction"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fEmissionTimeFraction"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_fEmissionCntLeft"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fEmissionCntLeft"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SGameplayRenderablesSaveData/m_bIsAttached"] = TYPE_BOOL;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_bIsAttached"] = TYPE_BOOL;
        (*type_map)["SGameplayRenderablesSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SGameplayRenderablesSaveData/m_bDepthOfFieldEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_bDepthOfFieldEnabled"] = TYPE_BOOL;
        (*type_map)["SGameplayRenderablesSaveData/m_fDepthOfFieldBlurriness"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fDepthOfFieldBlurriness"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_bRadialBlurEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_bRadialBlurEnabled"] = TYPE_BOOL;
        (*type_map)["SGameplayRenderablesSaveData/m_fRadialBlurriness"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fRadialBlurriness"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_fRadialBlurStart"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fRadialBlurStart"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_bSpatialBlurEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_bSpatialBlurEnabled"] = TYPE_BOOL;
        (*type_map)["SGameplayRenderablesSaveData/m_fSpatialBlurriness"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fSpatialBlurriness"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_fSpatialBlurStart"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fSpatialBlurStart"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_fSpatialBlurFade"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fSpatialBlurFade"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_bDistortionWobbleEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_bDistortionWobbleEnabled"] = TYPE_BOOL;
        (*type_map)["SGameplayRenderablesSaveData/m_fDistortionWobbleScale"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fDistortionWobbleScale"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_bDistortionWobbleUseRealTime"] = TYPE_BOOL;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_bDistortionWobbleUseRealTime"] = TYPE_BOOL;
        (*type_map)["SGameplayRenderablesSaveData/m_bHDRActive"] = TYPE_BOOL;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_bHDRActive"] = TYPE_BOOL;
        (*type_map)["SGameplayRenderablesSaveData/m_bHDREnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_bHDREnabled"] = TYPE_BOOL;
        (*type_map)["SGameplayRenderablesSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_fHDRWhitePoint"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fHDRWhitePoint"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_fHDRBrightPassThreshold"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fHDRBrightPassThreshold"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_fHDRBrightPassMaxPercentage"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fHDRBrightPassMaxPercentage"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/r"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/g"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/b"] = TYPE_FLOAT32;
        (*type_map)["SGameplayRenderablesSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SGameplayRenderablesSaveData/m_bIsOpen"] = TYPE_BOOL;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_bIsOpen"] = TYPE_BOOL;
        (*type_map)["SGameplayRenderablesSaveData/m_fOpenFraction"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameplayRenderablesSaveData>/m_fOpenFraction"] = TYPE_FLOAT32;
        (*type_map)["ZHM5ItemInteractionEventConsumer.SItemInteractionEventData/m_nEvent"] = TYPE_ENUM;
        (*type_map)["TArray<ZHM5ItemInteractionEventConsumer.SItemInteractionEventData>/m_nEvent"] = TYPE_ENUM;
        (*type_map)["SItsATrapSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SItsATrapSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SItsATrapSaveData/m_fTimer"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItsATrapSaveData>/m_fTimer"] = TYPE_FLOAT32;
        (*type_map)["SMovementLocomotionSaveData/m_bIsSneaking"] = TYPE_BOOL;
        (*type_map)["TArray<SMovementLocomotionSaveData>/m_bIsSneaking"] = TYPE_BOOL;
        (*type_map)["SEventSaveData/m_nType"] = TYPE_ENUM;
        (*type_map)["TArray<SEventSaveData>/m_nType"] = TYPE_ENUM;
        (*type_map)["SEventSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEventSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEventSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEventSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SSharedKnowledgeSaveData/m_rEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/m_rEntity"] = TYPE_UINT32;
        (*type_map)["SSharedKnowledgeSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SSharedKnowledgeSaveData/m_nType"] = TYPE_ENUM;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/m_nType"] = TYPE_ENUM;
        (*type_map)["SSharedKnowledgeSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SSharedKnowledgeSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SSharedKnowledgeSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SSituationMemberSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SSituationMemberSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SSituationMemberSaveData/m_eJoinReason"] = TYPE_ENUM;
        (*type_map)["TArray<SSituationMemberSaveData>/m_eJoinReason"] = TYPE_ENUM;
        (*type_map)["SSituationMemberSaveData/m_bIsOrderValid"] = TYPE_BOOL;
        (*type_map)["TArray<SSituationMemberSaveData>/m_bIsOrderValid"] = TYPE_BOOL;
        (*type_map)["SSituationMemberSaveData/m_OrderData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSituationMemberSaveData>/m_OrderData"] = TYPE_ZVARIANT;
        (*type_map)["SSituationMemberSaveData/m_PendingOrderData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSituationMemberSaveData>/m_PendingOrderData"] = TYPE_ZVARIANT;
        (*type_map)["SSituationMemberSaveData/m_rDramaRole"] = TYPE_UINT32;
        (*type_map)["TArray<SSituationMemberSaveData>/m_rDramaRole"] = TYPE_UINT32;
        (*type_map)["SSituationMemberSaveData/m_CustomData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSituationMemberSaveData>/m_CustomData"] = TYPE_ZVARIANT;
        (*type_map)["SSituationSaveData/m_rSituation"] = TYPE_UINT32;
        (*type_map)["TArray<SSituationSaveData>/m_rSituation"] = TYPE_UINT32;
        (*type_map)["SSituationSaveData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<SSituationSaveData>/m_eType"] = TYPE_ENUM;
        (*type_map)["SSituationSaveData/m_nTargetSharedEntity"] = TYPE_INT32;
        (*type_map)["TArray<SSituationSaveData>/m_nTargetSharedEntity"] = TYPE_INT32;
        (*type_map)["SSituationSaveData/m_Data"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSituationSaveData>/m_Data"] = TYPE_ZVARIANT;
        (*type_map)["SSituationSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SSituationSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SSituationSaveData/m_eJoinReason"] = TYPE_ENUM;
        (*type_map)["TArray<SSituationSaveData>/m_eJoinReason"] = TYPE_ENUM;
        (*type_map)["SSituationSaveData/m_bIsOrderValid"] = TYPE_BOOL;
        (*type_map)["TArray<SSituationSaveData>/m_bIsOrderValid"] = TYPE_BOOL;
        (*type_map)["SSituationSaveData/m_OrderData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSituationSaveData>/m_OrderData"] = TYPE_ZVARIANT;
        (*type_map)["SSituationSaveData/m_PendingOrderData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSituationSaveData>/m_PendingOrderData"] = TYPE_ZVARIANT;
        (*type_map)["SSituationSaveData/m_rDramaRole"] = TYPE_UINT32;
        (*type_map)["TArray<SSituationSaveData>/m_rDramaRole"] = TYPE_UINT32;
        (*type_map)["SSituationSaveData/m_CustomData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSituationSaveData>/m_CustomData"] = TYPE_ZVARIANT;
        (*type_map)["SSituationSaveData/m_sClassTypeName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSituationSaveData>/m_sClassTypeName"] = TYPE_ZSTRING;
        (*type_map)["SSituationSaveData/m_nSituation"] = TYPE_UINT32;
        (*type_map)["TArray<SSituationSaveData>/m_nSituation"] = TYPE_UINT32;
        (*type_map)["SSituationSaveData/m_nGroupID"] = TYPE_INT32;
        (*type_map)["TArray<SSituationSaveData>/m_nGroupID"] = TYPE_INT32;
        (*type_map)["SSituationSaveData/m_CustomData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSituationSaveData>/m_CustomData"] = TYPE_ZVARIANT;
        (*type_map)["SSituationSaveData/m_nNextGroupID"] = TYPE_INT32;
        (*type_map)["TArray<SSituationSaveData>/m_nNextGroupID"] = TYPE_INT32;
        (*type_map)["SSituationSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SSituationSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SSituationSaveData/m_bSituationEnded"] = TYPE_BOOL;
        (*type_map)["TArray<SSituationSaveData>/m_bSituationEnded"] = TYPE_BOOL;
        (*type_map)["SSniperCombatGroupSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SSniperCombatGroupSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SSniperCombatGroupSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SSniperCombatGroupSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SSniperCombatGroupSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SSniperCombatGroupSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SSniperCombatGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SSniperCombatGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SSniperCombatGroupSaveData/m_target"] = TYPE_INT32;
        (*type_map)["TArray<SSniperCombatGroupSaveData>/m_target"] = TYPE_INT32;
        (*type_map)["SSniperCombatGroupSaveData/m_bFailed"] = TYPE_BOOL;
        (*type_map)["TArray<SSniperCombatGroupSaveData>/m_bFailed"] = TYPE_BOOL;
        (*type_map)["SSniperCombatGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SSniperCombatGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SSniperCombatGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SSniperCombatGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SMovementCoverSaveData/m_rCoverPlane"] = TYPE_UINT32;
        (*type_map)["TArray<SMovementCoverSaveData>/m_rCoverPlane"] = TYPE_UINT32;
        (*type_map)["SMovementCoverSaveData/m_nCoverAnimNodeID"] = TYPE_UINT32;
        (*type_map)["TArray<SMovementCoverSaveData>/m_nCoverAnimNodeID"] = TYPE_UINT32;
        (*type_map)["SMovementCoverSaveData/m_bLeftSideFacing"] = TYPE_BOOL;
        (*type_map)["TArray<SMovementCoverSaveData>/m_bLeftSideFacing"] = TYPE_BOOL;
        (*type_map)["SMovementCoverSaveData/m_bCrouched"] = TYPE_BOOL;
        (*type_map)["TArray<SMovementCoverSaveData>/m_bCrouched"] = TYPE_BOOL;
        (*type_map)["SMovementCoverSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SMovementCoverSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SMovementCoverSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SMovementCoverSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SMovementCoverSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SMovementCoverSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SMovementCoverSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SMovementCoverSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SMovementCoverSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SMovementCoverSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SMovementCoverSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SMovementCoverSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SMovementCoverSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SMovementCoverSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SMovementCoverSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SMovementCoverSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMovementCoverSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["ZEntityID/m_sStr"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZEntityID>/m_sStr"] = TYPE_ZSTRING;
        (*type_map)["ZGridFloatField/m_fInitialValue"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZGridFloatField>/m_fInitialValue"] = TYPE_FLOAT32;
        (*type_map)["SCrowdActivitySaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SCrowdActivitySaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SCrowdActivitySaveData/m_eGait"] = TYPE_ENUM;
        (*type_map)["TArray<SCrowdActivitySaveData>/m_eGait"] = TYPE_ENUM;
        (*type_map)["SCrowdActivitySaveData/m_nMaxEnterDelaySec"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdActivitySaveData>/m_nMaxEnterDelaySec"] = TYPE_FLOAT32;
        (*type_map)["SCrowdActivitySaveData/m_nMaxLeaveDelaySec"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdActivitySaveData>/m_nMaxLeaveDelaySec"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector4/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector4>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector4/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector4>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector4/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector4>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector4/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector4>/w"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector4/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector4>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector4/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector4>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector4/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector4>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector4/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector4>/w"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector4/m_bDivide"] = TYPE_BOOL;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector4>/m_bDivide"] = TYPE_BOOL;
        (*type_map)["S25DProjectionSettingsCurveEntry/fDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettingsCurveEntry>/fDistance"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettingsCurveEntry/fValue"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettingsCurveEntry>/fValue"] = TYPE_FLOAT32;
        (*type_map)["IContractObjective.SCounterData/m_sHeader"] = TYPE_ZSTRING;
        (*type_map)["TArray<IContractObjective.SCounterData>/m_sHeader"] = TYPE_ZSTRING;
        (*type_map)["IContractObjective.SCounterData/m_nCount"] = TYPE_INT32;
        (*type_map)["TArray<IContractObjective.SCounterData>/m_nCount"] = TYPE_INT32;
        (*type_map)["IContractObjective.SCounterData/m_nDeactivate"] = TYPE_INT32;
        (*type_map)["TArray<IContractObjective.SCounterData>/m_nDeactivate"] = TYPE_INT32;
        (*type_map)["IContractObjective.SCounterData/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<IContractObjective.SCounterData>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["IContractObjective.SCounterData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<IContractObjective.SCounterData>/m_eType"] = TYPE_ENUM;
        (*type_map)["SMovementDragBodySaveData/m_rDraggedActor"] = TYPE_UINT32;
        (*type_map)["TArray<SMovementDragBodySaveData>/m_rDraggedActor"] = TYPE_UINT32;
        (*type_map)["SMovementDragBodySaveData/m_nGrabBoneID"] = TYPE_UINT32;
        (*type_map)["TArray<SMovementDragBodySaveData>/m_nGrabBoneID"] = TYPE_UINT32;
        (*type_map)["SMathLerpSaveData_float32/m_A"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_float32>/m_A"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_float32/m_B"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_float32>/m_B"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_float32/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_float32>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["SManHuntServiceSaveData/m_rInitialNode"] = TYPE_UINT16;
        (*type_map)["TArray<SManHuntServiceSaveData>/m_rInitialNode"] = TYPE_UINT16;
        (*type_map)["SManHuntServiceSaveData/m_fGuardSightRange"] = TYPE_FLOAT32;
        (*type_map)["TArray<SManHuntServiceSaveData>/m_fGuardSightRange"] = TYPE_FLOAT32;
        (*type_map)["ZUIMapLegendDataProvider.SLegendTracker/ControlName"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIMapLegendDataProvider.SLegendTracker>/ControlName"] = TYPE_ZSTRING;
        (*type_map)["SFootIKEventData/m_Foot"] = TYPE_ENUM;
        (*type_map)["TArray<SFootIKEventData>/m_Foot"] = TYPE_ENUM;
        (*type_map)["SEventChannelSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SEventChannelSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SCCEffectSet/m_eDecalEffect"] = TYPE_ENUM;
        (*type_map)["TArray<SCCEffectSet>/m_eDecalEffect"] = TYPE_ENUM;
        (*type_map)["SCCEffectSet/m_eEmitterEffect"] = TYPE_ENUM;
        (*type_map)["TArray<SCCEffectSet>/m_eEmitterEffect"] = TYPE_ENUM;
        (*type_map)["SHeroStandInSaveState/m_rHero"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroStandInSaveState>/m_rHero"] = TYPE_UINT32;
        (*type_map)["SHeroStandInSaveState/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroStandInSaveState>/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["SHeroStandInSaveState/m_bPaused"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroStandInSaveState>/m_bPaused"] = TYPE_BOOL;
        (*type_map)["AI.SSoundEventModifierState/m_fRangeModifier"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SSoundEventModifierState>/m_fRangeModifier"] = TYPE_FLOAT32;
        (*type_map)["AI.SSoundEventModifierState/m_fLoudnessModifier"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SSoundEventModifierState>/m_fLoudnessModifier"] = TYPE_FLOAT32;
        (*type_map)["SActionRadialArcDisplayInfo/hidden"] = TYPE_BOOL;
        (*type_map)["TArray<SActionRadialArcDisplayInfo>/hidden"] = TYPE_BOOL;
        (*type_map)["SActionRadialArcDisplayInfo/locked"] = TYPE_BOOL;
        (*type_map)["TArray<SActionRadialArcDisplayInfo>/locked"] = TYPE_BOOL;
        (*type_map)["SActionRadialArcDisplayInfo/active"] = TYPE_BOOL;
        (*type_map)["TArray<SActionRadialArcDisplayInfo>/active"] = TYPE_BOOL;
        (*type_map)["SActionRadialArcDisplayInfo/illegal"] = TYPE_BOOL;
        (*type_map)["TArray<SActionRadialArcDisplayInfo>/illegal"] = TYPE_BOOL;
        (*type_map)["SActionRadialArcDisplayInfo/icon"] = TYPE_INT32;
        (*type_map)["TArray<SActionRadialArcDisplayInfo>/icon"] = TYPE_INT32;
        (*type_map)["SActionRadialArcDisplayInfo/label"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActionRadialArcDisplayInfo>/label"] = TYPE_ZSTRING;
        (*type_map)["SBodybagBoneSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagBoneSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SBodybagBoneSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagBoneSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SBodybagBoneSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagBoneSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SBodybagBoneSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagBoneSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SBodybagBoneSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagBoneSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SBodybagBoneSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagBoneSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SBodybagBoneSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagBoneSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SBodybagBoneSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagBoneSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SAIPerceptibleEntitySaveData/m_bPerceptibleEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SAIPerceptibleEntitySaveData>/m_bPerceptibleEnabled"] = TYPE_BOOL;
        (*type_map)["SDecalSpawnSaveData/m_bWasSpawned"] = TYPE_BOOL;
        (*type_map)["TArray<SDecalSpawnSaveData>/m_bWasSpawned"] = TYPE_BOOL;
        (*type_map)["SDecalSpawnSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/r"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/g"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/b"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/m_fAlpha"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/m_fAlpha"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/m_fAngle"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/m_fAngle"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SDecalSpawnSaveData/m_rBlockingSpatialEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SDecalSpawnSaveData>/m_rBlockingSpatialEntity"] = TYPE_UINT32;
        (*type_map)["ZFormationMoveOrder.SFormationMoveOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZFormationMoveOrder.SFormationMoveOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["ZFormationMoveOrder.SFormationMoveOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZFormationMoveOrder.SFormationMoveOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["ZFormationMoveOrder.SFormationMoveOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZFormationMoveOrder.SFormationMoveOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["ZFormationMoveOrder.SFormationMoveOrderSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZFormationMoveOrder.SFormationMoveOrderSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["ZFormationMoveOrder.SFormationMoveOrderSaveData/m_nObstacleBlockageFlags"] = TYPE_UINT32;
        (*type_map)["TArray<ZFormationMoveOrder.SFormationMoveOrderSaveData>/m_nObstacleBlockageFlags"] = TYPE_UINT32;
        (*type_map)["ZFormationMoveOrder.SFormationMoveOrderSaveData/m_eMoveSpeed"] = TYPE_ENUM;
        (*type_map)["TArray<ZFormationMoveOrder.SFormationMoveOrderSaveData>/m_eMoveSpeed"] = TYPE_ENUM;
        (*type_map)["SClothBundleSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SClothBundleSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SClothBundleSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SClothBundleSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SClothBundleSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SClothBundleSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SClothBundleSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SClothBundleSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SClothBundleSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SClothBundleSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SClothBundleSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SClothBundleSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SClothBundleSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SClothBundleSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SClothBundleSaveData/m_nOutfitVariation"] = TYPE_INT32;
        (*type_map)["TArray<SClothBundleSaveData>/m_nOutfitVariation"] = TYPE_INT32;
        (*type_map)["SClothBundleSaveData/m_nOutfitCharset"] = TYPE_INT32;
        (*type_map)["TArray<SClothBundleSaveData>/m_nOutfitCharset"] = TYPE_INT32;
        (*type_map)["SClothBundleSaveData/bSpawnedByHitman"] = TYPE_BOOL;
        (*type_map)["TArray<SClothBundleSaveData>/bSpawnedByHitman"] = TYPE_BOOL;
        (*type_map)["SBodyPartDamageMultipliers/m_fHeadDamageMultiplier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyPartDamageMultipliers>/m_fHeadDamageMultiplier"] = TYPE_FLOAT32;
        (*type_map)["SBodyPartDamageMultipliers/m_fFaceDamageMultiplier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyPartDamageMultipliers>/m_fFaceDamageMultiplier"] = TYPE_FLOAT32;
        (*type_map)["SBodyPartDamageMultipliers/m_fArmDamageMultiplier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyPartDamageMultipliers>/m_fArmDamageMultiplier"] = TYPE_FLOAT32;
        (*type_map)["SBodyPartDamageMultipliers/m_fLArmDamageScalar"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyPartDamageMultipliers>/m_fLArmDamageScalar"] = TYPE_FLOAT32;
        (*type_map)["SBodyPartDamageMultipliers/m_fRArmDamageScalar"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyPartDamageMultipliers>/m_fRArmDamageScalar"] = TYPE_FLOAT32;
        (*type_map)["SBodyPartDamageMultipliers/m_fHandDamageMultiplier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyPartDamageMultipliers>/m_fHandDamageMultiplier"] = TYPE_FLOAT32;
        (*type_map)["SBodyPartDamageMultipliers/m_fLHandDamageScalar"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyPartDamageMultipliers>/m_fLHandDamageScalar"] = TYPE_FLOAT32;
        (*type_map)["SBodyPartDamageMultipliers/m_fRHandDamageScalar"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyPartDamageMultipliers>/m_fRHandDamageScalar"] = TYPE_FLOAT32;
        (*type_map)["SBodyPartDamageMultipliers/m_fLegDamageMultiplier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyPartDamageMultipliers>/m_fLegDamageMultiplier"] = TYPE_FLOAT32;
        (*type_map)["SBodyPartDamageMultipliers/m_fLLegDamageScalar"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyPartDamageMultipliers>/m_fLLegDamageScalar"] = TYPE_FLOAT32;
        (*type_map)["SBodyPartDamageMultipliers/m_fRLegDamageScalar"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyPartDamageMultipliers>/m_fRLegDamageScalar"] = TYPE_FLOAT32;
        (*type_map)["SBodyPartDamageMultipliers/m_fTorsoDamageMultiplier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodyPartDamageMultipliers>/m_fTorsoDamageMultiplier"] = TYPE_FLOAT32;
        (*type_map)["SBodyPartDamageMultipliers/m_bApplyLeftRightScalars"] = TYPE_BOOL;
        (*type_map)["TArray<SBodyPartDamageMultipliers>/m_bApplyLeftRightScalars"] = TYPE_BOOL;
        (*type_map)["SColorRGBSaveData/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SColorRGBSaveData>/r"] = TYPE_FLOAT32;
        (*type_map)["SColorRGBSaveData/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SColorRGBSaveData>/g"] = TYPE_FLOAT32;
        (*type_map)["SColorRGBSaveData/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SColorRGBSaveData>/b"] = TYPE_FLOAT32;
        (*type_map)["SStateControllerSaveDataStruct/m_nIndex"] = TYPE_INT32;
        (*type_map)["TArray<SStateControllerSaveDataStruct>/m_nIndex"] = TYPE_INT32;
        (*type_map)["SStateControllerSaveDataStruct/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SStateControllerSaveDataStruct>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SStateControllerSaveData/m_nIndex"] = TYPE_INT32;
        (*type_map)["TArray<SStateControllerSaveData>/m_nIndex"] = TYPE_INT32;
        (*type_map)["SStateControllerSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SStateControllerSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SValueSaveData/m_nIndex"] = TYPE_INT32;
        (*type_map)["TArray<SValueSaveData>/m_nIndex"] = TYPE_INT32;
        (*type_map)["SValueSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SValueSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SValueSaveData/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SValueSaveData>/r"] = TYPE_FLOAT32;
        (*type_map)["SValueSaveData/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SValueSaveData>/g"] = TYPE_FLOAT32;
        (*type_map)["SValueSaveData/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SValueSaveData>/b"] = TYPE_FLOAT32;
        (*type_map)["ZSharedSensorDef.SVisibilitySetting/m_eSensitivity"] = TYPE_ENUM;
        (*type_map)["TArray<ZSharedSensorDef.SVisibilitySetting>/m_eSensitivity"] = TYPE_ENUM;
        (*type_map)["ZSharedSensorDef.SVisibilitySetting/m_fCloseRange"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZSharedSensorDef.SVisibilitySetting>/m_fCloseRange"] = TYPE_FLOAT32;
        (*type_map)["ZSharedSensorDef.SVisibilitySetting/m_fPeripheralAngle"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZSharedSensorDef.SVisibilitySetting>/m_fPeripheralAngle"] = TYPE_FLOAT32;
        (*type_map)["ZSharedSensorDef.SVisibilitySetting/m_fPeripheralAngleWhileMoving"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZSharedSensorDef.SVisibilitySetting>/m_fPeripheralAngleWhileMoving"] = TYPE_FLOAT32;
        (*type_map)["ZSharedSensorDef.SVisibilitySetting/m_fPeripheralHigh"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZSharedSensorDef.SVisibilitySetting>/m_fPeripheralHigh"] = TYPE_FLOAT32;
        (*type_map)["ZSharedSensorDef.SVisibilitySetting/m_fPeripheralLow"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZSharedSensorDef.SVisibilitySetting>/m_fPeripheralLow"] = TYPE_FLOAT32;
        (*type_map)["ZSharedSensorDef.SVisibilitySetting/m_fFocusConeWidthAngle"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZSharedSensorDef.SVisibilitySetting>/m_fFocusConeWidthAngle"] = TYPE_FLOAT32;
        (*type_map)["ZSharedSensorDef.SVisibilitySetting/m_fFocusConeHeightAngle"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZSharedSensorDef.SVisibilitySetting>/m_fFocusConeHeightAngle"] = TYPE_FLOAT32;
        (*type_map)["ZSharedSensorDef.SVisibilitySetting/m_fFocusConeRange"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZSharedSensorDef.SVisibilitySetting>/m_fFocusConeRange"] = TYPE_FLOAT32;
        (*type_map)["ZSharedSensorDef.SVisibilitySetting/m_fFocusConeBackWidth"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZSharedSensorDef.SVisibilitySetting>/m_fFocusConeBackWidth"] = TYPE_FLOAT32;
        (*type_map)["SHeroItemActionSaveData/m_rItem"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroItemActionSaveData>/m_rItem"] = TYPE_UINT32;
        (*type_map)["SBodybagSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SBodybagSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SBodybagSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SBodybagSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SBodybagSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SBodybagSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SBodybagSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SBodybagSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SBodybagSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SBodybagSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SBodybagSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SBodybagSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SBodybagSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SBodybagSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SBodybagSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBodybagSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SBodybagSaveData/m_rDeadActor"] = TYPE_UINT32;
        (*type_map)["TArray<SBodybagSaveData>/m_rDeadActor"] = TYPE_UINT32;
        (*type_map)["SBodybagSaveData/m_IsInMorgue"] = TYPE_BOOL;
        (*type_map)["TArray<SBodybagSaveData>/m_IsInMorgue"] = TYPE_BOOL;
        (*type_map)["SAudioEmitterStateSaveData/m_nGroupId"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioEmitterStateSaveData>/m_nGroupId"] = TYPE_UINT32;
        (*type_map)["SAudioEmitterStateSaveData/m_nStateId"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioEmitterStateSaveData>/m_nStateId"] = TYPE_UINT32;
        (*type_map)["SEntityTemplatePinConnection/fromID"] = TYPE_INT32;
        (*type_map)["TArray<SEntityTemplatePinConnection>/fromID"] = TYPE_INT32;
        (*type_map)["SEntityTemplatePinConnection/toID"] = TYPE_INT32;
        (*type_map)["TArray<SEntityTemplatePinConnection>/toID"] = TYPE_INT32;
        (*type_map)["SEntityTemplatePinConnection/fromPinName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEntityTemplatePinConnection>/fromPinName"] = TYPE_ZSTRING;
        (*type_map)["SEntityTemplatePinConnection/toPinName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEntityTemplatePinConnection>/toPinName"] = TYPE_ZSTRING;
        (*type_map)["SEntityTemplatePinConnection/constantPinValue"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SEntityTemplatePinConnection>/constantPinValue"] = TYPE_ZVARIANT;
        (*type_map)["SEvacuateVIPGroupSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SEvacuateVIPGroupSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SEvacuateVIPGroupSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SEvacuateVIPGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEvacuateVIPGroupSaveData/m_rVIP"] = TYPE_UINT32;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_rVIP"] = TYPE_UINT32;
        (*type_map)["SEvacuateVIPGroupSaveData/m_rVIPActor"] = TYPE_UINT32;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_rVIPActor"] = TYPE_UINT32;
        (*type_map)["SEvacuateVIPGroupSaveData/m_rEvacuationNode"] = TYPE_UINT32;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_rEvacuationNode"] = TYPE_UINT32;
        (*type_map)["SEvacuateVIPGroupSaveData/m_rSafeRoomNode"] = TYPE_UINT32;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_rSafeRoomNode"] = TYPE_UINT32;
        (*type_map)["SEvacuateVIPGroupSaveData/m_rCompromisedEvacNode"] = TYPE_UINT32;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_rCompromisedEvacNode"] = TYPE_UINT32;
        (*type_map)["SEvacuateVIPGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEvacuateVIPGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEvacuateVIPGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEvacuateVIPGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEvacuateVIPGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEvacuateVIPGroupSaveData/m_bInitialFlee"] = TYPE_BOOL;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_bInitialFlee"] = TYPE_BOOL;
        (*type_map)["SEvacuateVIPGroupSaveData/m_safeRoomVIPSentActingStarted"] = TYPE_BOOL;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_safeRoomVIPSentActingStarted"] = TYPE_BOOL;
        (*type_map)["SEvacuateVIPGroupSaveData/m_isSetupPhaseComplete"] = TYPE_BOOL;
        (*type_map)["TArray<SEvacuateVIPGroupSaveData>/m_isSetupPhaseComplete"] = TYPE_BOOL;
        (*type_map)["ZJumpToOrder.SJumpToOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZJumpToOrder.SJumpToOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["ZJumpToOrder.SJumpToOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZJumpToOrder.SJumpToOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["ZJumpToOrder.SJumpToOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZJumpToOrder.SJumpToOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["ZJumpToOrder.SJumpToOrderSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZJumpToOrder.SJumpToOrderSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["ZJumpToOrder.SJumpToOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZJumpToOrder.SJumpToOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["ZJumpToOrder.SJumpToOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZJumpToOrder.SJumpToOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["ZJumpToOrder.SJumpToOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZJumpToOrder.SJumpToOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["ZJumpToOrder.SJumpToOrderSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZJumpToOrder.SJumpToOrderSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SWorldSpaceSettings/fCloseupDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWorldSpaceSettings>/fCloseupDistance"] = TYPE_FLOAT32;
        (*type_map)["SWorldSpaceSettings/fScale"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWorldSpaceSettings>/fScale"] = TYPE_FLOAT32;
        (*type_map)["SWorldSpaceSettings/bDynamicScale"] = TYPE_BOOL;
        (*type_map)["TArray<SWorldSpaceSettings>/bDynamicScale"] = TYPE_BOOL;
        (*type_map)["SWorldSpaceSettings/fDynamicScaleAlpha"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWorldSpaceSettings>/fDynamicScaleAlpha"] = TYPE_FLOAT32;
        (*type_map)["SWorldSpaceSettings/fDynamicScaleNearDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWorldSpaceSettings>/fDynamicScaleNearDistance"] = TYPE_FLOAT32;
        (*type_map)["SWorldSpaceSettings/fDynamicScaleBlendRange"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWorldSpaceSettings>/fDynamicScaleBlendRange"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fNearDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fNearDistance"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fFarDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fFarDistance"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fNearScale"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fNearScale"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fFarScale"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fFarScale"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fNearFov"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fNearFov"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fFarFov"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fFarFov"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fNearScaleFov"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fNearScaleFov"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fFarScaleFov"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fFarScaleFov"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fScaleFactor"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fScaleFactor"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fNearAlpha"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fNearAlpha"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fFarAlpha"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fFarAlpha"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fAlphaFactor"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fAlphaFactor"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fDistance"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fValue"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fValue"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fDistance"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fValue"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fValue"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/eViewportLock"] = TYPE_ENUM;
        (*type_map)["TArray<S25DProjectionSettings>/eViewportLock"] = TYPE_ENUM;
        (*type_map)["S25DProjectionSettings/fViewportGutter"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fViewportGutter"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fCloseupDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fCloseupDistance"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fScale"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fScale"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/bDynamicScale"] = TYPE_BOOL;
        (*type_map)["TArray<S25DProjectionSettings>/bDynamicScale"] = TYPE_BOOL;
        (*type_map)["S25DProjectionSettings/fDynamicScaleAlpha"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fDynamicScaleAlpha"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fDynamicScaleNearDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fDynamicScaleNearDistance"] = TYPE_FLOAT32;
        (*type_map)["S25DProjectionSettings/fDynamicScaleBlendRange"] = TYPE_FLOAT32;
        (*type_map)["TArray<S25DProjectionSettings>/fDynamicScaleBlendRange"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector2/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector2>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector2/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector2>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector2/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector2>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector2/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector2>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_SVector2/m_bDivide"] = TYPE_BOOL;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_SVector2>/m_bDivide"] = TYPE_BOOL;
        (*type_map)["SInventoryUISlot/label"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUISlot>/label"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUISlot/containedLabel"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUISlot>/containedLabel"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUISlot/description"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUISlot>/description"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUISlot/silencer"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUISlot>/silencer"] = TYPE_BOOL;
        (*type_map)["SInventoryUISlot/count"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUISlot>/count"] = TYPE_INT32;
        (*type_map)["SInventoryUISlot/ammo"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUISlot>/ammo"] = TYPE_INT32;
        (*type_map)["SInventoryUISlot/weaponCategory"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUISlot>/weaponCategory"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUISlot/nAmmoRemaining"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUISlot>/nAmmoRemaining"] = TYPE_INT32;
        (*type_map)["SInventoryUISlot/nAmmoTotal"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUISlot>/nAmmoTotal"] = TYPE_INT32;
        (*type_map)["SInventoryUISlot/nAmmoInClip"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUISlot>/nAmmoInClip"] = TYPE_INT32;
        (*type_map)["SInventoryUISlot/nWeaponType"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUISlot>/nWeaponType"] = TYPE_INT32;
        (*type_map)["SInventoryUISlot/nItemHUDType"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUISlot>/nItemHUDType"] = TYPE_INT32;
        (*type_map)["SInventoryUISlot/itemCategory"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUISlot>/itemCategory"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUISlot/itemCategoryLKey"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUISlot>/itemCategoryLKey"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUISlot/inventoryCategoryIcon"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUISlot>/inventoryCategoryIcon"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUISlot/isDroppable"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUISlot>/isDroppable"] = TYPE_BOOL;
        (*type_map)["SInventoryUISlot/isContainer"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUISlot>/isContainer"] = TYPE_BOOL;
        (*type_map)["SInventoryUISlot/containsItem"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUISlot>/containsItem"] = TYPE_BOOL;
        (*type_map)["SInventoryUISlot/nContainedItemHUDType"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUISlot>/nContainedItemHUDType"] = TYPE_INT32;
        (*type_map)["SInventoryUISlot/bContainedItemIllegal"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUISlot>/bContainedItemIllegal"] = TYPE_BOOL;
        (*type_map)["SInventoryUISlot/bContainedItemSuspicious"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUISlot>/bContainedItemSuspicious"] = TYPE_BOOL;
        (*type_map)["SInventoryUISlot/bContainedItemDetectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUISlot>/bContainedItemDetectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["SInventoryUISlot/detectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUISlot>/detectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["SInventoryUISlot/suspicious"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUISlot>/suspicious"] = TYPE_BOOL;
        (*type_map)["SInventoryUISlot/illegal"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUISlot>/illegal"] = TYPE_BOOL;
        (*type_map)["SInventoryUISlot/canReload"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUISlot>/canReload"] = TYPE_BOOL;
        (*type_map)["SInventoryUISlot/sPoisonType"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUISlot>/sPoisonType"] = TYPE_ZSTRING;
        (*type_map)["SVisibilitySaveData/m_bIsVisible"] = TYPE_BOOL;
        (*type_map)["TArray<SVisibilitySaveData>/m_bIsVisible"] = TYPE_BOOL;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/label"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/label"] = TYPE_ZSTRING;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/containedLabel"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/containedLabel"] = TYPE_ZSTRING;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/silencer"] = TYPE_BOOL;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/silencer"] = TYPE_BOOL;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/count"] = TYPE_INT32;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/count"] = TYPE_INT32;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/ammo"] = TYPE_INT32;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/ammo"] = TYPE_INT32;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/weaponCategory"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/weaponCategory"] = TYPE_ZSTRING;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/nAmmoRemaining"] = TYPE_INT32;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/nAmmoRemaining"] = TYPE_INT32;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/nAmmoTotal"] = TYPE_INT32;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/nAmmoTotal"] = TYPE_INT32;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/nAmmoInClip"] = TYPE_INT32;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/nAmmoInClip"] = TYPE_INT32;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/nWeaponType"] = TYPE_INT32;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/nWeaponType"] = TYPE_INT32;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/itemCategory"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/itemCategory"] = TYPE_ZSTRING;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/itemCategoryLKey"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/itemCategoryLKey"] = TYPE_ZSTRING;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/inventoryCategoryIcon"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/inventoryCategoryIcon"] = TYPE_ZSTRING;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/notininventory"] = TYPE_BOOL;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/notininventory"] = TYPE_BOOL;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/isIllegal"] = TYPE_BOOL;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/isIllegal"] = TYPE_BOOL;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/actionName"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/actionName"] = TYPE_ZSTRING;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/longDescription"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/longDescription"] = TYPE_ZSTRING;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/missingText"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/missingText"] = TYPE_ZSTRING;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo/warningText"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo>/warningText"] = TYPE_ZSTRING;
        (*type_map)["SCombatZoneEntitySaveData/m_bIsInLockdown"] = TYPE_BOOL;
        (*type_map)["TArray<SCombatZoneEntitySaveData>/m_bIsInLockdown"] = TYPE_BOOL;
        (*type_map)["SCombatZoneEntitySaveData/m_bIsFalseAlarm"] = TYPE_BOOL;
        (*type_map)["TArray<SCombatZoneEntitySaveData>/m_bIsFalseAlarm"] = TYPE_BOOL;
        (*type_map)["SCombatZoneEntitySaveData/m_nState"] = TYPE_ENUM;
        (*type_map)["TArray<SCombatZoneEntitySaveData>/m_nState"] = TYPE_ENUM;
        (*type_map)["SCombatZoneEntitySaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCombatZoneEntitySaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCombatZoneEntitySaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCombatZoneEntitySaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCombatZoneEntitySaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCombatZoneEntitySaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SGProperties/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGProperties>/x"] = TYPE_FLOAT32;
        (*type_map)["SGProperties/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGProperties>/y"] = TYPE_FLOAT32;
        (*type_map)["SGProperties/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGProperties>/z"] = TYPE_FLOAT32;
        (*type_map)["SGProperties/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGProperties>/w"] = TYPE_FLOAT32;
        (*type_map)["SGProperties/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGProperties>/x"] = TYPE_FLOAT32;
        (*type_map)["SGProperties/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGProperties>/y"] = TYPE_FLOAT32;
        (*type_map)["SGProperties/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGProperties>/z"] = TYPE_FLOAT32;
        (*type_map)["SGProperties/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGProperties>/w"] = TYPE_FLOAT32;
        (*type_map)["SGProperties/nGridWidth"] = TYPE_INT32;
        (*type_map)["TArray<SGProperties>/nGridWidth"] = TYPE_INT32;
        (*type_map)["SGProperties/fGridSpacing"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGProperties>/fGridSpacing"] = TYPE_FLOAT32;
        (*type_map)["SGProperties/nVisibilityRange"] = TYPE_INT32;
        (*type_map)["TArray<SGProperties>/nVisibilityRange"] = TYPE_INT32;
        (*type_map)["SCuriousEventSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCuriousEventSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCuriousEventSaveData/m_nKnowledgeIndex"] = TYPE_INT32;
        (*type_map)["TArray<SCuriousEventSaveData>/m_nKnowledgeIndex"] = TYPE_INT32;
        (*type_map)["SCuriousEventServiceSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCuriousEventServiceSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCuriousEventServiceSaveData/m_nKnowledgeIndex"] = TYPE_INT32;
        (*type_map)["TArray<SCuriousEventServiceSaveData>/m_nKnowledgeIndex"] = TYPE_INT32;
        (*type_map)["SMathDistanceSaveData_SVector4/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector4>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector4/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector4>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector4/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector4>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector4/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector4>/w"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector4/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector4>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector4/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector4>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector4/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector4>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector4/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector4>/w"] = TYPE_FLOAT32;
        (*type_map)["SEntityPinDescriptor/sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEntityPinDescriptor>/sName"] = TYPE_ZSTRING;
        (*type_map)["SEntityPinDescriptor/sDisplayName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEntityPinDescriptor>/sDisplayName"] = TYPE_ZSTRING;
        (*type_map)["SEntityPinDescriptor/m_uri"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEntityPinDescriptor>/m_uri"] = TYPE_ZSTRING;
        (*type_map)["SEntityPinDescriptor/sHelpText"] = TYPE_ZSTRING;
        (*type_map)["TArray<SEntityPinDescriptor>/sHelpText"] = TYPE_ZSTRING;
        (*type_map)["SEntityPinDescriptor/bIsPlaceholder"] = TYPE_BOOL;
        (*type_map)["TArray<SEntityPinDescriptor>/bIsPlaceholder"] = TYPE_BOOL;
        (*type_map)["SEntityPinDescriptor/bIsHidden"] = TYPE_BOOL;
        (*type_map)["TArray<SEntityPinDescriptor>/bIsHidden"] = TYPE_BOOL;
        (*type_map)["SCautiousBackupGroupSaveData/m_eGroupState"] = TYPE_ENUM;
        (*type_map)["TArray<SCautiousBackupGroupSaveData>/m_eGroupState"] = TYPE_ENUM;
        (*type_map)["SCautiousBackupGroupSaveData/m_pLeader"] = TYPE_UINT32;
        (*type_map)["TArray<SCautiousBackupGroupSaveData>/m_pLeader"] = TYPE_UINT32;
        (*type_map)["SCautiousBackupGroupSaveData/m_nTargetNodeIndex"] = TYPE_UINT16;
        (*type_map)["TArray<SCautiousBackupGroupSaveData>/m_nTargetNodeIndex"] = TYPE_UINT16;
        (*type_map)["SCautiousBackupGroupSaveData/m_pCandidate"] = TYPE_UINT32;
        (*type_map)["TArray<SCautiousBackupGroupSaveData>/m_pCandidate"] = TYPE_UINT32;
        (*type_map)["SCautiousBackupGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousBackupGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SGuardBodySituationSaveData/m_bBystanderFieldsFailed"] = TYPE_BOOL;
        (*type_map)["TArray<SGuardBodySituationSaveData>/m_bBystanderFieldsFailed"] = TYPE_BOOL;
        (*type_map)["SGuardBodySituationSaveData/m_bLastGetHelpGroupFailed"] = TYPE_BOOL;
        (*type_map)["TArray<SGuardBodySituationSaveData>/m_bLastGetHelpGroupFailed"] = TYPE_BOOL;
        (*type_map)["SGuardBodySituationSaveData/m_bSomeoneCanSeeBody"] = TYPE_BOOL;
        (*type_map)["TArray<SGuardBodySituationSaveData>/m_bSomeoneCanSeeBody"] = TYPE_BOOL;
        (*type_map)["SGuardBodySituationSaveData/m_bSomeoneHandledBodybag"] = TYPE_BOOL;
        (*type_map)["TArray<SGuardBodySituationSaveData>/m_bSomeoneHandledBodybag"] = TYPE_BOOL;
        (*type_map)["SGuardBodySituationSaveData/m_pGetHelpGroup"] = TYPE_INT32;
        (*type_map)["TArray<SGuardBodySituationSaveData>/m_pGetHelpGroup"] = TYPE_INT32;
        (*type_map)["STargetTrackingSaveData/m_sharedTarget"] = TYPE_INT32;
        (*type_map)["TArray<STargetTrackingSaveData>/m_sharedTarget"] = TYPE_INT32;
        (*type_map)["STargetTrackingSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<STargetTrackingSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["STargetTrackingSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<STargetTrackingSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["STargetTrackingSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<STargetTrackingSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["STargetTrackingSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<STargetTrackingSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["STargetTrackingSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<STargetTrackingSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["STargetTrackingServiceSaveData/m_sharedTarget"] = TYPE_INT32;
        (*type_map)["TArray<STargetTrackingServiceSaveData>/m_sharedTarget"] = TYPE_INT32;
        (*type_map)["STargetTrackingServiceSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<STargetTrackingServiceSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["STargetTrackingServiceSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<STargetTrackingServiceSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["STargetTrackingServiceSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<STargetTrackingServiceSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["STargetTrackingServiceSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<STargetTrackingServiceSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["STargetTrackingServiceSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<STargetTrackingServiceSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActOrderSaveData/m_sAct"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActOrderSaveData>/m_sAct"] = TYPE_ZSTRING;
        (*type_map)["SActOrderSaveData/m_fDuration"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActOrderSaveData>/m_fDuration"] = TYPE_FLOAT32;
        (*type_map)["SActOrderSaveData/m_rChildNetworkEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SActOrderSaveData>/m_rChildNetworkEntity"] = TYPE_UINT32;
        (*type_map)["SActOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SActOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SActOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SActOrderSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActOrderSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActOrderSaveData/m_bBlendOutImmediatelyUponTimeout"] = TYPE_BOOL;
        (*type_map)["TArray<SActOrderSaveData>/m_bBlendOutImmediatelyUponTimeout"] = TYPE_BOOL;
        (*type_map)["SActOrderSaveData/m_bDropCarriedItems"] = TYPE_BOOL;
        (*type_map)["TArray<SActOrderSaveData>/m_bDropCarriedItems"] = TYPE_BOOL;
        (*type_map)["SActOrderSaveData/m_bStopCurrentActFast"] = TYPE_BOOL;
        (*type_map)["TArray<SActOrderSaveData>/m_bStopCurrentActFast"] = TYPE_BOOL;
        (*type_map)["SContractObjectiveHudHintEntitySaveData/m_bVisible"] = TYPE_BOOL;
        (*type_map)["TArray<SContractObjectiveHudHintEntitySaveData>/m_bVisible"] = TYPE_BOOL;
        (*type_map)["SGBufferSample/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGBufferSample>/x"] = TYPE_FLOAT32;
        (*type_map)["SGBufferSample/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGBufferSample>/y"] = TYPE_FLOAT32;
        (*type_map)["SGBufferSample/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGBufferSample>/z"] = TYPE_FLOAT32;
        (*type_map)["SGBufferSample/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGBufferSample>/x"] = TYPE_FLOAT32;
        (*type_map)["SGBufferSample/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGBufferSample>/y"] = TYPE_FLOAT32;
        (*type_map)["SGBufferSample/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGBufferSample>/z"] = TYPE_FLOAT32;
        (*type_map)["SGBufferSample/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGBufferSample>/x"] = TYPE_FLOAT32;
        (*type_map)["SGBufferSample/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGBufferSample>/y"] = TYPE_FLOAT32;
        (*type_map)["SGBufferSample/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGBufferSample>/z"] = TYPE_FLOAT32;
        (*type_map)["SGBufferSample/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGBufferSample>/x"] = TYPE_FLOAT32;
        (*type_map)["SGBufferSample/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGBufferSample>/y"] = TYPE_FLOAT32;
        (*type_map)["SGBufferSample/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGBufferSample>/z"] = TYPE_FLOAT32;
        (*type_map)["SGBufferSample/glossiness"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGBufferSample>/glossiness"] = TYPE_FLOAT32;
        (*type_map)["SGBufferSample/translucency"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGBufferSample>/translucency"] = TYPE_FLOAT32;
        (*type_map)["SGBufferSample/ao"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGBufferSample>/ao"] = TYPE_FLOAT32;
        (*type_map)["SGBufferSample/shadingModel"] = TYPE_UINT32;
        (*type_map)["TArray<SGBufferSample>/shadingModel"] = TYPE_UINT32;
        (*type_map)["SEscortOutBehaviorSaveData/m_nSituation"] = TYPE_INT32;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_nSituation"] = TYPE_INT32;
        (*type_map)["SEscortOutBehaviorSaveData/m_bConversationHelperPaused"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_bConversationHelperPaused"] = TYPE_BOOL;
        (*type_map)["SEscortOutBehaviorSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SEscortOutBehaviorSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SEscortOutBehaviorSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SEscortOutBehaviorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEscortOutBehaviorSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SEscortOutBehaviorSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SEscortOutBehaviorSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SEscortOutBehaviorSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SEscortOutBehaviorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEscortOutBehaviorSaveData/m_bHardWarning"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_bHardWarning"] = TYPE_BOOL;
        (*type_map)["SEscortOutBehaviorSaveData/m_nWarningCount"] = TYPE_INT32;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_nWarningCount"] = TYPE_INT32;
        (*type_map)["SEscortOutBehaviorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEscortOutBehaviorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEscortOutBehaviorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEscortOutBehaviorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEscortOutBehaviorSaveData/m_bReachedExitPosition"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_bReachedExitPosition"] = TYPE_BOOL;
        (*type_map)["SEscortOutBehaviorSaveData/m_bShowExitWarningEnded"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_bShowExitWarningEnded"] = TYPE_BOOL;
        (*type_map)["SEscortOutBehaviorSaveData/m_bJustShowExit"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortOutBehaviorSaveData>/m_bJustShowExit"] = TYPE_BOOL;
        (*type_map)["SRecoverUnconsciousGroupSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SRecoverUnconsciousGroupSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SRecoverUnconsciousGroupSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SRecoverUnconsciousGroupSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SRecoverUnconsciousGroupSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SRecoverUnconsciousGroupSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SRecoverUnconsciousGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SRecoverUnconsciousGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SRecoverUnconsciousGroupSaveData/m_rVictim"] = TYPE_UINT32;
        (*type_map)["TArray<SRecoverUnconsciousGroupSaveData>/m_rVictim"] = TYPE_UINT32;
        (*type_map)["SRecoverUnconsciousGroupSaveData/m_rWaker"] = TYPE_UINT32;
        (*type_map)["TArray<SRecoverUnconsciousGroupSaveData>/m_rWaker"] = TYPE_UINT32;
        (*type_map)["SRecoverUnconsciousGroupSaveData/m_fTimer"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRecoverUnconsciousGroupSaveData>/m_fTimer"] = TYPE_FLOAT32;
        (*type_map)["SRecoverUnconsciousGroupSaveData/m_bEscalate"] = TYPE_BOOL;
        (*type_map)["TArray<SRecoverUnconsciousGroupSaveData>/m_bEscalate"] = TYPE_BOOL;
        (*type_map)["SRecoverUnconsciousGroupSaveData/m_bWokenUpInTheGroup"] = TYPE_BOOL;
        (*type_map)["TArray<SRecoverUnconsciousGroupSaveData>/m_bWokenUpInTheGroup"] = TYPE_BOOL;
        (*type_map)["SRecoverUnconsciousGroupSaveData/m_bFastWakeUp"] = TYPE_BOOL;
        (*type_map)["TArray<SRecoverUnconsciousGroupSaveData>/m_bFastWakeUp"] = TYPE_BOOL;
        (*type_map)["SCompressedGridFloatField/m_bIsSparse"] = TYPE_BOOL;
        (*type_map)["TArray<SCompressedGridFloatField>/m_bIsSparse"] = TYPE_BOOL;
        (*type_map)["SCompressedGridFloatField/m_nFieldSize"] = TYPE_UINT32;
        (*type_map)["TArray<SCompressedGridFloatField>/m_nFieldSize"] = TYPE_UINT32;
        (*type_map)["SCompressedGridFloatField/m_fInitialValue"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCompressedGridFloatField>/m_fInitialValue"] = TYPE_FLOAT32;
        (*type_map)["SCompressedGridFloatField/m_nGridCRC"] = TYPE_UINT32;
        (*type_map)["TArray<SCompressedGridFloatField>/m_nGridCRC"] = TYPE_UINT32;
        (*type_map)["SHeroItemAttachmentSaveData/m_rItem"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroItemAttachmentSaveData>/m_rItem"] = TYPE_UINT32;
        (*type_map)["SMathMultipliesSaveData_SVector2/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector2>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector2/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector2>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector2/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector2>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector2/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector2>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_SVector2/m_bDivide"] = TYPE_BOOL;
        (*type_map)["TArray<SMathMultipliesSaveData_SVector2>/m_bDivide"] = TYPE_BOOL;
        (*type_map)["AnimationTakeDataTypes.SGeneric/m_fTest"] = TYPE_FLOAT32;
        (*type_map)["TArray<AnimationTakeDataTypes.SGeneric>/m_fTest"] = TYPE_FLOAT32;
        (*type_map)["AnimationTakeDataTypes.SGeneric/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<AnimationTakeDataTypes.SGeneric>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["AnimationTakeDataTypes.SGeneric/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<AnimationTakeDataTypes.SGeneric>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["SSpaceCollectionBehaviorConfiguration/m_bInclusive"] = TYPE_BOOL;
        (*type_map)["TArray<SSpaceCollectionBehaviorConfiguration>/m_bInclusive"] = TYPE_BOOL;
        (*type_map)["SBlobsConfigResourceEntry/Id"] = TYPE_ZSTRING;
        (*type_map)["TArray<SBlobsConfigResourceEntry>/Id"] = TYPE_ZSTRING;
        (*type_map)["SBlobsConfigResourceEntry/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<SBlobsConfigResourceEntry>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["SBlobsConfigResourceEntry/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<SBlobsConfigResourceEntry>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["SGuardBodySituationMemberSaveData/m_bSearchingForMorgue"] = TYPE_BOOL;
        (*type_map)["TArray<SGuardBodySituationMemberSaveData>/m_bSearchingForMorgue"] = TYPE_BOOL;
        (*type_map)["SGuardBodySituationMemberSaveData/m_IsExitingSuccessfulBehavior"] = TYPE_BOOL;
        (*type_map)["TArray<SGuardBodySituationMemberSaveData>/m_IsExitingSuccessfulBehavior"] = TYPE_BOOL;
        (*type_map)["SGuardBodySituationMemberSaveData/m_rDeadBody"] = TYPE_UINT32;
        (*type_map)["TArray<SGuardBodySituationMemberSaveData>/m_rDeadBody"] = TYPE_UINT32;
        (*type_map)["SGuardBodySituationMemberSaveData/m_rBodybag"] = TYPE_UINT32;
        (*type_map)["TArray<SGuardBodySituationMemberSaveData>/m_rBodybag"] = TYPE_UINT32;
        (*type_map)["SMathMultiplyDivideSaveData_float32/m_fA"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_float32>/m_fA"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_float32/m_fB"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_float32>/m_fB"] = TYPE_FLOAT32;
        (*type_map)["SMathMultiplyDivideSaveData_float32/m_bDivide"] = TYPE_BOOL;
        (*type_map)["TArray<SMathMultiplyDivideSaveData_float32>/m_bDivide"] = TYPE_BOOL;
        (*type_map)["SAnimPlayerSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SAnimPlayerSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SAnimPlayerSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SAnimPlayerSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SAnimPlayerSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SAnimPlayerSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SAnimPlayerSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SAnimPlayerSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SAnimPlayerSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SAnimPlayerSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SAnimPlayerSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SAnimPlayerSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SAnimPlayerSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SAnimPlayerSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SAnimPlayerSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SAnimPlayerSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimPlayerSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SActorKeywordProxiesSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorKeywordProxiesSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SAccidentObserversGroupSaveData/m_target"] = TYPE_UINT32;
        (*type_map)["TArray<SAccidentObserversGroupSaveData>/m_target"] = TYPE_UINT32;
        (*type_map)["SAccidentObserversGroupSaveData/m_accidentScaleContext"] = TYPE_ENUM;
        (*type_map)["TArray<SAccidentObserversGroupSaveData>/m_accidentScaleContext"] = TYPE_ENUM;
        (*type_map)["ZTime/m_nValue"] = TYPE_UINT64;
        (*type_map)["TArray<ZTime>/m_nValue"] = TYPE_UINT64;
        (*type_map)["SGaitTransitionEntry/m_gait"] = TYPE_ENUM;
        (*type_map)["TArray<SGaitTransitionEntry>/m_gait"] = TYPE_ENUM;
        (*type_map)["SGaitTransitionEntry/m_speed"] = TYPE_ENUM;
        (*type_map)["TArray<SGaitTransitionEntry>/m_speed"] = TYPE_ENUM;
        (*type_map)["SAnimatedActorActOrderSaveData/m_bOverrideExistingAct"] = TYPE_BOOL;
        (*type_map)["TArray<SAnimatedActorActOrderSaveData>/m_bOverrideExistingAct"] = TYPE_BOOL;
        (*type_map)["SAnimatedActorActOrderSaveData/m_nForcedAnimationNode"] = TYPE_UINT32;
        (*type_map)["TArray<SAnimatedActorActOrderSaveData>/m_nForcedAnimationNode"] = TYPE_UINT32;
        (*type_map)["SAnimatedActorActOrderSaveData/m_rChildNetworkAct"] = TYPE_UINT32;
        (*type_map)["TArray<SAnimatedActorActOrderSaveData>/m_rChildNetworkAct"] = TYPE_UINT32;
        (*type_map)["SAnimatedActorActOrderSaveData/m_rListener"] = TYPE_UINT32;
        (*type_map)["TArray<SAnimatedActorActOrderSaveData>/m_rListener"] = TYPE_UINT32;
        (*type_map)["SAnimatedActorActOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorActOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorActOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorActOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorActOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorActOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorActOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorActOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorActOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorActOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorActOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorActOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorActOrderSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorActOrderSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SMatrix43/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix43>/x"] = TYPE_FLOAT32;
        (*type_map)["SMatrix43/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix43>/y"] = TYPE_FLOAT32;
        (*type_map)["SMatrix43/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix43>/z"] = TYPE_FLOAT32;
        (*type_map)["SMatrix43/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix43>/x"] = TYPE_FLOAT32;
        (*type_map)["SMatrix43/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix43>/y"] = TYPE_FLOAT32;
        (*type_map)["SMatrix43/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix43>/z"] = TYPE_FLOAT32;
        (*type_map)["SMatrix43/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix43>/x"] = TYPE_FLOAT32;
        (*type_map)["SMatrix43/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix43>/y"] = TYPE_FLOAT32;
        (*type_map)["SMatrix43/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix43>/z"] = TYPE_FLOAT32;
        (*type_map)["SMatrix43/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix43>/x"] = TYPE_FLOAT32;
        (*type_map)["SMatrix43/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix43>/y"] = TYPE_FLOAT32;
        (*type_map)["SMatrix43/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix43>/z"] = TYPE_FLOAT32;
        (*type_map)["SAudioMemoryMonitorEntry/shortId"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioMemoryMonitorEntry>/shortId"] = TYPE_UINT32;
        (*type_map)["SAudioMemoryMonitorEntry/size"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioMemoryMonitorEntry>/size"] = TYPE_UINT32;
        (*type_map)["SAudioMemoryMonitorEntry/m_uri"] = TYPE_ZSTRING;
        (*type_map)["TArray<SAudioMemoryMonitorEntry>/m_uri"] = TYPE_ZSTRING;
        (*type_map)["SEvacuateSituationMemberSaveData/m_pGuardDutyPoint"] = TYPE_UINT32;
        (*type_map)["TArray<SEvacuateSituationMemberSaveData>/m_pGuardDutyPoint"] = TYPE_UINT32;
        (*type_map)["SEvacuateSituationMemberSaveData/m_nPatrolWaypointIndex"] = TYPE_INT32;
        (*type_map)["TArray<SEvacuateSituationMemberSaveData>/m_nPatrolWaypointIndex"] = TYPE_INT32;
        (*type_map)["SEvacuateSituationMemberSaveData/m_nPatrolWaypointSubIndex"] = TYPE_UINT32;
        (*type_map)["TArray<SEvacuateSituationMemberSaveData>/m_nPatrolWaypointSubIndex"] = TYPE_UINT32;
        (*type_map)["SOnlineEvent/sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SOnlineEvent>/sName"] = TYPE_ZSTRING;
        (*type_map)["SOnlineEvent/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SOnlineEvent>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["SFleeOrderSaveData/m_eHelpReason"] = TYPE_ENUM;
        (*type_map)["TArray<SFleeOrderSaveData>/m_eHelpReason"] = TYPE_ENUM;
        (*type_map)["SFleeOrderSaveData/m_nGridNodeIndex"] = TYPE_UINT16;
        (*type_map)["TArray<SFleeOrderSaveData>/m_nGridNodeIndex"] = TYPE_UINT16;
        (*type_map)["SFleeOrderSaveData/m_bFleeForHelp"] = TYPE_BOOL;
        (*type_map)["TArray<SFleeOrderSaveData>/m_bFleeForHelp"] = TYPE_BOOL;
        (*type_map)["SExternalEntityTemplatePinConnection/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<SExternalEntityTemplatePinConnection>/entityID"] = TYPE_UINT64;
        (*type_map)["SExternalEntityTemplatePinConnection/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<SExternalEntityTemplatePinConnection>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["SExternalEntityTemplatePinConnection/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<SExternalEntityTemplatePinConnection>/entityIndex"] = TYPE_INT32;
        (*type_map)["SExternalEntityTemplatePinConnection/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExternalEntityTemplatePinConnection>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["SExternalEntityTemplatePinConnection/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<SExternalEntityTemplatePinConnection>/entityID"] = TYPE_UINT64;
        (*type_map)["SExternalEntityTemplatePinConnection/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<SExternalEntityTemplatePinConnection>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["SExternalEntityTemplatePinConnection/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<SExternalEntityTemplatePinConnection>/entityIndex"] = TYPE_INT32;
        (*type_map)["SExternalEntityTemplatePinConnection/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExternalEntityTemplatePinConnection>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["SExternalEntityTemplatePinConnection/fromPinName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExternalEntityTemplatePinConnection>/fromPinName"] = TYPE_ZSTRING;
        (*type_map)["SExternalEntityTemplatePinConnection/toPinName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExternalEntityTemplatePinConnection>/toPinName"] = TYPE_ZSTRING;
        (*type_map)["SExternalEntityTemplatePinConnection/constantPinValue"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SExternalEntityTemplatePinConnection>/constantPinValue"] = TYPE_ZVARIANT;
        (*type_map)["STemplateEntityBlueprint/subType"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/subType"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/rootEntityIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/rootEntityIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityID"] = TYPE_UINT64;
        (*type_map)["STemplateEntityBlueprint/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/entityTypeResourceIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityTypeResourceIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/entityId"] = TYPE_UINT64;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityId"] = TYPE_UINT64;
        (*type_map)["STemplateEntityBlueprint/editorOnly"] = TYPE_BOOL;
        (*type_map)["TArray<STemplateEntityBlueprint>/editorOnly"] = TYPE_BOOL;
        (*type_map)["STemplateEntityBlueprint/entityName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityName"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/sAliasName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/sAliasName"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/entityID"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityID"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/sPropertyName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/sPropertyName"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/sName"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/bIsArray"] = TYPE_BOOL;
        (*type_map)["TArray<STemplateEntityBlueprint>/bIsArray"] = TYPE_BOOL;
        (*type_map)["STemplateEntityBlueprint/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityID"] = TYPE_UINT64;
        (*type_map)["STemplateEntityBlueprint/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/fromID"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/fromID"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/toID"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/toID"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/fromPinName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/fromPinName"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/toPinName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/toPinName"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/constantPinValue"] = TYPE_ZVARIANT;
        (*type_map)["TArray<STemplateEntityBlueprint>/constantPinValue"] = TYPE_ZVARIANT;
        (*type_map)["STemplateEntityBlueprint/fromID"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/fromID"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/toID"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/toID"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/fromPinName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/fromPinName"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/toPinName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/toPinName"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/constantPinValue"] = TYPE_ZVARIANT;
        (*type_map)["TArray<STemplateEntityBlueprint>/constantPinValue"] = TYPE_ZVARIANT;
        (*type_map)["STemplateEntityBlueprint/fromID"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/fromID"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/toID"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/toID"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/fromPinName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/fromPinName"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/toPinName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/toPinName"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/constantPinValue"] = TYPE_ZVARIANT;
        (*type_map)["TArray<STemplateEntityBlueprint>/constantPinValue"] = TYPE_ZVARIANT;
        (*type_map)["STemplateEntityBlueprint/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityID"] = TYPE_UINT64;
        (*type_map)["STemplateEntityBlueprint/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityID"] = TYPE_UINT64;
        (*type_map)["STemplateEntityBlueprint/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityID"] = TYPE_UINT64;
        (*type_map)["STemplateEntityBlueprint/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/fromPinName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/fromPinName"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/toPinName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/toPinName"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/constantPinValue"] = TYPE_ZVARIANT;
        (*type_map)["TArray<STemplateEntityBlueprint>/constantPinValue"] = TYPE_ZVARIANT;
        (*type_map)["STemplateEntityBlueprint/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityID"] = TYPE_UINT64;
        (*type_map)["STemplateEntityBlueprint/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/entityID"] = TYPE_UINT64;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityID"] = TYPE_UINT64;
        (*type_map)["STemplateEntityBlueprint/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/externalSceneIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/entityIndex"] = TYPE_INT32;
        (*type_map)["TArray<STemplateEntityBlueprint>/entityIndex"] = TYPE_INT32;
        (*type_map)["STemplateEntityBlueprint/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/exposedEntity"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/fromPinName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/fromPinName"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/toPinName"] = TYPE_ZSTRING;
        (*type_map)["TArray<STemplateEntityBlueprint>/toPinName"] = TYPE_ZSTRING;
        (*type_map)["STemplateEntityBlueprint/constantPinValue"] = TYPE_ZVARIANT;
        (*type_map)["TArray<STemplateEntityBlueprint>/constantPinValue"] = TYPE_ZVARIANT;
        (*type_map)["SDramaControllerSaveData/m_bIsStartCondValid"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaControllerSaveData>/m_bIsStartCondValid"] = TYPE_BOOL;
        (*type_map)["SDramaControllerSaveData/m_bIsEnableCondValid"] = TYPE_BOOL;
        (*type_map)["TArray<SDramaControllerSaveData>/m_bIsEnableCondValid"] = TYPE_BOOL;
        (*type_map)["SSmuggleSituationActorStateSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SSmuggleSituationActorStateSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SSmuggleSituationActorStateSaveData/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["TArray<SSmuggleSituationActorStateSaveData>/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["SSmuggleSituationActorStateSaveData/m_nState"] = TYPE_ENUM;
        (*type_map)["TArray<SSmuggleSituationActorStateSaveData>/m_nState"] = TYPE_ENUM;
        (*type_map)["SSmuggleSituationActorStateSaveData/m_nStatePrevious"] = TYPE_ENUM;
        (*type_map)["TArray<SSmuggleSituationActorStateSaveData>/m_nStatePrevious"] = TYPE_ENUM;
        (*type_map)["SSmuggleSituationActorStateSaveData/m_fStateTimer"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSmuggleSituationActorStateSaveData>/m_fStateTimer"] = TYPE_FLOAT32;
        (*type_map)["SSmuggleSituationActorStateSaveData/m_nTargetLocationIndex"] = TYPE_INT32;
        (*type_map)["TArray<SSmuggleSituationActorStateSaveData>/m_nTargetLocationIndex"] = TYPE_INT32;
        (*type_map)["SSmuggleSituationActorStateSaveData/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SSmuggleSituationActorStateSaveData>/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["SSmuggleSituationSaveData/m_bIsEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SSmuggleSituationSaveData>/m_bIsEnabled"] = TYPE_BOOL;
        (*type_map)["SSmuggleSituationSaveData/m_bIsRunning"] = TYPE_BOOL;
        (*type_map)["TArray<SSmuggleSituationSaveData>/m_bIsRunning"] = TYPE_BOOL;
        (*type_map)["SSmuggleSituationSaveData/m_nNumberOfPickups"] = TYPE_INT32;
        (*type_map)["TArray<SSmuggleSituationSaveData>/m_nNumberOfPickups"] = TYPE_INT32;
        (*type_map)["SSmuggleSituationSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SSmuggleSituationSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SSmuggleSituationSaveData/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["TArray<SSmuggleSituationSaveData>/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["SSmuggleSituationSaveData/m_nState"] = TYPE_ENUM;
        (*type_map)["TArray<SSmuggleSituationSaveData>/m_nState"] = TYPE_ENUM;
        (*type_map)["SSmuggleSituationSaveData/m_nStatePrevious"] = TYPE_ENUM;
        (*type_map)["TArray<SSmuggleSituationSaveData>/m_nStatePrevious"] = TYPE_ENUM;
        (*type_map)["SSmuggleSituationSaveData/m_fStateTimer"] = TYPE_FLOAT32;
        (*type_map)["TArray<SSmuggleSituationSaveData>/m_fStateTimer"] = TYPE_FLOAT32;
        (*type_map)["SSmuggleSituationSaveData/m_nTargetLocationIndex"] = TYPE_INT32;
        (*type_map)["TArray<SSmuggleSituationSaveData>/m_nTargetLocationIndex"] = TYPE_INT32;
        (*type_map)["SSmuggleSituationSaveData/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SSmuggleSituationSaveData>/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["SRenderVideoPlayerSaveData/m_bPlaying"] = TYPE_BOOL;
        (*type_map)["TArray<SRenderVideoPlayerSaveData>/m_bPlaying"] = TYPE_BOOL;
        (*type_map)["SRenderVideoPlayerSaveData/m_bPaused"] = TYPE_BOOL;
        (*type_map)["TArray<SRenderVideoPlayerSaveData>/m_bPaused"] = TYPE_BOOL;
        (*type_map)["SRenderVideoPlayerSaveData/m_bLooping"] = TYPE_BOOL;
        (*type_map)["TArray<SRenderVideoPlayerSaveData>/m_bLooping"] = TYPE_BOOL;
        (*type_map)["SRenderVideoPlayerSaveData/m_bUseAlpha"] = TYPE_BOOL;
        (*type_map)["TArray<SRenderVideoPlayerSaveData>/m_bUseAlpha"] = TYPE_BOOL;
        (*type_map)["SRenderVideoPlayerSaveData/m_bFirstFrame"] = TYPE_BOOL;
        (*type_map)["TArray<SRenderVideoPlayerSaveData>/m_bFirstFrame"] = TYPE_BOOL;
        (*type_map)["SRenderVideoPlayerSaveData/m_bRunning"] = TYPE_BOOL;
        (*type_map)["TArray<SRenderVideoPlayerSaveData>/m_bRunning"] = TYPE_BOOL;
        (*type_map)["SRenderVideoPlayerSaveData/m_bVideoError"] = TYPE_BOOL;
        (*type_map)["TArray<SRenderVideoPlayerSaveData>/m_bVideoError"] = TYPE_BOOL;
        (*type_map)["SRenderVideoPlayerSaveData/m_bShouldBeStopped"] = TYPE_BOOL;
        (*type_map)["TArray<SRenderVideoPlayerSaveData>/m_bShouldBeStopped"] = TYPE_BOOL;
        (*type_map)["SRenderVideoPlayerSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SRenderVideoPlayerSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SRenderVideoPlayerSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SRenderVideoPlayerSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SRenderVideoPlayerSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SRenderVideoPlayerSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SConditionalTimerEntitySaveData/m_nInterval"] = TYPE_INT32;
        (*type_map)["TArray<SConditionalTimerEntitySaveData>/m_nInterval"] = TYPE_INT32;
        (*type_map)["SConditionalTimerEntitySaveData/m_nRemaining"] = TYPE_INT32;
        (*type_map)["TArray<SConditionalTimerEntitySaveData>/m_nRemaining"] = TYPE_INT32;
        (*type_map)["SConditionalTimerEntitySaveData/m_bActive"] = TYPE_BOOL;
        (*type_map)["TArray<SConditionalTimerEntitySaveData>/m_bActive"] = TYPE_BOOL;
        (*type_map)["SConditionalTimerEntitySaveData/m_bValue"] = TYPE_BOOL;
        (*type_map)["TArray<SConditionalTimerEntitySaveData>/m_bValue"] = TYPE_BOOL;
        (*type_map)["SActorDynamicTemplateHandlerSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorDynamicTemplateHandlerSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SActorDynamicTemplateHandlerSaveData/m_rItem"] = TYPE_UINT32;
        (*type_map)["TArray<SActorDynamicTemplateHandlerSaveData>/m_rItem"] = TYPE_UINT32;
        (*type_map)["SActorDynamicTemplateHandlerSaveData/m_rSetpiece"] = TYPE_UINT32;
        (*type_map)["TArray<SActorDynamicTemplateHandlerSaveData>/m_rSetpiece"] = TYPE_UINT32;
        (*type_map)["ZScopedRuntimePinConDesc/m_nFromEntityID"] = TYPE_UINT64;
        (*type_map)["TArray<ZScopedRuntimePinConDesc>/m_nFromEntityID"] = TYPE_UINT64;
        (*type_map)["ZScopedRuntimePinConDesc/m_nToEntityID"] = TYPE_UINT64;
        (*type_map)["TArray<ZScopedRuntimePinConDesc>/m_nToEntityID"] = TYPE_UINT64;
        (*type_map)["ZScopedRuntimePinConDesc/m_nFromPinID"] = TYPE_UINT32;
        (*type_map)["TArray<ZScopedRuntimePinConDesc>/m_nFromPinID"] = TYPE_UINT32;
        (*type_map)["ZScopedRuntimePinConDesc/m_nToPinID"] = TYPE_UINT32;
        (*type_map)["TArray<ZScopedRuntimePinConDesc>/m_nToPinID"] = TYPE_UINT32;
        (*type_map)["SSequenceTrackSaveData/m_rTrackEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SSequenceTrackSaveData>/m_rTrackEntity"] = TYPE_UINT32;
        (*type_map)["SSequenceTrackSaveData/m_CustomTrackData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSequenceTrackSaveData>/m_CustomTrackData"] = TYPE_ZVARIANT;
        (*type_map)["SAimAssistObjectSaveData/m_bHasBeenStarted"] = TYPE_BOOL;
        (*type_map)["TArray<SAimAssistObjectSaveData>/m_bHasBeenStarted"] = TYPE_BOOL;
        (*type_map)["SAimAssistObjectSaveData/m_bWasAimAssistActivated"] = TYPE_BOOL;
        (*type_map)["TArray<SAimAssistObjectSaveData>/m_bWasAimAssistActivated"] = TYPE_BOOL;
        (*type_map)["SExposedEntityTypeDescriptor/sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExposedEntityTypeDescriptor>/sName"] = TYPE_ZSTRING;
        (*type_map)["SExposedEntityTypeDescriptor/m_uri"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExposedEntityTypeDescriptor>/m_uri"] = TYPE_ZSTRING;
        (*type_map)["SScreenplayManagerSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SScreenplayManagerSaveData/m_rSequence"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_rSequence"] = TYPE_UINT32;
        (*type_map)["SScreenplayManagerSaveData/m_rBehavior"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_rBehavior"] = TYPE_UINT32;
        (*type_map)["SScreenplayManagerSaveData/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["SScreenplayManagerSaveData/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_rScreenplay"] = TYPE_UINT32;
        (*type_map)["SScreenplayManagerSaveData/m_sMatchName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_sMatchName"] = TYPE_ZSTRING;
        (*type_map)["SScreenplayManagerSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SScreenplayManagerSaveData/m_bIsDone"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_bIsDone"] = TYPE_BOOL;
        (*type_map)["SScreenplayManagerSaveData/m_bIsPaused"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_bIsPaused"] = TYPE_BOOL;
        (*type_map)["SScreenplayManagerSaveData/m_bIsSpeaking"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_bIsSpeaking"] = TYPE_BOOL;
        (*type_map)["SScreenplayManagerSaveData/m_bSituationRunning"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_bSituationRunning"] = TYPE_BOOL;
        (*type_map)["SScreenplayManagerSaveData/m_bIsTerminated"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_bIsTerminated"] = TYPE_BOOL;
        (*type_map)["SScreenplayManagerSaveData/m_nPriorityModifier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_nPriorityModifier"] = TYPE_FLOAT32;
        (*type_map)["SScreenplayManagerSaveData/m_nCurrentDrama"] = TYPE_INT32;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_nCurrentDrama"] = TYPE_INT32;
        (*type_map)["SScreenplayManagerSaveData/m_bProvidersStarted"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_bProvidersStarted"] = TYPE_BOOL;
        (*type_map)["SScreenplayManagerSaveData/m_bDoneTriggered"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_bDoneTriggered"] = TYPE_BOOL;
        (*type_map)["SScreenplayManagerSaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SScreenplayManagerSaveData/m_rSituation"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplayManagerSaveData>/m_rSituation"] = TYPE_UINT32;
        (*type_map)["SObserversGroupSaveData/m_target"] = TYPE_UINT32;
        (*type_map)["TArray<SObserversGroupSaveData>/m_target"] = TYPE_UINT32;
        (*type_map)["SObserversGroupSaveData/m_observerDistanceMax"] = TYPE_FLOAT32;
        (*type_map)["TArray<SObserversGroupSaveData>/m_observerDistanceMax"] = TYPE_FLOAT32;
        (*type_map)["SLockdownManagerAIZoneSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SLockdownManagerAIZoneSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SLockdownManagerAIZoneSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SLockdownManagerAIZoneSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SLockdownManagerAIZoneSaveData/m_rZone"] = TYPE_UINT32;
        (*type_map)["TArray<SLockdownManagerAIZoneSaveData>/m_rZone"] = TYPE_UINT32;
        (*type_map)["SCrowdServiceSaveData/m_pCorpseBodybagEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdServiceSaveData>/m_pCorpseBodybagEntity"] = TYPE_UINT32;
        (*type_map)["SCrowdServiceSaveData/m_rCrowdEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdServiceSaveData>/m_rCrowdEntity"] = TYPE_UINT32;
        (*type_map)["SCrowdServiceSaveData/m_iActorIndex"] = TYPE_UINT16;
        (*type_map)["TArray<SCrowdServiceSaveData>/m_iActorIndex"] = TYPE_UINT16;
        (*type_map)["SCrowdServiceSaveData/m_rPerceptibleEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdServiceSaveData>/m_rPerceptibleEntity"] = TYPE_UINT32;
        (*type_map)["SCrowdServiceSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCrowdServiceSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCrowdServiceSaveData/m_bManaged"] = TYPE_BOOL;
        (*type_map)["TArray<SCrowdServiceSaveData>/m_bManaged"] = TYPE_BOOL;
        (*type_map)["SCrowdServiceSaveData/m_rBagSharedKnowledge"] = TYPE_INT32;
        (*type_map)["TArray<SCrowdServiceSaveData>/m_rBagSharedKnowledge"] = TYPE_INT32;
        (*type_map)["SHeroEscortSituation2ActorStateSaveData/m_nID"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituation2ActorStateSaveData>/m_nID"] = TYPE_UINT32;
        (*type_map)["SHeroEscortSituation2ActorStateSaveData/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituation2ActorStateSaveData>/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituation2ActorStateSaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SHeroEscortSituation2ActorStateSaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SHeroEscortSituation2ActorStateSaveData/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["TArray<SHeroEscortSituation2ActorStateSaveData>/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["SHeroEscortSituation2ActorStateSaveData/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituation2ActorStateSaveData>/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituation2ActorStateSaveData/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituation2ActorStateSaveData>/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["SHeroEscortSituation2ActorStateSaveData/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituation2ActorStateSaveData>/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["SEvacuateSituationSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SEvacuateSituationSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SEvacuateSituationSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SEvacuateSituationSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SEvacuateSituationSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SEvacuateSituationSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SEvacuateSituationSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEvacuateSituationSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEvacuateSituationSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEvacuateSituationSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEvacuateSituationSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SEvacuateSituationSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SEvacuateSituationSaveData/m_tresspassGroup"] = TYPE_INT32;
        (*type_map)["TArray<SEvacuateSituationSaveData>/m_tresspassGroup"] = TYPE_INT32;
        (*type_map)["SAudioEmitterRTPCSaveData/m_nParamId"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioEmitterRTPCSaveData>/m_nParamId"] = TYPE_UINT32;
        (*type_map)["SAudioEmitterRTPCSaveData/m_fValue"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAudioEmitterRTPCSaveData>/m_fValue"] = TYPE_FLOAT32;
        (*type_map)["ZHUDUIControllerEntity.SIntelData/groupId"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZHUDUIControllerEntity.SIntelData>/groupId"] = TYPE_ZSTRING;
        (*type_map)["ZHUDUIControllerEntity.SIntelData/intelHeadline"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZHUDUIControllerEntity.SIntelData>/intelHeadline"] = TYPE_ZSTRING;
        (*type_map)["ZHUDUIControllerEntity.SIntelData/intelType"] = TYPE_INT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SIntelData>/intelType"] = TYPE_INT32;
        (*type_map)["ZHUDUIControllerEntity.SIntelData/showDuration"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDUIControllerEntity.SIntelData>/showDuration"] = TYPE_FLOAT32;
        (*type_map)["SLocalizedVideoData/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<SLocalizedVideoData>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["SLocalizedVideoData/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<SLocalizedVideoData>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["AI.SFirePattern01.SData/m_BulletsToFire"] = TYPE_UINT32;
        (*type_map)["TArray<AI.SFirePattern01.SData>/m_BulletsToFire"] = TYPE_UINT32;
        (*type_map)["AI.SFirePattern01.SData/m_WaitMinSeconds"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SFirePattern01.SData>/m_WaitMinSeconds"] = TYPE_FLOAT32;
        (*type_map)["AI.SFirePattern01.SData/m_WaitMaxSeconds"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SFirePattern01.SData>/m_WaitMaxSeconds"] = TYPE_FLOAT32;
        (*type_map)["AI.SFirePattern01/m_BulletsToFire"] = TYPE_UINT32;
        (*type_map)["TArray<AI.SFirePattern01>/m_BulletsToFire"] = TYPE_UINT32;
        (*type_map)["AI.SFirePattern01/m_WaitMinSeconds"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SFirePattern01>/m_WaitMinSeconds"] = TYPE_FLOAT32;
        (*type_map)["AI.SFirePattern01/m_WaitMaxSeconds"] = TYPE_FLOAT32;
        (*type_map)["TArray<AI.SFirePattern01>/m_WaitMaxSeconds"] = TYPE_FLOAT32;
        (*type_map)["SPerceptibleCrowdBodySaveData/m_rCombatZone"] = TYPE_UINT32;
        (*type_map)["TArray<SPerceptibleCrowdBodySaveData>/m_rCombatZone"] = TYPE_UINT32;
        (*type_map)["SPerceptibleCrowdBodySaveData/m_rSharedKnowledge"] = TYPE_INT32;
        (*type_map)["TArray<SPerceptibleCrowdBodySaveData>/m_rSharedKnowledge"] = TYPE_INT32;
        (*type_map)["ZHUDInventoryNotificationController.SData/m_sTitleText"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZHUDInventoryNotificationController.SData>/m_sTitleText"] = TYPE_ZSTRING;
        (*type_map)["ZHUDInventoryNotificationController.SData/m_sBodyText"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZHUDInventoryNotificationController.SData>/m_sBodyText"] = TYPE_ZSTRING;
        (*type_map)["SDoorSaveData/m_nDoorState"] = TYPE_INT32;
        (*type_map)["TArray<SDoorSaveData>/m_nDoorState"] = TYPE_INT32;
        (*type_map)["SDoorSaveData/m_fAnimPercent"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDoorSaveData>/m_fAnimPercent"] = TYPE_FLOAT32;
        (*type_map)["SDoorSaveData/m_fTargetAnimPercent"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDoorSaveData>/m_fTargetAnimPercent"] = TYPE_FLOAT32;
        (*type_map)["SDoorSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SDoorSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SDetectedInPrivateGroupSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SDetectedInPrivateGroupSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SDetectedInPrivateGroupSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SDetectedInPrivateGroupSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SDetectedInPrivateGroupSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SDetectedInPrivateGroupSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SDetectedInPrivateGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SDetectedInPrivateGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SDetectedInPrivateGroupSaveData/m_fTimeWaiting"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDetectedInPrivateGroupSaveData>/m_fTimeWaiting"] = TYPE_FLOAT32;
        (*type_map)["SDetectedInPrivateGroupSaveData/m_rLead"] = TYPE_UINT32;
        (*type_map)["TArray<SDetectedInPrivateGroupSaveData>/m_rLead"] = TYPE_UINT32;
        (*type_map)["SDetectedInPrivateGroupSaveData/m_bDisbanded"] = TYPE_BOOL;
        (*type_map)["TArray<SDetectedInPrivateGroupSaveData>/m_bDisbanded"] = TYPE_BOOL;
        (*type_map)["SDetectedInPrivateGroupSaveData/m_bFirstWait"] = TYPE_BOOL;
        (*type_map)["TArray<SDetectedInPrivateGroupSaveData>/m_bFirstWait"] = TYPE_BOOL;
        (*type_map)["SDetectedInPrivateGroupSaveData/m_target"] = TYPE_INT32;
        (*type_map)["TArray<SDetectedInPrivateGroupSaveData>/m_target"] = TYPE_INT32;
        (*type_map)["SGWaypoint/nNeighbor0"] = TYPE_UINT16;
        (*type_map)["TArray<SGWaypoint>/nNeighbor0"] = TYPE_UINT16;
        (*type_map)["SGWaypoint/nNeighbor1"] = TYPE_UINT16;
        (*type_map)["TArray<SGWaypoint>/nNeighbor1"] = TYPE_UINT16;
        (*type_map)["SGWaypoint/nNeighbor2"] = TYPE_UINT16;
        (*type_map)["TArray<SGWaypoint>/nNeighbor2"] = TYPE_UINT16;
        (*type_map)["SGWaypoint/nNeighbor3"] = TYPE_UINT16;
        (*type_map)["TArray<SGWaypoint>/nNeighbor3"] = TYPE_UINT16;
        (*type_map)["SGWaypoint/nNeighbor4"] = TYPE_UINT16;
        (*type_map)["TArray<SGWaypoint>/nNeighbor4"] = TYPE_UINT16;
        (*type_map)["SGWaypoint/nNeighbor5"] = TYPE_UINT16;
        (*type_map)["TArray<SGWaypoint>/nNeighbor5"] = TYPE_UINT16;
        (*type_map)["SGWaypoint/nNeighbor6"] = TYPE_UINT16;
        (*type_map)["TArray<SGWaypoint>/nNeighbor6"] = TYPE_UINT16;
        (*type_map)["SGWaypoint/nNeighbor7"] = TYPE_UINT16;
        (*type_map)["TArray<SGWaypoint>/nNeighbor7"] = TYPE_UINT16;
        (*type_map)["SGWaypoint/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGWaypoint>/x"] = TYPE_FLOAT32;
        (*type_map)["SGWaypoint/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGWaypoint>/y"] = TYPE_FLOAT32;
        (*type_map)["SGWaypoint/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGWaypoint>/z"] = TYPE_FLOAT32;
        (*type_map)["SGWaypoint/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGWaypoint>/w"] = TYPE_FLOAT32;
        (*type_map)["SGWaypoint/nVisionDataOffset"] = TYPE_UINT32;
        (*type_map)["TArray<SGWaypoint>/nVisionDataOffset"] = TYPE_UINT32;
        (*type_map)["SGWaypoint/nLayerIndex"] = TYPE_INT16;
        (*type_map)["TArray<SGWaypoint>/nLayerIndex"] = TYPE_INT16;
        (*type_map)["ZHM5CloseCombatEventConsumer.SCloseCombatSoundEventData/m_nEvent"] = TYPE_ENUM;
        (*type_map)["TArray<ZHM5CloseCombatEventConsumer.SCloseCombatSoundEventData>/m_nEvent"] = TYPE_ENUM;
        (*type_map)["ZHM5CloseCombatEventConsumer.SCloseCombatSoundEventData/m_fAttenuation"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHM5CloseCombatEventConsumer.SCloseCombatSoundEventData>/m_fAttenuation"] = TYPE_FLOAT32;
        (*type_map)["ZHM5CloseCombatEventConsumer.SCloseCombatSoundEventData/m_fPitch"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHM5CloseCombatEventConsumer.SCloseCombatSoundEventData>/m_fPitch"] = TYPE_FLOAT32;
        (*type_map)["SSavableEntitiesSaveData/m_Data"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SSavableEntitiesSaveData>/m_Data"] = TYPE_ZVARIANT;
        (*type_map)["ZPhotoModeMenuDataProvider.SPrompt/sLabel"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZPhotoModeMenuDataProvider.SPrompt>/sLabel"] = TYPE_ZSTRING;
        (*type_map)["ZPhotoModeMenuDataProvider.SPrompt/bIsEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<ZPhotoModeMenuDataProvider.SPrompt>/bIsEnabled"] = TYPE_BOOL;
        (*type_map)["SHandleDistractionSituationSaveData/m_pLeader"] = TYPE_UINT32;
        (*type_map)["TArray<SHandleDistractionSituationSaveData>/m_pLeader"] = TYPE_UINT32;
        (*type_map)["SHandleDistractionSituationSaveData/m_pAssistant"] = TYPE_UINT32;
        (*type_map)["TArray<SHandleDistractionSituationSaveData>/m_pAssistant"] = TYPE_UINT32;
        (*type_map)["SHandleDistractionSituationSaveData/m_pPreliminaryLeader"] = TYPE_UINT32;
        (*type_map)["TArray<SHandleDistractionSituationSaveData>/m_pPreliminaryLeader"] = TYPE_UINT32;
        (*type_map)["SCautiousHuntSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SCautiousHuntSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SCautiousHuntSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SCautiousHuntSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SCautiousHuntSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SCautiousHuntSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SCautiousHuntSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousHuntSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCautiousHuntSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousHuntSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCautiousHuntSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousHuntSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCautiousHuntSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousHuntSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCautiousHuntSaveData/m_bAnnounceHunt"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousHuntSaveData>/m_bAnnounceHunt"] = TYPE_BOOL;
        (*type_map)["SCautiousHuntSaveData/m_bAnnouncedHunt"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousHuntSaveData>/m_bAnnouncedHunt"] = TYPE_BOOL;
        (*type_map)["SCautiousHuntSaveData/m_bPlayAnnouncementDialog"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousHuntSaveData>/m_bPlayAnnouncementDialog"] = TYPE_BOOL;
        (*type_map)["SCautiousHuntSaveData/m_bHuntTargetKnownKiller"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousHuntSaveData>/m_bHuntTargetKnownKiller"] = TYPE_BOOL;
        (*type_map)["SCautiousHuntSaveData/m_bSharedHuntTarget"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousHuntSaveData>/m_bSharedHuntTarget"] = TYPE_BOOL;
        (*type_map)["SCautiousHuntSaveData/m_bTargetBlamed"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousHuntSaveData>/m_bTargetBlamed"] = TYPE_BOOL;
        (*type_map)["SCautiousHuntSaveData/m_bRuleActive"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousHuntSaveData>/m_bRuleActive"] = TYPE_BOOL;
        (*type_map)["SHelpingActorSaveData/m_HelpTargetKnowledgeIndex"] = TYPE_INT32;
        (*type_map)["TArray<SHelpingActorSaveData>/m_HelpTargetKnowledgeIndex"] = TYPE_INT32;
        (*type_map)["SHelpingActorSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SHelpingActorSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SRunningCrowdAIEventSaveData/m_ReactionEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SRunningCrowdAIEventSaveData>/m_ReactionEntity"] = TYPE_UINT32;
        (*type_map)["SRunningCrowdAIEventSaveData/m_CrowdEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SRunningCrowdAIEventSaveData>/m_CrowdEntity"] = TYPE_UINT32;
        (*type_map)["SRunningCrowdAIEventSaveData/m_HitmanToBlame"] = TYPE_UINT32;
        (*type_map)["TArray<SRunningCrowdAIEventSaveData>/m_HitmanToBlame"] = TYPE_UINT32;
        (*type_map)["SRunningCrowdAIEventSaveData/m_CrowdCoreIndex"] = TYPE_INT32;
        (*type_map)["TArray<SRunningCrowdAIEventSaveData>/m_CrowdCoreIndex"] = TYPE_INT32;
        (*type_map)["SRunningCrowdAIEventSaveData/m_TimeLeft"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRunningCrowdAIEventSaveData>/m_TimeLeft"] = TYPE_FLOAT32;
        (*type_map)["SRunningCrowdAIEventSaveData/m_TimeToPulse"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRunningCrowdAIEventSaveData>/m_TimeToPulse"] = TYPE_FLOAT32;
        (*type_map)["SRunningCrowdAIEventSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRunningCrowdAIEventSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SRunningCrowdAIEventSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRunningCrowdAIEventSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SRunningCrowdAIEventSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRunningCrowdAIEventSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SRunningCrowdAIEventSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRunningCrowdAIEventSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SRunningCrowdAIEventSaveData/m_IsInvestigated"] = TYPE_BOOL;
        (*type_map)["TArray<SRunningCrowdAIEventSaveData>/m_IsInvestigated"] = TYPE_BOOL;
        (*type_map)["SMathMultipliesSaveData_float32/m_fA"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_float32>/m_fA"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_float32/m_fB"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathMultipliesSaveData_float32>/m_fB"] = TYPE_FLOAT32;
        (*type_map)["SMathMultipliesSaveData_float32/m_bDivide"] = TYPE_BOOL;
        (*type_map)["TArray<SMathMultipliesSaveData_float32>/m_bDivide"] = TYPE_BOOL;
        (*type_map)["ZHM5GenericEventConsumer.SGenericEventData/m_nEvent"] = TYPE_ENUM;
        (*type_map)["TArray<ZHM5GenericEventConsumer.SGenericEventData>/m_nEvent"] = TYPE_ENUM;
        (*type_map)["SInventoryControllerItemSaveData/m_rItemEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerItemSaveData>/m_rItemEntity"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerItemSaveData/m_nAmmo"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerItemSaveData>/m_nAmmo"] = TYPE_UINT32;
        (*type_map)["SDoorsSaveData/m_nDoorState"] = TYPE_INT32;
        (*type_map)["TArray<SDoorsSaveData>/m_nDoorState"] = TYPE_INT32;
        (*type_map)["SDoorsSaveData/m_fAnimPercent"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDoorsSaveData>/m_fAnimPercent"] = TYPE_FLOAT32;
        (*type_map)["SDoorsSaveData/m_fTargetAnimPercent"] = TYPE_FLOAT32;
        (*type_map)["TArray<SDoorsSaveData>/m_fTargetAnimPercent"] = TYPE_FLOAT32;
        (*type_map)["SDoorsSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SDoorsSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SPrivateAreaSaveData/m_bIsInside"] = TYPE_BOOL;
        (*type_map)["TArray<SPrivateAreaSaveData>/m_bIsInside"] = TYPE_BOOL;
        (*type_map)["SPrivateAreaSaveData/m_nHasEntered"] = TYPE_BOOL;
        (*type_map)["TArray<SPrivateAreaSaveData>/m_nHasEntered"] = TYPE_BOOL;
        (*type_map)["SPrivateAreaSaveData/m_bHasExited"] = TYPE_BOOL;
        (*type_map)["TArray<SPrivateAreaSaveData>/m_bHasExited"] = TYPE_BOOL;
        (*type_map)["SPrivateAreaSaveData/m_bSpotted"] = TYPE_BOOL;
        (*type_map)["TArray<SPrivateAreaSaveData>/m_bSpotted"] = TYPE_BOOL;
        (*type_map)["SPrivateAreaSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPrivateAreaSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SPrivateAreaSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPrivateAreaSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SPrivateAreaSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPrivateAreaSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SPrivateAreaSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPrivateAreaSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SPrivateAreaSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPrivateAreaSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SPrivateAreaSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPrivateAreaSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SPrivateAreaSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPrivateAreaSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SPrivateAreaSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SPrivateAreaSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["ZHM5WeaponEventConsumer.SWeaponEventData/m_nEvent"] = TYPE_ENUM;
        (*type_map)["TArray<ZHM5WeaponEventConsumer.SWeaponEventData>/m_nEvent"] = TYPE_ENUM;
        (*type_map)["SPatrolGroupSaveData/m_nRouteID"] = TYPE_INT32;
        (*type_map)["TArray<SPatrolGroupSaveData>/m_nRouteID"] = TYPE_INT32;
        (*type_map)["SActorTagSaveData/m_bSeen"] = TYPE_BOOL;
        (*type_map)["TArray<SActorTagSaveData>/m_bSeen"] = TYPE_BOOL;
        (*type_map)["SActorTagSaveData/m_bTagged"] = TYPE_BOOL;
        (*type_map)["TArray<SActorTagSaveData>/m_bTagged"] = TYPE_BOOL;
        (*type_map)["SActorTagSaveData/m_rActorRef"] = TYPE_UINT32;
        (*type_map)["TArray<SActorTagSaveData>/m_rActorRef"] = TYPE_UINT32;
        (*type_map)["SActorTagManagerSaveData/m_bContractsCreationMode"] = TYPE_BOOL;
        (*type_map)["TArray<SActorTagManagerSaveData>/m_bContractsCreationMode"] = TYPE_BOOL;
        (*type_map)["SActorTagManagerSaveData/m_nTagCount"] = TYPE_INT32;
        (*type_map)["TArray<SActorTagManagerSaveData>/m_nTagCount"] = TYPE_INT32;
        (*type_map)["SActorTagManagerSaveData/m_nMaxTagCount"] = TYPE_INT32;
        (*type_map)["TArray<SActorTagManagerSaveData>/m_nMaxTagCount"] = TYPE_INT32;
        (*type_map)["SActorTagManagerSaveData/m_bTaggingEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SActorTagManagerSaveData>/m_bTaggingEnabled"] = TYPE_BOOL;
        (*type_map)["SActorTagManagerSaveData/m_bSeen"] = TYPE_BOOL;
        (*type_map)["TArray<SActorTagManagerSaveData>/m_bSeen"] = TYPE_BOOL;
        (*type_map)["SActorTagManagerSaveData/m_bTagged"] = TYPE_BOOL;
        (*type_map)["TArray<SActorTagManagerSaveData>/m_bTagged"] = TYPE_BOOL;
        (*type_map)["SActorTagManagerSaveData/m_rActorRef"] = TYPE_UINT32;
        (*type_map)["TArray<SActorTagManagerSaveData>/m_rActorRef"] = TYPE_UINT32;
        (*type_map)["SSCCuriousConfiguration/m_CanGuardsInvestigate"] = TYPE_BOOL;
        (*type_map)["TArray<SSCCuriousConfiguration>/m_CanGuardsInvestigate"] = TYPE_BOOL;
        (*type_map)["SSCCuriousConfiguration/m_CanCiviliansInvestigate"] = TYPE_BOOL;
        (*type_map)["TArray<SSCCuriousConfiguration>/m_CanCiviliansInvestigate"] = TYPE_BOOL;
        (*type_map)["SSCCuriousConfiguration/m_CanVIPsInvestigate"] = TYPE_BOOL;
        (*type_map)["TArray<SSCCuriousConfiguration>/m_CanVIPsInvestigate"] = TYPE_BOOL;
        (*type_map)["ZHUDAIGuide.SData/bDisguiseBroken"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDAIGuide.SData>/bDisguiseBroken"] = TYPE_BOOL;
        (*type_map)["ZHUDAIGuide.SData/bTrespassing"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDAIGuide.SData>/bTrespassing"] = TYPE_BOOL;
        (*type_map)["ZHUDAIGuide.SData/bInsideAreaBeingInvestigated"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDAIGuide.SData>/bInsideAreaBeingInvestigated"] = TYPE_BOOL;
        (*type_map)["ZHUDAIGuide.SData/bNearDeadBody"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDAIGuide.SData>/bNearDeadBody"] = TYPE_BOOL;
        (*type_map)["ZHUDAIGuide.SData/bVisiblyArmed"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDAIGuide.SData>/bVisiblyArmed"] = TYPE_BOOL;
        (*type_map)["ZHUDAIGuide.SData/bDisguiseSuspicious"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDAIGuide.SData>/bDisguiseSuspicious"] = TYPE_BOOL;
        (*type_map)["ZHUDAIGuide.SData/bDeepTrespassing"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDAIGuide.SData>/bDeepTrespassing"] = TYPE_BOOL;
        (*type_map)["ZHUDAIGuide.SData/bDeepTrespassingNOTUSEDBUTNECESSARYBECAUSEOFREALLYSTRANGEPROPERTYPARSERBUG"] = TYPE_BOOL;
        (*type_map)["TArray<ZHUDAIGuide.SData>/bDeepTrespassingNOTUSEDBUTNECESSARYBECAUSEOFREALLYSTRANGEPROPERTYPARSERBUG"] = TYPE_BOOL;
        (*type_map)["STargetableBoneConfiguration/m_eBone"] = TYPE_ENUM;
        (*type_map)["TArray<STargetableBoneConfiguration>/m_eBone"] = TYPE_ENUM;
        (*type_map)["STargetableBoneConfiguration/m_fBoneRadiusOverride"] = TYPE_FLOAT32;
        (*type_map)["TArray<STargetableBoneConfiguration>/m_fBoneRadiusOverride"] = TYPE_FLOAT32;
        (*type_map)["SPFObstactleSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SPFObstactleSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SUIOptionsSaveData/m_Value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SUIOptionsSaveData>/m_Value"] = TYPE_ZVARIANT;
        (*type_map)["SUIOptionsSaveData/type"] = TYPE_UINT32;
        (*type_map)["TArray<SUIOptionsSaveData>/type"] = TYPE_UINT32;
        (*type_map)["SUIOptionsSaveData/button"] = TYPE_UINT32;
        (*type_map)["TArray<SUIOptionsSaveData>/button"] = TYPE_UINT32;
        (*type_map)["SPhysicsListSaveData/m_bIsInPhysicsWorld"] = TYPE_BOOL;
        (*type_map)["TArray<SPhysicsListSaveData>/m_bIsInPhysicsWorld"] = TYPE_BOOL;
        (*type_map)["SPhysicsListSaveData/m_bIsKinematicBody"] = TYPE_BOOL;
        (*type_map)["TArray<SPhysicsListSaveData>/m_bIsKinematicBody"] = TYPE_BOOL;
        (*type_map)["SPhysicsListSaveData/m_bIsVisible"] = TYPE_BOOL;
        (*type_map)["TArray<SPhysicsListSaveData>/m_bIsVisible"] = TYPE_BOOL;
        (*type_map)["SMathLerpsSaveData_float32/m_A"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_float32>/m_A"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_float32/m_B"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_float32>/m_B"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_float32/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_float32>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorOrderSaveData/m_eOrderType"] = TYPE_ENUM;
        (*type_map)["TArray<SAnimatedActorOrderSaveData>/m_eOrderType"] = TYPE_ENUM;
        (*type_map)["SAnimatedActorOrderSaveData/m_OrderData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SAnimatedActorOrderSaveData>/m_OrderData"] = TYPE_ZVARIANT;
        (*type_map)["ZSpectatorSituation.SSituationSaveData/m_bStandingDown"] = TYPE_BOOL;
        (*type_map)["TArray<ZSpectatorSituation.SSituationSaveData>/m_bStandingDown"] = TYPE_BOOL;
        (*type_map)["SGameKeywordManagerSaveData/m_HolderSaveableId"] = TYPE_UINT32;
        (*type_map)["TArray<SGameKeywordManagerSaveData>/m_HolderSaveableId"] = TYPE_UINT32;
        (*type_map)["SGameKeywordManagerSaveData/m_KeywordID"] = TYPE_INT32;
        (*type_map)["TArray<SGameKeywordManagerSaveData>/m_KeywordID"] = TYPE_INT32;
        (*type_map)["SUIGridCellPosition/nColumnIndex"] = TYPE_INT32;
        (*type_map)["TArray<SUIGridCellPosition>/nColumnIndex"] = TYPE_INT32;
        (*type_map)["SUIGridCellPosition/nRowIndex"] = TYPE_INT32;
        (*type_map)["TArray<SUIGridCellPosition>/nRowIndex"] = TYPE_INT32;
        (*type_map)["SUIGridCellPosition/nColumnSpan"] = TYPE_INT32;
        (*type_map)["TArray<SUIGridCellPosition>/nColumnSpan"] = TYPE_INT32;
        (*type_map)["SUIGridCellPosition/nRowSpan"] = TYPE_INT32;
        (*type_map)["TArray<SUIGridCellPosition>/nRowSpan"] = TYPE_INT32;
        (*type_map)["SEscortOutOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortOutOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SEscortOutOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortOutOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SEscortOutOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortOutOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SEscortOutOrderSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortOutOrderSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SItemsSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemsSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SItemsSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemsSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SItemsSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemsSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SItemsSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemsSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SItemsSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemsSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SItemsSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemsSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SItemsSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemsSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SItemsSaveData/m_bShowItem"] = TYPE_BOOL;
        (*type_map)["TArray<SItemsSaveData>/m_bShowItem"] = TYPE_BOOL;
        (*type_map)["SItemsSaveData/m_bEnablePickup"] = TYPE_BOOL;
        (*type_map)["TArray<SItemsSaveData>/m_bEnablePickup"] = TYPE_BOOL;
        (*type_map)["SItemsSaveData/m_bKinematic"] = TYPE_BOOL;
        (*type_map)["TArray<SItemsSaveData>/m_bKinematic"] = TYPE_BOOL;
        (*type_map)["SItemsSaveData/m_bSleeping"] = TYPE_BOOL;
        (*type_map)["TArray<SItemsSaveData>/m_bSleeping"] = TYPE_BOOL;
        (*type_map)["SItemsSaveData/m_bIsPerceptible"] = TYPE_BOOL;
        (*type_map)["TArray<SItemsSaveData>/m_bIsPerceptible"] = TYPE_BOOL;
        (*type_map)["SItemsSaveData/m_bDestroyed"] = TYPE_BOOL;
        (*type_map)["TArray<SItemsSaveData>/m_bDestroyed"] = TYPE_BOOL;
        (*type_map)["SItemsSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemsSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SItemsSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemsSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SItemsSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SItemsSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SItemsSaveData/m_rTransformParent"] = TYPE_UINT32;
        (*type_map)["TArray<SItemsSaveData>/m_rTransformParent"] = TYPE_UINT32;
        (*type_map)["SItemsSaveData/m_rSpawner"] = TYPE_UINT32;
        (*type_map)["TArray<SItemsSaveData>/m_rSpawner"] = TYPE_UINT32;
        (*type_map)["SItemsSaveData/m_rOwner"] = TYPE_UINT32;
        (*type_map)["TArray<SItemsSaveData>/m_rOwner"] = TYPE_UINT32;
        (*type_map)["SItemsSaveData/m_rHoldingContainer"] = TYPE_UINT32;
        (*type_map)["TArray<SItemsSaveData>/m_rHoldingContainer"] = TYPE_UINT32;
        (*type_map)["SItemsSaveData/m_pPreviousOwner"] = TYPE_UINT32;
        (*type_map)["TArray<SItemsSaveData>/m_pPreviousOwner"] = TYPE_UINT32;
        (*type_map)["SItemsSaveData/m_bTurnedOn"] = TYPE_BOOL;
        (*type_map)["TArray<SItemsSaveData>/m_bTurnedOn"] = TYPE_BOOL;
        (*type_map)["SItemsSaveData/m_bEverOwnedByHitman"] = TYPE_BOOL;
        (*type_map)["TArray<SItemsSaveData>/m_bEverOwnedByHitman"] = TYPE_BOOL;
        (*type_map)["SItemsSaveData/m_bWasPlacedAndAttached"] = TYPE_BOOL;
        (*type_map)["TArray<SItemsSaveData>/m_bWasPlacedAndAttached"] = TYPE_BOOL;
        (*type_map)["SItemsSaveData/m_bObjectInPhysicsWorld"] = TYPE_BOOL;
        (*type_map)["TArray<SItemsSaveData>/m_bObjectInPhysicsWorld"] = TYPE_BOOL;
        (*type_map)["SItemsSaveData/m_nQuantity"] = TYPE_INT32;
        (*type_map)["TArray<SItemsSaveData>/m_nQuantity"] = TYPE_INT32;
        (*type_map)["SItemsSaveData/m_eGlowType"] = TYPE_ENUM;
        (*type_map)["TArray<SItemsSaveData>/m_eGlowType"] = TYPE_ENUM;
        (*type_map)["ZHM5FaceFXSpecificEventConsumer.SFaceFXEventData/m_nEvent"] = TYPE_ENUM;
        (*type_map)["TArray<ZHM5FaceFXSpecificEventConsumer.SFaceFXEventData>/m_nEvent"] = TYPE_ENUM;
        (*type_map)["ZHM5FaceFXSpecificEventConsumer.SFaceFXEventData/m_sFaceExpression"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZHM5FaceFXSpecificEventConsumer.SFaceFXEventData>/m_sFaceExpression"] = TYPE_ZSTRING;
        (*type_map)["SStoredSlotSaveData/m_iStoredInventorySlotIndex"] = TYPE_UINT32;
        (*type_map)["TArray<SStoredSlotSaveData>/m_iStoredInventorySlotIndex"] = TYPE_UINT32;
        (*type_map)["SStoredSlotSaveData/m_iStoreReason"] = TYPE_UINT8;
        (*type_map)["TArray<SStoredSlotSaveData>/m_iStoreReason"] = TYPE_UINT8;
        (*type_map)["SStoredSlotSaveData/m_bItemsStored"] = TYPE_BOOL;
        (*type_map)["TArray<SStoredSlotSaveData>/m_bItemsStored"] = TYPE_BOOL;
        (*type_map)["SInventoryControllerSlotSaveData/m_rItemEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSlotSaveData>/m_rItemEntity"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSlotSaveData/m_nAmmo"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSlotSaveData>/m_nAmmo"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSlotSaveData/m_eStorageType"] = TYPE_ENUM;
        (*type_map)["TArray<SInventoryControllerSlotSaveData>/m_eStorageType"] = TYPE_ENUM;
        (*type_map)["SInventoryControllerSaveData/m_rItemEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_rItemEntity"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_nAmmo"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nAmmo"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_nEquippedItemIndex"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nEquippedItemIndex"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_nMostRecentItemIndex"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nMostRecentItemIndex"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_iStoredInventorySlotIndex"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_iStoredInventorySlotIndex"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_iStoreReason"] = TYPE_UINT8;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_iStoreReason"] = TYPE_UINT8;
        (*type_map)["SInventoryControllerSaveData/m_bItemsStored"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_bItemsStored"] = TYPE_BOOL;
        (*type_map)["SInventoryControllerSaveData/m_rItemEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_rItemEntity"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_nAmmo"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nAmmo"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_eStorageType"] = TYPE_ENUM;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_eStorageType"] = TYPE_ENUM;
        (*type_map)["SInventoryControllerSaveData/m_nAmmoCountGun"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nAmmoCountGun"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_nAmmoCountRevolver"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nAmmoCountRevolver"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_nAmmoCountSMG"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nAmmoCountSMG"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_nAmmoCountRifle"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nAmmoCountRifle"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_nAmmoCountShotgun"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nAmmoCountShotgun"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_nAmmoCountSniper"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nAmmoCountSniper"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_nAmmoCountMG"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nAmmoCountMG"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_nAmmoCountRPG"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nAmmoCountRPG"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_nAmmoCountFake"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nAmmoCountFake"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_nAmmoCountLightPistol"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nAmmoCountLightPistol"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_nAmmoCountDartTranquilizer"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nAmmoCountDartTranquilizer"] = TYPE_UINT32;
        (*type_map)["SInventoryControllerSaveData/m_nAmmoCountAmmoShotgunBeanbag"] = TYPE_UINT32;
        (*type_map)["TArray<SInventoryControllerSaveData>/m_nAmmoCountAmmoShotgunBeanbag"] = TYPE_UINT32;
        (*type_map)["SEscortSituationActors/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituationActors>/m_rActor"] = TYPE_UINT32;
        (*type_map)["AI.Private.SPoolModificationEvent/StimulusTypeId"] = TYPE_UINT32;
        (*type_map)["TArray<AI.Private.SPoolModificationEvent>/StimulusTypeId"] = TYPE_UINT32;
        (*type_map)["AI.Private.SPoolModificationEvent/SlotIndex"] = TYPE_UINT32;
        (*type_map)["TArray<AI.Private.SPoolModificationEvent>/SlotIndex"] = TYPE_UINT32;
        (*type_map)["AI.Private.SPoolModificationEvent/OperationId"] = TYPE_UINT32;
        (*type_map)["TArray<AI.Private.SPoolModificationEvent>/OperationId"] = TYPE_UINT32;
        (*type_map)["AI.Private.SPoolModificationEvent/StimulusData"] = TYPE_ZSTRING;
        (*type_map)["TArray<AI.Private.SPoolModificationEvent>/StimulusData"] = TYPE_ZSTRING;
        (*type_map)["AI.Private.SPoolModificationEvent/Timestamp"] = TYPE_UINT64;
        (*type_map)["TArray<AI.Private.SPoolModificationEvent>/Timestamp"] = TYPE_UINT64;
        (*type_map)["AI.Private.SPoolModificationEvent/EventIndex"] = TYPE_UINT32;
        (*type_map)["TArray<AI.Private.SPoolModificationEvent>/EventIndex"] = TYPE_UINT32;
        (*type_map)["AI.Private.SPoolModificationEvent/EventMetaData"] = TYPE_ZSTRING;
        (*type_map)["TArray<AI.Private.SPoolModificationEvent>/EventMetaData"] = TYPE_ZSTRING;
        (*type_map)["SLockdownManagerSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SLockdownManagerSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SLockdownManagerSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SLockdownManagerSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SLockdownManagerSaveData/m_rZone"] = TYPE_UINT32;
        (*type_map)["TArray<SLockdownManagerSaveData>/m_rZone"] = TYPE_UINT32;
        (*type_map)["SAudioEmitterSaveData/m_rEmitter"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioEmitterSaveData>/m_rEmitter"] = TYPE_UINT32;
        (*type_map)["SAudioEmitterSaveData/m_nNumberOfEvents"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioEmitterSaveData>/m_nNumberOfEvents"] = TYPE_UINT32;
        (*type_map)["SAudioEmitterSaveData/m_nNumberOfRTPCs"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioEmitterSaveData>/m_nNumberOfRTPCs"] = TYPE_UINT32;
        (*type_map)["SAudioEmitterSaveData/m_nNumberOfSwitches"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioEmitterSaveData>/m_nNumberOfSwitches"] = TYPE_UINT32;
        (*type_map)["SAudioSaveData/m_rEmitter"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioSaveData>/m_rEmitter"] = TYPE_UINT32;
        (*type_map)["SAudioSaveData/m_nNumberOfEvents"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioSaveData>/m_nNumberOfEvents"] = TYPE_UINT32;
        (*type_map)["SAudioSaveData/m_nNumberOfRTPCs"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioSaveData>/m_nNumberOfRTPCs"] = TYPE_UINT32;
        (*type_map)["SAudioSaveData/m_nNumberOfSwitches"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioSaveData>/m_nNumberOfSwitches"] = TYPE_UINT32;
        (*type_map)["SAudioSaveData/m_nEventId"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioSaveData>/m_nEventId"] = TYPE_UINT32;
        (*type_map)["SAudioSaveData/m_bPaused"] = TYPE_BOOL;
        (*type_map)["TArray<SAudioSaveData>/m_bPaused"] = TYPE_BOOL;
        (*type_map)["SAudioSaveData/m_nFlags"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioSaveData>/m_nFlags"] = TYPE_UINT32;
        (*type_map)["SAudioSaveData/m_rEventSender"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioSaveData>/m_rEventSender"] = TYPE_UINT32;
        (*type_map)["SAudioSaveData/m_nSeekPosition"] = TYPE_INT32;
        (*type_map)["TArray<SAudioSaveData>/m_nSeekPosition"] = TYPE_INT32;
        (*type_map)["SAudioSaveData/m_nPlayState"] = TYPE_UINT8;
        (*type_map)["TArray<SAudioSaveData>/m_nPlayState"] = TYPE_UINT8;
        (*type_map)["SAudioSaveData/m_nParamId"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioSaveData>/m_nParamId"] = TYPE_UINT32;
        (*type_map)["SAudioSaveData/m_fValue"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAudioSaveData>/m_fValue"] = TYPE_FLOAT32;
        (*type_map)["SAudioSaveData/m_nGroupId"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioSaveData>/m_nGroupId"] = TYPE_UINT32;
        (*type_map)["SAudioSaveData/m_nStateId"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioSaveData>/m_nStateId"] = TYPE_UINT32;
        (*type_map)["SAudioSaveData/m_nGroupId"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioSaveData>/m_nGroupId"] = TYPE_UINT32;
        (*type_map)["SAudioSaveData/m_nStateId"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioSaveData>/m_nStateId"] = TYPE_UINT32;
        (*type_map)["SAudioSaveData/m_nParamId"] = TYPE_UINT32;
        (*type_map)["TArray<SAudioSaveData>/m_nParamId"] = TYPE_UINT32;
        (*type_map)["SAudioSaveData/m_fValue"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAudioSaveData>/m_fValue"] = TYPE_FLOAT32;
        (*type_map)["SActorItemActionSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorItemActionSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SActorItemActionSaveData/m_rItem"] = TYPE_UINT32;
        (*type_map)["TArray<SActorItemActionSaveData>/m_rItem"] = TYPE_UINT32;
        (*type_map)["STriggerAlarmGroupSaveData/m_rTarget"] = TYPE_UINT32;
        (*type_map)["TArray<STriggerAlarmGroupSaveData>/m_rTarget"] = TYPE_UINT32;
        (*type_map)["STriggerAlarmGroupSaveData/m_rAlarm"] = TYPE_UINT32;
        (*type_map)["TArray<STriggerAlarmGroupSaveData>/m_rAlarm"] = TYPE_UINT32;
        (*type_map)["STriggerAlarmGroupSaveData/m_pLeader"] = TYPE_UINT32;
        (*type_map)["TArray<STriggerAlarmGroupSaveData>/m_pLeader"] = TYPE_UINT32;
        (*type_map)["STriggerAlarmGroupSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<STriggerAlarmGroupSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["STriggerAlarmGroupSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<STriggerAlarmGroupSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["STriggerAlarmGroupSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<STriggerAlarmGroupSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["STriggerAlarmGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<STriggerAlarmGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["STriggerAlarmGroupSaveData/m_bTriggeredAlarm"] = TYPE_BOOL;
        (*type_map)["TArray<STriggerAlarmGroupSaveData>/m_bTriggeredAlarm"] = TYPE_BOOL;
        (*type_map)["ZHM5CrowdGenericEventConsumer.SCrowdSoundGenericEventData/m_nEvent"] = TYPE_ENUM;
        (*type_map)["TArray<ZHM5CrowdGenericEventConsumer.SCrowdSoundGenericEventData>/m_nEvent"] = TYPE_ENUM;
        (*type_map)["SActorSpreadControllerCandidateSaveData/m_CandidateActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSpreadControllerCandidateSaveData>/m_CandidateActor"] = TYPE_UINT32;
        (*type_map)["SActorSpreadControllerCandidateSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorSpreadControllerCandidateSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorSpreadControllerCandidateSaveData/m_bValidCandidate"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSpreadControllerCandidateSaveData>/m_bValidCandidate"] = TYPE_BOOL;
        (*type_map)["SActorSpreadControllerSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorSpreadControllerSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorSpreadControllerSaveData/m_CandidateActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSpreadControllerSaveData>/m_CandidateActor"] = TYPE_UINT32;
        (*type_map)["SActorSpreadControllerSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorSpreadControllerSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SActorSpreadControllerSaveData/m_bValidCandidate"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSpreadControllerSaveData>/m_bValidCandidate"] = TYPE_BOOL;
        (*type_map)["SActorSpreadControllerSaveData/m_rCurrentSpreadingActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSpreadControllerSaveData>/m_rCurrentSpreadingActor"] = TYPE_UINT32;
        (*type_map)["SActorSpreadControllerSaveData/m_nCurrentActorIndex"] = TYPE_UINT32;
        (*type_map)["TArray<SActorSpreadControllerSaveData>/m_nCurrentActorIndex"] = TYPE_UINT32;
        (*type_map)["SActorSpreadControllerSaveData/m_bPlayerCheckEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSpreadControllerSaveData>/m_bPlayerCheckEnabled"] = TYPE_BOOL;
        (*type_map)["SActorSpreadControllerSaveData/m_bPlayerSpreading"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSpreadControllerSaveData>/m_bPlayerSpreading"] = TYPE_BOOL;
        (*type_map)["SActorSpreadControllerSaveData/m_bPlayerIsValidCandidate"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSpreadControllerSaveData>/m_bPlayerIsValidCandidate"] = TYPE_BOOL;
        (*type_map)["SActorSpreadControllerSaveData/m_bPlayerIsCandidate"] = TYPE_BOOL;
        (*type_map)["TArray<SActorSpreadControllerSaveData>/m_bPlayerIsCandidate"] = TYPE_BOOL;
        (*type_map)["SActorSpreadControllerSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SActorSpreadControllerSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SAnimatedActorMoveOrderSaveData/m_bPrecisePositioning"] = TYPE_BOOL;
        (*type_map)["TArray<SAnimatedActorMoveOrderSaveData>/m_bPrecisePositioning"] = TYPE_BOOL;
        (*type_map)["SAnimatedActorMoveOrderSaveData/m_bPreciseOrientation"] = TYPE_BOOL;
        (*type_map)["TArray<SAnimatedActorMoveOrderSaveData>/m_bPreciseOrientation"] = TYPE_BOOL;
        (*type_map)["SAnimatedActorMoveOrderSaveData/m_bIgnoreEndCollision"] = TYPE_BOOL;
        (*type_map)["TArray<SAnimatedActorMoveOrderSaveData>/m_bIgnoreEndCollision"] = TYPE_BOOL;
        (*type_map)["SAnimatedActorMoveOrderSaveData/m_bForcedEnpointSet"] = TYPE_BOOL;
        (*type_map)["TArray<SAnimatedActorMoveOrderSaveData>/m_bForcedEnpointSet"] = TYPE_BOOL;
        (*type_map)["SAnimatedActorMoveOrderSaveData/m_fStopMoveDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorMoveOrderSaveData>/m_fStopMoveDistance"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorMoveOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorMoveOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorMoveOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorMoveOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorMoveOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorMoveOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorMoveOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorMoveOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorMoveOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorMoveOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorMoveOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorMoveOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorMoveOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorMoveOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorMoveOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorMoveOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SAnimatedActorMoveOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAnimatedActorMoveOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SScreenplayRole2HeroSaveState/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SScreenplayRole2HeroSaveState>/m_rCurrentSpeakEntity"] = TYPE_UINT32;
        (*type_map)["SScreenplayRole2HeroSaveState/m_bPaused"] = TYPE_BOOL;
        (*type_map)["TArray<SScreenplayRole2HeroSaveState>/m_bPaused"] = TYPE_BOOL;
        (*type_map)["SDynamicObjectKeyValuePair/sKey"] = TYPE_ZSTRING;
        (*type_map)["TArray<SDynamicObjectKeyValuePair>/sKey"] = TYPE_ZSTRING;
        (*type_map)["SDynamicObjectKeyValuePair/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SDynamicObjectKeyValuePair>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["ZDynamicObject.SArrayTypesRegistrar/sKey"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZDynamicObject.SArrayTypesRegistrar>/sKey"] = TYPE_ZSTRING;
        (*type_map)["ZDynamicObject.SArrayTypesRegistrar/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<ZDynamicObject.SArrayTypesRegistrar>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["ZDynamicObject.SArrayTypesRegistrar/m_value"] = TYPE_ZVARIANT;
        (*type_map)["TArray<ZDynamicObject.SArrayTypesRegistrar>/m_value"] = TYPE_ZVARIANT;
        (*type_map)["ZHUDCamera3DControllerEntity.SEyeToPlane/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDCamera3DControllerEntity.SEyeToPlane>/x"] = TYPE_FLOAT32;
        (*type_map)["ZHUDCamera3DControllerEntity.SEyeToPlane/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDCamera3DControllerEntity.SEyeToPlane>/y"] = TYPE_FLOAT32;
        (*type_map)["ZHUDCamera3DControllerEntity.SEyeToPlane/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDCamera3DControllerEntity.SEyeToPlane>/z"] = TYPE_FLOAT32;
        (*type_map)["ZHUDCamera3DControllerEntity.SEyeToPlane/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDCamera3DControllerEntity.SEyeToPlane>/w"] = TYPE_FLOAT32;
        (*type_map)["ZHUDCamera3DControllerEntity.SEyeToPlane/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDCamera3DControllerEntity.SEyeToPlane>/x"] = TYPE_FLOAT32;
        (*type_map)["ZHUDCamera3DControllerEntity.SEyeToPlane/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDCamera3DControllerEntity.SEyeToPlane>/y"] = TYPE_FLOAT32;
        (*type_map)["ZHUDCamera3DControllerEntity.SEyeToPlane/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDCamera3DControllerEntity.SEyeToPlane>/z"] = TYPE_FLOAT32;
        (*type_map)["ZHUDCamera3DControllerEntity.SEyeToPlane/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDCamera3DControllerEntity.SEyeToPlane>/w"] = TYPE_FLOAT32;
        (*type_map)["ZHUDCamera3DControllerEntity.SEyeToPlane/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDCamera3DControllerEntity.SEyeToPlane>/x"] = TYPE_FLOAT32;
        (*type_map)["ZHUDCamera3DControllerEntity.SEyeToPlane/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDCamera3DControllerEntity.SEyeToPlane>/y"] = TYPE_FLOAT32;
        (*type_map)["ZHUDCamera3DControllerEntity.SEyeToPlane/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDCamera3DControllerEntity.SEyeToPlane>/z"] = TYPE_FLOAT32;
        (*type_map)["ZHUDCamera3DControllerEntity.SEyeToPlane/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHUDCamera3DControllerEntity.SEyeToPlane>/w"] = TYPE_FLOAT32;
        (*type_map)["SHM5CrippleBoxSaveData/m_bInSequence"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bInSequence"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bAllowBaseMovements"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bAllowBaseMovements"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bSequenceAllowCamera"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bSequenceAllowCamera"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bLedges"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bLedges"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bCover"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bCover"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bTakeClothes"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bTakeClothes"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bLadder"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bLadder"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bPullVictimFromWindow"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bPullVictimFromWindow"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bFiberWireKill"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bFiberWireKill"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bClimbWindow"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bClimbWindow"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bThrowBodyOverRail"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bThrowBodyOverRail"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bDumpBody"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bDumpBody"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bOperateCPDoor"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bOperateCPDoor"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bHideInCloset"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bHideInCloset"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bCloseCombat"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bCloseCombat"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bGrabVictim"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bGrabVictim"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bPushVictimThroughWindowAndRail"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bPushVictimThroughWindowAndRail"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bKickVictimOverLedge"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bKickVictimOverLedge"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bPickupItem"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bPickupItem"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bDropItem"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bDropItem"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bDragBody"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bDragBody"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bThrowItem"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bThrowItem"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bPlaceItem"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bPlaceItem"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bUseDeathAnimation"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bUseDeathAnimation"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bLimitedAmmo"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bLimitedAmmo"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bRun"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bRun"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bTurn"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bTurn"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bSneak"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bSneak"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bNoSnapSneak"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bNoSnapSneak"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bStandUp"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bStandUp"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bFastWalk"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bFastWalk"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bMovementAllowed"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bMovementAllowed"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bIdleAnimationsAllowed"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bIdleAnimationsAllowed"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bItems"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bItems"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bCanHolsterItems"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bCanHolsterItems"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bCoverTakedown"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bCoverTakedown"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bCoverScale"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bCoverScale"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bCoverToCover"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bCoverToCover"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bCloseCombatSnapNeck"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bCloseCombatSnapNeck"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bCloseCombatChoke"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bCloseCombatChoke"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bCloseCombatPistolFinish"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bCloseCombatPistolFinish"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bCloseCombatProps"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bCloseCombatProps"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bCloseCombatStandart"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bCloseCombatStandart"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bCloseCombatFakeSwing"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bCloseCombatFakeSwing"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bGameCameraAutoAlign"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bGameCameraAutoAlign"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bCameraSide"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bCameraSide"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bInstinct"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bInstinct"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bBlindFire"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bBlindFire"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bAim"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bAim"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bHairTrigger"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bHairTrigger"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bFire"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bFire"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bOpenLogbook"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bOpenLogbook"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bOpenPauseMenu"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bOpenPauseMenu"] = TYPE_BOOL;
        (*type_map)["SHM5CrippleBoxSaveData/m_bActivatedByPinSignal"] = TYPE_BOOL;
        (*type_map)["TArray<SHM5CrippleBoxSaveData>/m_bActivatedByPinSignal"] = TYPE_BOOL;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/m_fStopDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/m_fStopDistance"] = TYPE_FLOAT32;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/m_fWalkDistance"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/m_fWalkDistance"] = TYPE_FLOAT32;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/m_nObstacleBlockageFlags"] = TYPE_UINT32;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/m_nObstacleBlockageFlags"] = TYPE_UINT32;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/m_eMoveSpeed"] = TYPE_ENUM;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/m_eMoveSpeed"] = TYPE_ENUM;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/m_bIgnoreEndCollision"] = TYPE_BOOL;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/m_bIgnoreEndCollision"] = TYPE_BOOL;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/m_bPrecisePositioning"] = TYPE_BOOL;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/m_bPrecisePositioning"] = TYPE_BOOL;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/m_bForceStand"] = TYPE_BOOL;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/m_bForceStand"] = TYPE_BOOL;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/m_bLookAtTargetMustBeInSight"] = TYPE_BOOL;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/m_bLookAtTargetMustBeInSight"] = TYPE_BOOL;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/m_bUseKnownPosition"] = TYPE_BOOL;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/m_bUseKnownPosition"] = TYPE_BOOL;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/m_bStopActFast"] = TYPE_BOOL;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/m_bStopActFast"] = TYPE_BOOL;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/m_bStrafe"] = TYPE_BOOL;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/m_bStrafe"] = TYPE_BOOL;
        (*type_map)["ZMoveToOrder.SMoveToOrderSaveData/m_bEndStanding"] = TYPE_BOOL;
        (*type_map)["TArray<ZMoveToOrder.SMoveToOrderSaveData>/m_bEndStanding"] = TYPE_BOOL;
        (*type_map)["SPersistentEntitySaveData/m_nResourceId"] = TYPE_UINT64;
        (*type_map)["TArray<SPersistentEntitySaveData>/m_nResourceId"] = TYPE_UINT64;
        (*type_map)["SGetHelpServiceSaveData/m_HelpTargetKnowledgeIndex"] = TYPE_INT32;
        (*type_map)["TArray<SGetHelpServiceSaveData>/m_HelpTargetKnowledgeIndex"] = TYPE_INT32;
        (*type_map)["SGetHelpServiceSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SGetHelpServiceSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SExposedEntityDescriptor/sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExposedEntityDescriptor>/sName"] = TYPE_ZSTRING;
        (*type_map)["SExposedEntityDescriptor/sDisplayName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExposedEntityDescriptor>/sDisplayName"] = TYPE_ZSTRING;
        (*type_map)["SExposedEntityDescriptor/sHelpText"] = TYPE_ZSTRING;
        (*type_map)["TArray<SExposedEntityDescriptor>/sHelpText"] = TYPE_ZSTRING;
        (*type_map)["SExposedEntityDescriptor/bIsArray"] = TYPE_BOOL;
        (*type_map)["TArray<SExposedEntityDescriptor>/bIsArray"] = TYPE_BOOL;
        (*type_map)["SExposedEntityDescriptor/bIsHidden"] = TYPE_BOOL;
        (*type_map)["TArray<SExposedEntityDescriptor>/bIsHidden"] = TYPE_BOOL;
        (*type_map)["SMovementHideInClosetSaveData/m_eCurrentClosetType"] = TYPE_ENUM;
        (*type_map)["TArray<SMovementHideInClosetSaveData>/m_eCurrentClosetType"] = TYPE_ENUM;
        (*type_map)["SMovementHideInClosetSaveData/m_rCloset"] = TYPE_UINT32;
        (*type_map)["TArray<SMovementHideInClosetSaveData>/m_rCloset"] = TYPE_UINT32;
        (*type_map)["SLevelReferenceableEntitieSaveData/m_sSceneResource"] = TYPE_ZSTRING;
        (*type_map)["TArray<SLevelReferenceableEntitieSaveData>/m_sSceneResource"] = TYPE_ZSTRING;
        (*type_map)["SWaveformGeneratorSaveData/m_fTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWaveformGeneratorSaveData>/m_fTime"] = TYPE_FLOAT32;
        (*type_map)["SWaveformGeneratorSaveData/m_fFrequency"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWaveformGeneratorSaveData>/m_fFrequency"] = TYPE_FLOAT32;
        (*type_map)["SWaveformGeneratorSaveData/m_fOffset"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWaveformGeneratorSaveData>/m_fOffset"] = TYPE_FLOAT32;
        (*type_map)["SWaveformGeneratorSaveData/m_fScale"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWaveformGeneratorSaveData>/m_fScale"] = TYPE_FLOAT32;
        (*type_map)["SWaveformGeneratorSaveData/m_fStartTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWaveformGeneratorSaveData>/m_fStartTime"] = TYPE_FLOAT32;
        (*type_map)["SWaveformGeneratorSaveData/m_nCount"] = TYPE_UINT32;
        (*type_map)["TArray<SWaveformGeneratorSaveData>/m_nCount"] = TYPE_UINT32;
        (*type_map)["SWaveformGeneratorManagerSaveData/m_fTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWaveformGeneratorManagerSaveData>/m_fTime"] = TYPE_FLOAT32;
        (*type_map)["SWaveformGeneratorManagerSaveData/m_fFrequency"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWaveformGeneratorManagerSaveData>/m_fFrequency"] = TYPE_FLOAT32;
        (*type_map)["SWaveformGeneratorManagerSaveData/m_fOffset"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWaveformGeneratorManagerSaveData>/m_fOffset"] = TYPE_FLOAT32;
        (*type_map)["SWaveformGeneratorManagerSaveData/m_fScale"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWaveformGeneratorManagerSaveData>/m_fScale"] = TYPE_FLOAT32;
        (*type_map)["SWaveformGeneratorManagerSaveData/m_fStartTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SWaveformGeneratorManagerSaveData>/m_fStartTime"] = TYPE_FLOAT32;
        (*type_map)["SWaveformGeneratorManagerSaveData/m_nCount"] = TYPE_UINT32;
        (*type_map)["TArray<SWaveformGeneratorManagerSaveData>/m_nCount"] = TYPE_UINT32;
        (*type_map)["SMathLerpSaveData_SColorRGB/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGB>/r"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SColorRGB/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGB>/g"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SColorRGB/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGB>/b"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SColorRGB/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGB>/r"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SColorRGB/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGB>/g"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SColorRGB/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGB>/b"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpSaveData_SColorRGB/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpSaveData_SColorRGB>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGB/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGB>/r"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGB/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGB>/g"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGB/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGB>/b"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGB/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGB>/r"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGB/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGB>/g"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGB/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGB>/b"] = TYPE_FLOAT32;
        (*type_map)["SMathLerpsSaveData_SColorRGB/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathLerpsSaveData_SColorRGB>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["SVideoDatabaseEntry/VideoId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SVideoDatabaseEntry>/VideoId"] = TYPE_ZSTRING;
        (*type_map)["SVideoDatabaseEntry/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<SVideoDatabaseEntry>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["SVideoDatabaseEntry/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<SVideoDatabaseEntry>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["SVideoDatabaseData/VideoId"] = TYPE_ZSTRING;
        (*type_map)["TArray<SVideoDatabaseData>/VideoId"] = TYPE_ZSTRING;
        (*type_map)["SVideoDatabaseData/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<SVideoDatabaseData>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["SVideoDatabaseData/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<SVideoDatabaseData>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["SAvoidDangerousAreaGroupSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SAvoidDangerousAreaGroupSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SAvoidDangerousAreaGroupSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SAvoidDangerousAreaGroupSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SAvoidDangerousAreaGroupSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SAvoidDangerousAreaGroupSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SAvoidDangerousAreaGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SAvoidDangerousAreaGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SAvoidDangerousAreaGroupSaveData/m_rDangerousArea"] = TYPE_UINT32;
        (*type_map)["TArray<SAvoidDangerousAreaGroupSaveData>/m_rDangerousArea"] = TYPE_UINT32;
        (*type_map)["SAvoidDangerousAreaGroupSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAvoidDangerousAreaGroupSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SAvoidDangerousAreaGroupSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAvoidDangerousAreaGroupSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SAvoidDangerousAreaGroupSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAvoidDangerousAreaGroupSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SAvoidDangerousAreaGroupSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAvoidDangerousAreaGroupSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SAvoidDangerousAreaGroupSaveData/m_iGridId"] = TYPE_INT32;
        (*type_map)["TArray<SAvoidDangerousAreaGroupSaveData>/m_iGridId"] = TYPE_INT32;
        (*type_map)["SAvoidDangerousAreaGroupSaveData/m_bWaitUntilDangerEnds"] = TYPE_BOOL;
        (*type_map)["TArray<SAvoidDangerousAreaGroupSaveData>/m_bWaitUntilDangerEnds"] = TYPE_BOOL;
        (*type_map)["SGetIActorPositionSaveData/m_StoredActor"] = TYPE_UINT32;
        (*type_map)["TArray<SGetIActorPositionSaveData>/m_StoredActor"] = TYPE_UINT32;
        (*type_map)["SMatrix44/m11"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m11"] = TYPE_FLOAT32;
        (*type_map)["SMatrix44/m12"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m12"] = TYPE_FLOAT32;
        (*type_map)["SMatrix44/m13"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m13"] = TYPE_FLOAT32;
        (*type_map)["SMatrix44/m14"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m14"] = TYPE_FLOAT32;
        (*type_map)["SMatrix44/m21"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m21"] = TYPE_FLOAT32;
        (*type_map)["SMatrix44/m22"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m22"] = TYPE_FLOAT32;
        (*type_map)["SMatrix44/m23"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m23"] = TYPE_FLOAT32;
        (*type_map)["SMatrix44/m24"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m24"] = TYPE_FLOAT32;
        (*type_map)["SMatrix44/m31"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m31"] = TYPE_FLOAT32;
        (*type_map)["SMatrix44/m32"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m32"] = TYPE_FLOAT32;
        (*type_map)["SMatrix44/m33"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m33"] = TYPE_FLOAT32;
        (*type_map)["SMatrix44/m34"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m34"] = TYPE_FLOAT32;
        (*type_map)["SMatrix44/m41"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m41"] = TYPE_FLOAT32;
        (*type_map)["SMatrix44/m42"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m42"] = TYPE_FLOAT32;
        (*type_map)["SMatrix44/m43"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m43"] = TYPE_FLOAT32;
        (*type_map)["SMatrix44/m44"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMatrix44>/m44"] = TYPE_FLOAT32;
        (*type_map)["SDisguiseZoneSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SDisguiseZoneSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["ZInfectedSituation.SSituationSaveData/m_bStandingDown"] = TYPE_BOOL;
        (*type_map)["TArray<ZInfectedSituation.SSituationSaveData>/m_bStandingDown"] = TYPE_BOOL;
        (*type_map)["SExitSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SExitSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["ZInvestigateDisguiseGroup.SDialogLines/m_eFirstWarning"] = TYPE_ENUM;
        (*type_map)["TArray<ZInvestigateDisguiseGroup.SDialogLines>/m_eFirstWarning"] = TYPE_ENUM;
        (*type_map)["ZInvestigateDisguiseGroup.SDialogLines/m_eSecondWarning"] = TYPE_ENUM;
        (*type_map)["TArray<ZInvestigateDisguiseGroup.SDialogLines>/m_eSecondWarning"] = TYPE_ENUM;
        (*type_map)["ZInvestigateDisguiseGroup.SDialogLines/m_eThirdWarning"] = TYPE_ENUM;
        (*type_map)["TArray<ZInvestigateDisguiseGroup.SDialogLines>/m_eThirdWarning"] = TYPE_ENUM;
        (*type_map)["SLeadEscortSituationActors/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SLeadEscortSituationActors>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SRegionSaveData/m_nIndex"] = TYPE_UINT32;
        (*type_map)["TArray<SRegionSaveData>/m_nIndex"] = TYPE_UINT32;
        (*type_map)["SRegionSaveData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<SRegionSaveData>/m_eType"] = TYPE_ENUM;
        (*type_map)["SRegionSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRegionSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SRegionSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRegionSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SRegionSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRegionSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SRegionSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRegionSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SRegionSaveData/m_nDirection"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRegionSaveData>/m_nDirection"] = TYPE_FLOAT32;
        (*type_map)["SRegionSaveData/m_nRadius"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRegionSaveData>/m_nRadius"] = TYPE_FLOAT32;
        (*type_map)["SRegionSaveData/m_nAngle"] = TYPE_UINT32;
        (*type_map)["TArray<SRegionSaveData>/m_nAngle"] = TYPE_UINT32;
        (*type_map)["SRegionSaveData/m_nLifetime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRegionSaveData>/m_nLifetime"] = TYPE_FLOAT32;
        (*type_map)["SRegionSaveData/m_nAge"] = TYPE_FLOAT32;
        (*type_map)["TArray<SRegionSaveData>/m_nAge"] = TYPE_FLOAT32;
        (*type_map)["SRegionSaveData/m_nGroupID"] = TYPE_UINT8;
        (*type_map)["TArray<SRegionSaveData>/m_nGroupID"] = TYPE_UINT8;
        (*type_map)["SRegionSaveData/m_nObstacleActorIndex"] = TYPE_INT16;
        (*type_map)["TArray<SRegionSaveData>/m_nObstacleActorIndex"] = TYPE_INT16;
        (*type_map)["SConditionBase/eConditionType"] = TYPE_ENUM;
        (*type_map)["TArray<SConditionBase>/eConditionType"] = TYPE_ENUM;
        (*type_map)["SConditionBase/nConditionModifiers"] = TYPE_UINT32;
        (*type_map)["TArray<SConditionBase>/nConditionModifiers"] = TYPE_UINT32;
        (*type_map)["ZInvestigateWeaponSituation.SSituationSaveData/m_nCurrentState"] = TYPE_INT32;
        (*type_map)["TArray<ZInvestigateWeaponSituation.SSituationSaveData>/m_nCurrentState"] = TYPE_INT32;
        (*type_map)["ZInvestigateWeaponSituation.SSituationSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZInvestigateWeaponSituation.SSituationSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZInvestigateWeaponSituation.SSituationSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZInvestigateWeaponSituation.SSituationSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZInvestigateWeaponSituation.SSituationSaveData/m_nActiveInvestigationGroup"] = TYPE_INT32;
        (*type_map)["TArray<ZInvestigateWeaponSituation.SSituationSaveData>/m_nActiveInvestigationGroup"] = TYPE_INT32;
        (*type_map)["SContextActionSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SContextActionSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SContextActionSaveData/m_bTriggered"] = TYPE_BOOL;
        (*type_map)["TArray<SContextActionSaveData>/m_bTriggered"] = TYPE_BOOL;
        (*type_map)["SContextActionSaveData/m_bShouldShow"] = TYPE_BOOL;
        (*type_map)["TArray<SContextActionSaveData>/m_bShouldShow"] = TYPE_BOOL;
        (*type_map)["SMathDistanceSaveData_SVector3/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector3>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector3/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector3>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector3/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector3>/z"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector3/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector3>/x"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector3/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector3>/y"] = TYPE_FLOAT32;
        (*type_map)["SMathDistanceSaveData_SVector3/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SMathDistanceSaveData_SVector3>/z"] = TYPE_FLOAT32;
        (*type_map)["SSniperScoringEvent/m_iPoints"] = TYPE_INT32;
        (*type_map)["TArray<SSniperScoringEvent>/m_iPoints"] = TYPE_INT32;
        (*type_map)["SSniperScoringEvent/m_iPlayer"] = TYPE_INT32;
        (*type_map)["TArray<SSniperScoringEvent>/m_iPlayer"] = TYPE_INT32;
        (*type_map)["SSniperScoringEvent/m_sName"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSniperScoringEvent>/m_sName"] = TYPE_ZSTRING;
        (*type_map)["SSniperScoringEvent/m_sText"] = TYPE_ZSTRING;
        (*type_map)["TArray<SSniperScoringEvent>/m_sText"] = TYPE_ZSTRING;
        (*type_map)["SSniperScoringEvent/m_iType"] = TYPE_INT32;
        (*type_map)["TArray<SSniperScoringEvent>/m_iType"] = TYPE_INT32;
        (*type_map)["SSniperScoringEvent/m_iScoringMachine"] = TYPE_UINT8;
        (*type_map)["TArray<SSniperScoringEvent>/m_iScoringMachine"] = TYPE_UINT8;
        (*type_map)["SCrowdAIEventSaveData/m_ReactionEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdAIEventSaveData>/m_ReactionEntity"] = TYPE_UINT32;
        (*type_map)["SCrowdAIEventSaveData/m_CrowdEntity"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdAIEventSaveData>/m_CrowdEntity"] = TYPE_UINT32;
        (*type_map)["SCrowdAIEventSaveData/m_HitmanToBlame"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdAIEventSaveData>/m_HitmanToBlame"] = TYPE_UINT32;
        (*type_map)["SCrowdAIEventSaveData/m_CrowdCoreIndex"] = TYPE_INT32;
        (*type_map)["TArray<SCrowdAIEventSaveData>/m_CrowdCoreIndex"] = TYPE_INT32;
        (*type_map)["SCrowdAIEventSaveData/m_TimeLeft"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdAIEventSaveData>/m_TimeLeft"] = TYPE_FLOAT32;
        (*type_map)["SCrowdAIEventSaveData/m_TimeToPulse"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdAIEventSaveData>/m_TimeToPulse"] = TYPE_FLOAT32;
        (*type_map)["SCrowdAIEventSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdAIEventSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdAIEventSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdAIEventSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdAIEventSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdAIEventSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdAIEventSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdAIEventSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdAIEventSaveData/m_IsInvestigated"] = TYPE_BOOL;
        (*type_map)["TArray<SCrowdAIEventSaveData>/m_IsInvestigated"] = TYPE_BOOL;
        (*type_map)["SItemKeywordProxySaveData/m_rItem"] = TYPE_UINT32;
        (*type_map)["TArray<SItemKeywordProxySaveData>/m_rItem"] = TYPE_UINT32;
        (*type_map)["SEscortSituationActorStateSaveData/m_nID"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituationActorStateSaveData>/m_nID"] = TYPE_UINT32;
        (*type_map)["SEscortSituationActorStateSaveData/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituationActorStateSaveData>/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["SEscortSituationActorStateSaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SEscortSituationActorStateSaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SEscortSituationActorStateSaveData/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["TArray<SEscortSituationActorStateSaveData>/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["SEscortSituationActorStateSaveData/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortSituationActorStateSaveData>/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["SEscortSituationActorStateSaveData/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituationActorStateSaveData>/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["SEscortSituationActorStateSaveData/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituationActorStateSaveData>/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["SEscortSituationSaveData/m_bActivated"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituationSaveData>/m_bActivated"] = TYPE_BOOL;
        (*type_map)["SEscortSituationSaveData/m_bMayEscort"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituationSaveData>/m_bMayEscort"] = TYPE_BOOL;
        (*type_map)["SEscortSituationSaveData/m_bTargetDead"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituationSaveData>/m_bTargetDead"] = TYPE_BOOL;
        (*type_map)["SEscortSituationSaveData/m_bTargetInRange"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituationSaveData>/m_bTargetInRange"] = TYPE_BOOL;
        (*type_map)["SEscortSituationSaveData/m_bAllEscortsAreDead"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituationSaveData>/m_bAllEscortsAreDead"] = TYPE_BOOL;
        (*type_map)["SEscortSituationSaveData/m_bForceSearch"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituationSaveData>/m_bForceSearch"] = TYPE_BOOL;
        (*type_map)["SEscortSituationSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortSituationSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SEscortSituationSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortSituationSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SEscortSituationSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortSituationSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SEscortSituationSaveData/m_bFoundDeadTarget"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituationSaveData>/m_bFoundDeadTarget"] = TYPE_BOOL;
        (*type_map)["SEscortSituationSaveData/m_nTargetDeadTime"] = TYPE_INT64;
        (*type_map)["TArray<SEscortSituationSaveData>/m_nTargetDeadTime"] = TYPE_INT64;
        (*type_map)["SEscortSituationSaveData/m_bTargetIsMoving"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituationSaveData>/m_bTargetIsMoving"] = TYPE_BOOL;
        (*type_map)["SEscortSituationSaveData/m_eTargetState"] = TYPE_ENUM;
        (*type_map)["TArray<SEscortSituationSaveData>/m_eTargetState"] = TYPE_ENUM;
        (*type_map)["SEscortSituationSaveData/m_eTargetEmotionState"] = TYPE_ENUM;
        (*type_map)["TArray<SEscortSituationSaveData>/m_eTargetEmotionState"] = TYPE_ENUM;
        (*type_map)["SEscortSituationSaveData/m_eTargetActState"] = TYPE_ENUM;
        (*type_map)["TArray<SEscortSituationSaveData>/m_eTargetActState"] = TYPE_ENUM;
        (*type_map)["SEscortSituationSaveData/m_fTargetNotMovingTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortSituationSaveData>/m_fTargetNotMovingTime"] = TYPE_FLOAT32;
        (*type_map)["SEscortSituationSaveData/m_fTargetAgitationCooldownTimer"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortSituationSaveData>/m_fTargetAgitationCooldownTimer"] = TYPE_FLOAT32;
        (*type_map)["SEscortSituationSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituationSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SEscortSituationSaveData/m_nID"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituationSaveData>/m_nID"] = TYPE_UINT32;
        (*type_map)["SEscortSituationSaveData/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["TArray<SEscortSituationSaveData>/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["SEscortSituationSaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SEscortSituationSaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SEscortSituationSaveData/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["TArray<SEscortSituationSaveData>/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["SEscortSituationSaveData/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["TArray<SEscortSituationSaveData>/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["SEscortSituationSaveData/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituationSaveData>/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["SEscortSituationSaveData/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SEscortSituationSaveData>/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["SAttentionHUDUIElementArray_Dummy/fAngle"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAttentionHUDUIElementArray_Dummy>/fAngle"] = TYPE_FLOAT32;
        (*type_map)["SAttentionHUDUIElementArray_Dummy/fAttention"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAttentionHUDUIElementArray_Dummy>/fAttention"] = TYPE_FLOAT32;
        (*type_map)["SAttentionHUDUIElementArray_Dummy/fAlpha"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAttentionHUDUIElementArray_Dummy>/fAlpha"] = TYPE_FLOAT32;
        (*type_map)["SAttentionHUDUIElementArray_Dummy/fRadius"] = TYPE_FLOAT32;
        (*type_map)["TArray<SAttentionHUDUIElementArray_Dummy>/fRadius"] = TYPE_FLOAT32;
        (*type_map)["SAttentionHUDUIElementArray_Dummy/nColor"] = TYPE_INT32;
        (*type_map)["TArray<SAttentionHUDUIElementArray_Dummy>/nColor"] = TYPE_INT32;
        (*type_map)["SCrowdEntitySaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SCrowdEntitySaveData/m_eWantedSpeed"] = TYPE_ENUM;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_eWantedSpeed"] = TYPE_ENUM;
        (*type_map)["SCrowdEntitySaveData/m_eWantedGait"] = TYPE_ENUM;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_eWantedGait"] = TYPE_ENUM;
        (*type_map)["SCrowdEntitySaveData/m_nAnimSourceID"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_nAnimSourceID"] = TYPE_UINT32;
        (*type_map)["SCrowdEntitySaveData/m_nAnimSourceIndex"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_nAnimSourceIndex"] = TYPE_UINT32;
        (*type_map)["SCrowdEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/m_fSpeed"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_fSpeed"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/m_eMood"] = TYPE_ENUM;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_eMood"] = TYPE_ENUM;
        (*type_map)["SCrowdEntitySaveData/m_nIndex"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_nIndex"] = TYPE_UINT32;
        (*type_map)["SCrowdEntitySaveData/m_eType"] = TYPE_ENUM;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_eType"] = TYPE_ENUM;
        (*type_map)["SCrowdEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/m_nDirection"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_nDirection"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/m_nRadius"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_nRadius"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/m_nAngle"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_nAngle"] = TYPE_UINT32;
        (*type_map)["SCrowdEntitySaveData/m_nLifetime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_nLifetime"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/m_nAge"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_nAge"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/m_nGroupID"] = TYPE_UINT8;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_nGroupID"] = TYPE_UINT8;
        (*type_map)["SCrowdEntitySaveData/m_nObstacleActorIndex"] = TYPE_INT16;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_nObstacleActorIndex"] = TYPE_INT16;
        (*type_map)["SCrowdEntitySaveData/m_bIsCrowdAmbient"] = TYPE_BOOL;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_bIsCrowdAmbient"] = TYPE_BOOL;
        (*type_map)["SCrowdEntitySaveData/m_id"] = TYPE_UINT64;
        (*type_map)["TArray<SCrowdEntitySaveData>/m_id"] = TYPE_UINT64;
        (*type_map)["SCrowdEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdEntitySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdEntitySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_state"] = TYPE_ENUM;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_state"] = TYPE_ENUM;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_eBystanderState"] = TYPE_ENUM;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_eBystanderState"] = TYPE_ENUM;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_fCombatAge"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_fCombatAge"] = TYPE_FLOAT32;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_bLockdownZoneDisturbanceAdded"] = TYPE_BOOL;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_bLockdownZoneDisturbanceAdded"] = TYPE_BOOL;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_bLockdownSituation"] = TYPE_BOOL;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_bLockdownSituation"] = TYPE_BOOL;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_bLockdownFalseAlarm"] = TYPE_BOOL;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_bLockdownFalseAlarm"] = TYPE_BOOL;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_bLockdownGracePeriod"] = TYPE_BOOL;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_bLockdownGracePeriod"] = TYPE_BOOL;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_bHMInGuardDisguise"] = TYPE_BOOL;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_bHMInGuardDisguise"] = TYPE_BOOL;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_bFrisked"] = TYPE_BOOL;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_bFrisked"] = TYPE_BOOL;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_bAnnouncedFrisk"] = TYPE_BOOL;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_bAnnouncedFrisk"] = TYPE_BOOL;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_bReasonToFrisk"] = TYPE_BOOL;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_bReasonToFrisk"] = TYPE_BOOL;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_bSomeoneHasBeenInCombat"] = TYPE_BOOL;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_bSomeoneHasBeenInCombat"] = TYPE_BOOL;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_bInvestigationGroupActive"] = TYPE_BOOL;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_bInvestigationGroupActive"] = TYPE_BOOL;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_bStandDownGuards"] = TYPE_BOOL;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_bStandDownGuards"] = TYPE_BOOL;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_eMostSevereDisturbance"] = TYPE_ENUM;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_eMostSevereDisturbance"] = TYPE_ENUM;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_bDiscoveredDeadBody"] = TYPE_BOOL;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_bDiscoveredDeadBody"] = TYPE_BOOL;
        (*type_map)["ZInvestigateCautiousSituation.SStateData/m_bDiscoveredPacifiedBody"] = TYPE_BOOL;
        (*type_map)["TArray<ZInvestigateCautiousSituation.SStateData>/m_bDiscoveredPacifiedBody"] = TYPE_BOOL;
        (*type_map)["ZSecuritySystemCameraConfiguration.SHitmanVisibleEscalationRule/m_NrGuardsToSend"] = TYPE_INT32;
        (*type_map)["TArray<ZSecuritySystemCameraConfiguration.SHitmanVisibleEscalationRule>/m_NrGuardsToSend"] = TYPE_INT32;
        (*type_map)["ZSecuritySystemCameraConfiguration.SHitmanVisibleEscalationRule/m_Situation"] = TYPE_ENUM;
        (*type_map)["TArray<ZSecuritySystemCameraConfiguration.SHitmanVisibleEscalationRule>/m_Situation"] = TYPE_ENUM;
        (*type_map)["ZHM5AgilityEventConsumer.SAgilityEventData/m_nEvent"] = TYPE_ENUM;
        (*type_map)["TArray<ZHM5AgilityEventConsumer.SAgilityEventData>/m_nEvent"] = TYPE_ENUM;
        (*type_map)["STrackDollyControllerSaveData/m_rTrackEntity"] = TYPE_UINT32;
        (*type_map)["TArray<STrackDollyControllerSaveData>/m_rTrackEntity"] = TYPE_UINT32;
        (*type_map)["STrackDollyControllerSaveData/m_fTrackPosition"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrackDollyControllerSaveData>/m_fTrackPosition"] = TYPE_FLOAT32;
        (*type_map)["STrackDollyControllerSaveData/m_bIsDollyAttached"] = TYPE_BOOL;
        (*type_map)["TArray<STrackDollyControllerSaveData>/m_bIsDollyAttached"] = TYPE_BOOL;
        (*type_map)["STrackDollyControllerSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrackDollyControllerSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["STrackDollyControllerSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrackDollyControllerSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["STrackDollyControllerSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrackDollyControllerSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["STrackDollyControllerSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrackDollyControllerSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["STrackDollyControllerSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrackDollyControllerSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["STrackDollyControllerSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrackDollyControllerSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["STrackDollyControllerSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrackDollyControllerSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["AI.Private.SStimulusSnapshot/SlotIndex"] = TYPE_UINT32;
        (*type_map)["TArray<AI.Private.SStimulusSnapshot>/SlotIndex"] = TYPE_UINT32;
        (*type_map)["AI.Private.SStimulusSnapshot/StimulusData"] = TYPE_ZSTRING;
        (*type_map)["TArray<AI.Private.SStimulusSnapshot>/StimulusData"] = TYPE_ZSTRING;
        (*type_map)["SPIPMessageManagerProxySaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SPIPMessageManagerProxySaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SLeadEscortSituationActorStateSaveData/m_nID"] = TYPE_UINT32;
        (*type_map)["TArray<SLeadEscortSituationActorStateSaveData>/m_nID"] = TYPE_UINT32;
        (*type_map)["SLeadEscortSituationActorStateSaveData/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["TArray<SLeadEscortSituationActorStateSaveData>/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["SLeadEscortSituationActorStateSaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SLeadEscortSituationActorStateSaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SLeadEscortSituationActorStateSaveData/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["TArray<SLeadEscortSituationActorStateSaveData>/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["SLeadEscortSituationActorStateSaveData/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLeadEscortSituationActorStateSaveData>/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["SLeadEscortSituationActorStateSaveData/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SLeadEscortSituationActorStateSaveData>/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["SLeadEscortSituationActorStateSaveData/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SLeadEscortSituationActorStateSaveData>/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["SLeadEscortSituationSaveData/m_bActivated"] = TYPE_BOOL;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_bActivated"] = TYPE_BOOL;
        (*type_map)["SLeadEscortSituationSaveData/m_bMayEscort"] = TYPE_BOOL;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_bMayEscort"] = TYPE_BOOL;
        (*type_map)["SLeadEscortSituationSaveData/m_bTargetDead"] = TYPE_BOOL;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_bTargetDead"] = TYPE_BOOL;
        (*type_map)["SLeadEscortSituationSaveData/m_bTargetInRange"] = TYPE_BOOL;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_bTargetInRange"] = TYPE_BOOL;
        (*type_map)["SLeadEscortSituationSaveData/m_bAllEscortsAreDead"] = TYPE_BOOL;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_bAllEscortsAreDead"] = TYPE_BOOL;
        (*type_map)["SLeadEscortSituationSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SLeadEscortSituationSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SLeadEscortSituationSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SLeadEscortSituationSaveData/m_bTargetIsMoving"] = TYPE_BOOL;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_bTargetIsMoving"] = TYPE_BOOL;
        (*type_map)["SLeadEscortSituationSaveData/m_eTargetState"] = TYPE_ENUM;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_eTargetState"] = TYPE_ENUM;
        (*type_map)["SLeadEscortSituationSaveData/m_eTargetEmotionState"] = TYPE_ENUM;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_eTargetEmotionState"] = TYPE_ENUM;
        (*type_map)["SLeadEscortSituationSaveData/m_eTargetActState"] = TYPE_ENUM;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_eTargetActState"] = TYPE_ENUM;
        (*type_map)["SLeadEscortSituationSaveData/m_fTargetNotMovingTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_fTargetNotMovingTime"] = TYPE_FLOAT32;
        (*type_map)["SLeadEscortSituationSaveData/m_fTargetAgitationCooldownTimer"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_fTargetAgitationCooldownTimer"] = TYPE_FLOAT32;
        (*type_map)["SLeadEscortSituationSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SLeadEscortSituationSaveData/m_nID"] = TYPE_UINT32;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_nID"] = TYPE_UINT32;
        (*type_map)["SLeadEscortSituationSaveData/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["SLeadEscortSituationSaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SLeadEscortSituationSaveData/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["SLeadEscortSituationSaveData/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["SLeadEscortSituationSaveData/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["SLeadEscortSituationSaveData/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SLeadEscortSituationSaveData>/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["SUITestData.SSubSubStruct/sDeepString"] = TYPE_ZSTRING;
        (*type_map)["TArray<SUITestData.SSubSubStruct>/sDeepString"] = TYPE_ZSTRING;
        (*type_map)["SActorAliveConditionSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorAliveConditionSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["STokenID/m_iValue"] = TYPE_UINT32;
        (*type_map)["TArray<STokenID>/m_iValue"] = TYPE_UINT32;
        (*type_map)["STokenID/m_bValid"] = TYPE_BOOL;
        (*type_map)["TArray<STokenID>/m_bValid"] = TYPE_BOOL;
        (*type_map)["SConversationEntry/m_role"] = TYPE_ENUM;
        (*type_map)["TArray<SConversationEntry>/m_role"] = TYPE_ENUM;
        (*type_map)["SConversationEntry/m_sound"] = TYPE_ENUM;
        (*type_map)["TArray<SConversationEntry>/m_sound"] = TYPE_ENUM;
        (*type_map)["SWeaponCustomControlSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SWeaponCustomControlSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SWeaponCustomControlSaveData/m_rItem"] = TYPE_UINT32;
        (*type_map)["TArray<SWeaponCustomControlSaveData>/m_rItem"] = TYPE_UINT32;
        (*type_map)["SWeaponCustomControlSaveData/m_bTargetRegistered"] = TYPE_BOOL;
        (*type_map)["TArray<SWeaponCustomControlSaveData>/m_bTargetRegistered"] = TYPE_BOOL;
        (*type_map)["SContractConfigResourceEntry/Id"] = TYPE_ZSTRING;
        (*type_map)["TArray<SContractConfigResourceEntry>/Id"] = TYPE_ZSTRING;
        (*type_map)["SContractConfigResourceEntry/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<SContractConfigResourceEntry>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["SContractConfigResourceEntry/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<SContractConfigResourceEntry>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["SItemSpawnerSaveData/m_bItemUpdateTransformChange"] = TYPE_BOOL;
        (*type_map)["TArray<SItemSpawnerSaveData>/m_bItemUpdateTransformChange"] = TYPE_BOOL;
        (*type_map)["SBoneScalesList/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBoneScalesList>/x"] = TYPE_FLOAT32;
        (*type_map)["SBoneScalesList/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBoneScalesList>/y"] = TYPE_FLOAT32;
        (*type_map)["SBoneScalesList/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SBoneScalesList>/z"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituationActorStateSaveData/m_nID"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituationActorStateSaveData>/m_nID"] = TYPE_UINT32;
        (*type_map)["SHeroEscortSituationActorStateSaveData/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituationActorStateSaveData>/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituationActorStateSaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SHeroEscortSituationActorStateSaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SHeroEscortSituationActorStateSaveData/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["TArray<SHeroEscortSituationActorStateSaveData>/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["SHeroEscortSituationActorStateSaveData/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituationActorStateSaveData>/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituationActorStateSaveData/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituationActorStateSaveData>/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["SHeroEscortSituationActorStateSaveData/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituationActorStateSaveData>/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["ZER64/m_nEntityID"] = TYPE_UINT64;
        (*type_map)["TArray<ZER64>/m_nEntityID"] = TYPE_UINT64;
        (*type_map)["ZER64/m_sExposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZER64>/m_sExposedEntity"] = TYPE_ZSTRING;
        (*type_map)["SFooStruct/m_eTest"] = TYPE_UINT32;
        (*type_map)["TArray<SFooStruct>/m_eTest"] = TYPE_UINT32;
        (*type_map)["SFooStruct/m_sOther"] = TYPE_ZSTRING;
        (*type_map)["TArray<SFooStruct>/m_sOther"] = TYPE_ZSTRING;
        (*type_map)["SChairSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SChairSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SChairSaveData/m_bAttached"] = TYPE_BOOL;
        (*type_map)["TArray<SChairSaveData>/m_bAttached"] = TYPE_BOOL;
        (*type_map)["SCombatMetricsSaveData/m_CombatProgress"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCombatMetricsSaveData>/m_CombatProgress"] = TYPE_FLOAT32;
        (*type_map)["SCautiousSearchGroupSaveData/m_searchNode"] = TYPE_UINT16;
        (*type_map)["TArray<SCautiousSearchGroupSaveData>/m_searchNode"] = TYPE_UINT16;
        (*type_map)["SCautiousSearchGroupSaveData/m_assistantApproachNode"] = TYPE_UINT16;
        (*type_map)["TArray<SCautiousSearchGroupSaveData>/m_assistantApproachNode"] = TYPE_UINT16;
        (*type_map)["SCautiousSearchGroupSaveData/m_eGroupState"] = TYPE_ENUM;
        (*type_map)["TArray<SCautiousSearchGroupSaveData>/m_eGroupState"] = TYPE_ENUM;
        (*type_map)["SCautiousSearchGroupSaveData/m_eAssistantState"] = TYPE_ENUM;
        (*type_map)["TArray<SCautiousSearchGroupSaveData>/m_eAssistantState"] = TYPE_ENUM;
        (*type_map)["SCautiousSearchGroupSaveData/m_pLeader"] = TYPE_UINT32;
        (*type_map)["TArray<SCautiousSearchGroupSaveData>/m_pLeader"] = TYPE_UINT32;
        (*type_map)["SCautiousSearchGroupSaveData/m_pAssistant"] = TYPE_UINT32;
        (*type_map)["TArray<SCautiousSearchGroupSaveData>/m_pAssistant"] = TYPE_UINT32;
        (*type_map)["ZApproachOrder.SApproachOrderSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZApproachOrder.SApproachOrderSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["ZApproachOrder.SApproachOrderSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZApproachOrder.SApproachOrderSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["ZApproachOrder.SApproachOrderSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZApproachOrder.SApproachOrderSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["ZApproachOrder.SApproachOrderSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZApproachOrder.SApproachOrderSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["ZApproachOrder.SApproachOrderSaveData/m_style"] = TYPE_ENUM;
        (*type_map)["TArray<ZApproachOrder.SApproachOrderSaveData>/m_style"] = TYPE_ENUM;
        (*type_map)["ZApproachOrder.SApproachOrderSaveData/m_bForceStand"] = TYPE_BOOL;
        (*type_map)["TArray<ZApproachOrder.SApproachOrderSaveData>/m_bForceStand"] = TYPE_BOOL;
        (*type_map)["ZApproachOrder.SApproachOrderSaveData/m_bStopActFast"] = TYPE_BOOL;
        (*type_map)["TArray<ZApproachOrder.SApproachOrderSaveData>/m_bStopActFast"] = TYPE_BOOL;
        (*type_map)["SActorStandInEntitiesSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorStandInEntitiesSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["ZBitArray/m_nSize"] = TYPE_UINT32;
        (*type_map)["TArray<ZBitArray>/m_nSize"] = TYPE_UINT32;
        (*type_map)["SReasoningGrid/nNeighbor0"] = TYPE_UINT16;
        (*type_map)["TArray<SReasoningGrid>/nNeighbor0"] = TYPE_UINT16;
        (*type_map)["SReasoningGrid/nNeighbor1"] = TYPE_UINT16;
        (*type_map)["TArray<SReasoningGrid>/nNeighbor1"] = TYPE_UINT16;
        (*type_map)["SReasoningGrid/nNeighbor2"] = TYPE_UINT16;
        (*type_map)["TArray<SReasoningGrid>/nNeighbor2"] = TYPE_UINT16;
        (*type_map)["SReasoningGrid/nNeighbor3"] = TYPE_UINT16;
        (*type_map)["TArray<SReasoningGrid>/nNeighbor3"] = TYPE_UINT16;
        (*type_map)["SReasoningGrid/nNeighbor4"] = TYPE_UINT16;
        (*type_map)["TArray<SReasoningGrid>/nNeighbor4"] = TYPE_UINT16;
        (*type_map)["SReasoningGrid/nNeighbor5"] = TYPE_UINT16;
        (*type_map)["TArray<SReasoningGrid>/nNeighbor5"] = TYPE_UINT16;
        (*type_map)["SReasoningGrid/nNeighbor6"] = TYPE_UINT16;
        (*type_map)["TArray<SReasoningGrid>/nNeighbor6"] = TYPE_UINT16;
        (*type_map)["SReasoningGrid/nNeighbor7"] = TYPE_UINT16;
        (*type_map)["TArray<SReasoningGrid>/nNeighbor7"] = TYPE_UINT16;
        (*type_map)["SReasoningGrid/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SReasoningGrid>/x"] = TYPE_FLOAT32;
        (*type_map)["SReasoningGrid/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SReasoningGrid>/y"] = TYPE_FLOAT32;
        (*type_map)["SReasoningGrid/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SReasoningGrid>/z"] = TYPE_FLOAT32;
        (*type_map)["SReasoningGrid/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SReasoningGrid>/w"] = TYPE_FLOAT32;
        (*type_map)["SReasoningGrid/nVisionDataOffset"] = TYPE_UINT32;
        (*type_map)["TArray<SReasoningGrid>/nVisionDataOffset"] = TYPE_UINT32;
        (*type_map)["SReasoningGrid/nLayerIndex"] = TYPE_INT16;
        (*type_map)["TArray<SReasoningGrid>/nLayerIndex"] = TYPE_INT16;
        (*type_map)["SReasoningGrid/m_nSize"] = TYPE_UINT32;
        (*type_map)["TArray<SReasoningGrid>/m_nSize"] = TYPE_UINT32;
        (*type_map)["SReasoningGrid/m_nSize"] = TYPE_UINT32;
        (*type_map)["TArray<SReasoningGrid>/m_nSize"] = TYPE_UINT32;
        (*type_map)["SReasoningGrid/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SReasoningGrid>/x"] = TYPE_FLOAT32;
        (*type_map)["SReasoningGrid/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SReasoningGrid>/y"] = TYPE_FLOAT32;
        (*type_map)["SReasoningGrid/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SReasoningGrid>/z"] = TYPE_FLOAT32;
        (*type_map)["SReasoningGrid/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SReasoningGrid>/w"] = TYPE_FLOAT32;
        (*type_map)["SReasoningGrid/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SReasoningGrid>/x"] = TYPE_FLOAT32;
        (*type_map)["SReasoningGrid/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SReasoningGrid>/y"] = TYPE_FLOAT32;
        (*type_map)["SReasoningGrid/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SReasoningGrid>/z"] = TYPE_FLOAT32;
        (*type_map)["SReasoningGrid/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SReasoningGrid>/w"] = TYPE_FLOAT32;
        (*type_map)["SReasoningGrid/nGridWidth"] = TYPE_INT32;
        (*type_map)["TArray<SReasoningGrid>/nGridWidth"] = TYPE_INT32;
        (*type_map)["SReasoningGrid/fGridSpacing"] = TYPE_FLOAT32;
        (*type_map)["TArray<SReasoningGrid>/fGridSpacing"] = TYPE_FLOAT32;
        (*type_map)["SReasoningGrid/nVisibilityRange"] = TYPE_INT32;
        (*type_map)["TArray<SReasoningGrid>/nVisibilityRange"] = TYPE_INT32;
        (*type_map)["SReasoningGrid/m_nNodeCount"] = TYPE_UINT32;
        (*type_map)["TArray<SReasoningGrid>/m_nNodeCount"] = TYPE_UINT32;
        (*type_map)["SReasoningGrid/m_nSize"] = TYPE_UINT32;
        (*type_map)["TArray<SReasoningGrid>/m_nSize"] = TYPE_UINT32;
        (*type_map)["SActorProxySaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorProxySaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SActorProxiesSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SActorProxiesSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SItemKeywordProxiesSaveData/m_rItem"] = TYPE_UINT32;
        (*type_map)["TArray<SItemKeywordProxiesSaveData>/m_rItem"] = TYPE_UINT32;
        (*type_map)["STrapsSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<STrapsSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["STrapsSaveData/m_fTimer"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrapsSaveData>/m_fTimer"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_nDoorState"] = TYPE_INT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_nDoorState"] = TYPE_INT32;
        (*type_map)["SGameEntitySaveData/m_fAnimPercent"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fAnimPercent"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_fTargetAnimPercent"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fTargetAnimPercent"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SGameEntitySaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SGameEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_bShowItem"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bShowItem"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_bEnablePickup"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bEnablePickup"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_bKinematic"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bKinematic"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_bSleeping"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bSleeping"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_bIsPerceptible"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bIsPerceptible"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_bDestroyed"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bDestroyed"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_rTransformParent"] = TYPE_UINT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_rTransformParent"] = TYPE_UINT32;
        (*type_map)["SGameEntitySaveData/m_rSpawner"] = TYPE_UINT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_rSpawner"] = TYPE_UINT32;
        (*type_map)["SGameEntitySaveData/m_rOwner"] = TYPE_UINT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_rOwner"] = TYPE_UINT32;
        (*type_map)["SGameEntitySaveData/m_rHoldingContainer"] = TYPE_UINT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_rHoldingContainer"] = TYPE_UINT32;
        (*type_map)["SGameEntitySaveData/m_pPreviousOwner"] = TYPE_UINT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_pPreviousOwner"] = TYPE_UINT32;
        (*type_map)["SGameEntitySaveData/m_bTurnedOn"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bTurnedOn"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_bEverOwnedByHitman"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bEverOwnedByHitman"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_bWasPlacedAndAttached"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bWasPlacedAndAttached"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_bObjectInPhysicsWorld"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bObjectInPhysicsWorld"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_nQuantity"] = TYPE_INT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_nQuantity"] = TYPE_INT32;
        (*type_map)["SGameEntitySaveData/m_eGlowType"] = TYPE_ENUM;
        (*type_map)["TArray<SGameEntitySaveData>/m_eGlowType"] = TYPE_ENUM;
        (*type_map)["SGameEntitySaveData/m_bColliding"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bColliding"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_bInternalEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bInternalEnabled"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_fA"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fA"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_fB"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fB"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_bDivide"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bDivide"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_bDivide"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bDivide"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_bDivide"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bDivide"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_bDivide"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bDivide"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_bNPCShotProcessed"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bNPCShotProcessed"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_fTimer"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fTimer"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SGameEntitySaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SGameEntitySaveData/m_rAttachmentTarget"] = TYPE_UINT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_rAttachmentTarget"] = TYPE_UINT32;
        (*type_map)["SGameEntitySaveData/m_bIsAttached"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bIsAttached"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SGameEntitySaveData/m_rItem"] = TYPE_UINT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_rItem"] = TYPE_UINT32;
        (*type_map)["SGameEntitySaveData/m_fDiffusePower"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fDiffusePower"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_bSwitchState"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bSwitchState"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_fPenaltyMultiplier"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fPenaltyMultiplier"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_fPenaltyDuration"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fPenaltyDuration"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SGameEntitySaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SGameEntitySaveData/m_bIsEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bIsEnabled"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_compromisedOnEnter"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_compromisedOnEnter"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_bCollideHitman"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bCollideHitman"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_bCollideCamera"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bCollideCamera"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_eBCState"] = TYPE_ENUM;
        (*type_map)["TArray<SGameEntitySaveData>/m_eBCState"] = TYPE_ENUM;
        (*type_map)["SGameEntitySaveData/m_fLidAutoCloseTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fLidAutoCloseTime"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_fLidOpenFraction"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fLidOpenFraction"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_bFrameUpdateActive"] = TYPE_BOOL;
        (*type_map)["TArray<SGameEntitySaveData>/m_bFrameUpdateActive"] = TYPE_BOOL;
        (*type_map)["SGameEntitySaveData/m_A"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_A"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_B"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_B"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/r"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/g"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/b"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/r"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/g"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/b"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/r"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/g"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/b"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/a"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/a"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/r"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/r"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/g"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/g"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/b"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/b"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/a"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/a"] = TYPE_FLOAT32;
        (*type_map)["SGameEntitySaveData/m_fT"] = TYPE_FLOAT32;
        (*type_map)["TArray<SGameEntitySaveData>/m_fT"] = TYPE_FLOAT32;
        (*type_map)["SPersistentEntitySaveDataList/m_nResourceId"] = TYPE_UINT64;
        (*type_map)["TArray<SPersistentEntitySaveDataList>/m_nResourceId"] = TYPE_UINT64;
        (*type_map)["ZHM5AudioEventConsumer.SAudioAnimationEventData/m_fAttenuation"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHM5AudioEventConsumer.SAudioAnimationEventData>/m_fAttenuation"] = TYPE_FLOAT32;
        (*type_map)["ZHM5AudioEventConsumer.SAudioAnimationEventData/m_fPitch"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZHM5AudioEventConsumer.SAudioAnimationEventData>/m_fPitch"] = TYPE_FLOAT32;
        (*type_map)["SConversationPart/m_chance"] = TYPE_FLOAT32;
        (*type_map)["TArray<SConversationPart>/m_chance"] = TYPE_FLOAT32;
        (*type_map)["SConversationPart/m_role"] = TYPE_ENUM;
        (*type_map)["TArray<SConversationPart>/m_role"] = TYPE_ENUM;
        (*type_map)["SConversationPart/m_sound"] = TYPE_ENUM;
        (*type_map)["TArray<SConversationPart>/m_sound"] = TYPE_ENUM;
        (*type_map)["ZDeadBodySituation.SState/m_eFlavor"] = TYPE_ENUM;
        (*type_map)["TArray<ZDeadBodySituation.SState>/m_eFlavor"] = TYPE_ENUM;
        (*type_map)["ZDeadBodySituation.SState/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZDeadBodySituation.SState>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZDeadBodySituation.SState/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<ZDeadBodySituation.SState>/m_nTicks"] = TYPE_INT64;
        (*type_map)["ZDeadBodySituation.SState/m_nSuspiciousDeaths"] = TYPE_INT32;
        (*type_map)["TArray<ZDeadBodySituation.SState>/m_nSuspiciousDeaths"] = TYPE_INT32;
        (*type_map)["ZDeadBodySituation.SState/m_bAcknowledged"] = TYPE_BOOL;
        (*type_map)["TArray<ZDeadBodySituation.SState>/m_bAcknowledged"] = TYPE_BOOL;
        (*type_map)["ZDeadBodySituation.SState/m_bInspected"] = TYPE_BOOL;
        (*type_map)["TArray<ZDeadBodySituation.SState>/m_bInspected"] = TYPE_BOOL;
        (*type_map)["ZDeadBodySituation.SState/m_bAccidentsResolved"] = TYPE_BOOL;
        (*type_map)["TArray<ZDeadBodySituation.SState>/m_bAccidentsResolved"] = TYPE_BOOL;
        (*type_map)["ZDeadBodySituation.SState/m_bStanddownComplete"] = TYPE_BOOL;
        (*type_map)["TArray<ZDeadBodySituation.SState>/m_bStanddownComplete"] = TYPE_BOOL;
        (*type_map)["ZDeadBodySituation.SState/m_bStandDownUnconscious"] = TYPE_BOOL;
        (*type_map)["TArray<ZDeadBodySituation.SState>/m_bStandDownUnconscious"] = TYPE_BOOL;
        (*type_map)["ZDeadBodySituation.SState/m_bEscalateUnconscious"] = TYPE_BOOL;
        (*type_map)["TArray<ZDeadBodySituation.SState>/m_bEscalateUnconscious"] = TYPE_BOOL;
        (*type_map)["SHitmanSaveData/m_nOutfitCharset"] = TYPE_INT32;
        (*type_map)["TArray<SHitmanSaveData>/m_nOutfitCharset"] = TYPE_INT32;
        (*type_map)["SHitmanSaveData/m_nOutfitVariation"] = TYPE_INT32;
        (*type_map)["TArray<SHitmanSaveData>/m_nOutfitVariation"] = TYPE_INT32;
        (*type_map)["SHitmanSaveData/m_fHealth"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHitmanSaveData>/m_fHealth"] = TYPE_FLOAT32;
        (*type_map)["SHitmanSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHitmanSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SHitmanSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHitmanSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SHitmanSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHitmanSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SHitmanSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHitmanSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SHitmanSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHitmanSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SHitmanSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHitmanSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SHitmanSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHitmanSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SHitmanSaveData/m_Inventory"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SHitmanSaveData>/m_Inventory"] = TYPE_ZVARIANT;
        (*type_map)["SHitmanSaveData/m_Camera"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SHitmanSaveData>/m_Camera"] = TYPE_ZVARIANT;
        (*type_map)["SHitmanSaveData/m_eMovementType"] = TYPE_ENUM;
        (*type_map)["TArray<SHitmanSaveData>/m_eMovementType"] = TYPE_ENUM;
        (*type_map)["SHitmanSaveData/m_MovementData"] = TYPE_ZVARIANT;
        (*type_map)["TArray<SHitmanSaveData>/m_MovementData"] = TYPE_ZVARIANT;
        (*type_map)["SHitmanSaveData/m_bLethalAgilityElementUsed"] = TYPE_BOOL;
        (*type_map)["TArray<SHitmanSaveData>/m_bLethalAgilityElementUsed"] = TYPE_BOOL;
        (*type_map)["SHitmanSaveData/m_bIsChangingClothes"] = TYPE_BOOL;
        (*type_map)["TArray<SHitmanSaveData>/m_bIsChangingClothes"] = TYPE_BOOL;
        (*type_map)["SCharacterSpeakEntitySaveData/m_fSeekPosition"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCharacterSpeakEntitySaveData>/m_fSeekPosition"] = TYPE_FLOAT32;
        (*type_map)["SCharacterSpeakEntitySaveData/m_nRandomSelectionSeed"] = TYPE_UINT32;
        (*type_map)["TArray<SCharacterSpeakEntitySaveData>/m_nRandomSelectionSeed"] = TYPE_UINT32;
        (*type_map)["SCharacterSpeakEntitySaveData/m_bWereSubtitlesSeen"] = TYPE_BOOL;
        (*type_map)["TArray<SCharacterSpeakEntitySaveData>/m_bWereSubtitlesSeen"] = TYPE_BOOL;
        (*type_map)["ZAT2Controller.SEventPreviewInfo/m_nEventID"] = TYPE_INT32;
        (*type_map)["TArray<ZAT2Controller.SEventPreviewInfo>/m_nEventID"] = TYPE_INT32;
        (*type_map)["ZAT2Controller.SEventPreviewInfo/m_sConsumerID"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZAT2Controller.SEventPreviewInfo>/m_sConsumerID"] = TYPE_ZSTRING;
        (*type_map)["ZAT2Controller.SEventPreviewInfo/m_fDuration"] = TYPE_FLOAT32;
        (*type_map)["TArray<ZAT2Controller.SEventPreviewInfo>/m_fDuration"] = TYPE_FLOAT32;
        (*type_map)["ZAT2Controller.SEventPreviewInfo/m_sExtraDataTypeName"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZAT2Controller.SEventPreviewInfo>/m_sExtraDataTypeName"] = TYPE_ZSTRING;
        (*type_map)["AnimationEventDataTypes.SLegacy/m_nEventID"] = TYPE_INT32;
        (*type_map)["TArray<AnimationEventDataTypes.SLegacy>/m_nEventID"] = TYPE_INT32;
        (*type_map)["SHeroEscortSituationSaveData/m_bActivated"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_bActivated"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituationSaveData/m_bMayEscort"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_bMayEscort"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituationSaveData/m_bTargetDead"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_bTargetDead"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituationSaveData/m_bTargetInRange"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_bTargetInRange"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituationSaveData/m_bAllEscortsAreDead"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_bAllEscortsAreDead"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituationSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituationSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituationSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituationSaveData/m_bTargetIsMoving"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_bTargetIsMoving"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituationSaveData/m_eTargetState"] = TYPE_ENUM;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_eTargetState"] = TYPE_ENUM;
        (*type_map)["SHeroEscortSituationSaveData/m_eTargetEmotionState"] = TYPE_ENUM;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_eTargetEmotionState"] = TYPE_ENUM;
        (*type_map)["SHeroEscortSituationSaveData/m_eTargetActState"] = TYPE_ENUM;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_eTargetActState"] = TYPE_ENUM;
        (*type_map)["SHeroEscortSituationSaveData/m_fTargetNotMovingTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_fTargetNotMovingTime"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituationSaveData/m_fTargetAgitationCooldownTimer"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_fTargetAgitationCooldownTimer"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituationSaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SHeroEscortSituationSaveData/m_nID"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_nID"] = TYPE_UINT32;
        (*type_map)["SHeroEscortSituationSaveData/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituationSaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SHeroEscortSituationSaveData/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["SHeroEscortSituationSaveData/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituationSaveData/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["SHeroEscortSituationSaveData/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["SHeroEscortSituationSaveData/m_fTimeSinceLossOfSight"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituationSaveData>/m_fTimeSinceLossOfSight"] = TYPE_FLOAT32;
        (*type_map)["IContractObjective.STargetCondition/type"] = TYPE_ZSTRING;
        (*type_map)["TArray<IContractObjective.STargetCondition>/type"] = TYPE_ZSTRING;
        (*type_map)["IContractObjective.STargetCondition/hardCondition"] = TYPE_BOOL;
        (*type_map)["TArray<IContractObjective.STargetCondition>/hardCondition"] = TYPE_BOOL;
        (*type_map)["IContractObjective.STargetCondition/_a"] = TYPE_UINT32;
        (*type_map)["TArray<IContractObjective.STargetCondition>/_a"] = TYPE_UINT32;
        (*type_map)["IContractObjective.STargetCondition/_b"] = TYPE_UINT16;
        (*type_map)["TArray<IContractObjective.STargetCondition>/_b"] = TYPE_UINT16;
        (*type_map)["IContractObjective.STargetCondition/_c"] = TYPE_UINT16;
        (*type_map)["TArray<IContractObjective.STargetCondition>/_c"] = TYPE_UINT16;
        (*type_map)["IContractObjective.STargetCondition/_d"] = TYPE_UINT8;
        (*type_map)["TArray<IContractObjective.STargetCondition>/_d"] = TYPE_UINT8;
        (*type_map)["IContractObjective.STargetCondition/_e"] = TYPE_UINT8;
        (*type_map)["TArray<IContractObjective.STargetCondition>/_e"] = TYPE_UINT8;
        (*type_map)["IContractObjective.STargetCondition/_f"] = TYPE_UINT8;
        (*type_map)["TArray<IContractObjective.STargetCondition>/_f"] = TYPE_UINT8;
        (*type_map)["IContractObjective.STargetCondition/_g"] = TYPE_UINT8;
        (*type_map)["TArray<IContractObjective.STargetCondition>/_g"] = TYPE_UINT8;
        (*type_map)["IContractObjective.STargetCondition/_h"] = TYPE_UINT8;
        (*type_map)["TArray<IContractObjective.STargetCondition>/_h"] = TYPE_UINT8;
        (*type_map)["IContractObjective.STargetCondition/_i"] = TYPE_UINT8;
        (*type_map)["TArray<IContractObjective.STargetCondition>/_i"] = TYPE_UINT8;
        (*type_map)["IContractObjective.STargetCondition/_j"] = TYPE_UINT8;
        (*type_map)["TArray<IContractObjective.STargetCondition>/_j"] = TYPE_UINT8;
        (*type_map)["IContractObjective.STargetCondition/_k"] = TYPE_UINT8;
        (*type_map)["TArray<IContractObjective.STargetCondition>/_k"] = TYPE_UINT8;
        (*type_map)["IContractObjective.STargetCondition/sKillMethod"] = TYPE_ZSTRING;
        (*type_map)["TArray<IContractObjective.STargetCondition>/sKillMethod"] = TYPE_ZSTRING;
        (*type_map)["SHeroEscortSituation2SaveData/m_bActivated"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_bActivated"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituation2SaveData/m_bMayEscort"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_bMayEscort"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituation2SaveData/m_bTargetDead"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_bTargetDead"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituation2SaveData/m_bTargetInRange"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_bTargetInRange"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituation2SaveData/m_bAllEscortsAreDead"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_bAllEscortsAreDead"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituation2SaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituation2SaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituation2SaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituation2SaveData/m_bTargetIsMoving"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_bTargetIsMoving"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituation2SaveData/m_eTargetState"] = TYPE_ENUM;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_eTargetState"] = TYPE_ENUM;
        (*type_map)["SHeroEscortSituation2SaveData/m_eTargetEmotionState"] = TYPE_ENUM;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_eTargetEmotionState"] = TYPE_ENUM;
        (*type_map)["SHeroEscortSituation2SaveData/m_eTargetActState"] = TYPE_ENUM;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_eTargetActState"] = TYPE_ENUM;
        (*type_map)["SHeroEscortSituation2SaveData/m_fTargetNotMovingTime"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_fTargetNotMovingTime"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituation2SaveData/m_fTargetAgitationCooldownTimer"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_fTargetAgitationCooldownTimer"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituation2SaveData/m_rActor"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_rActor"] = TYPE_UINT32;
        (*type_map)["SHeroEscortSituation2SaveData/m_nID"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_nID"] = TYPE_UINT32;
        (*type_map)["SHeroEscortSituation2SaveData/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_bAllocatedForSituation"] = TYPE_BOOL;
        (*type_map)["SHeroEscortSituation2SaveData/m_eState"] = TYPE_ENUM;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_eState"] = TYPE_ENUM;
        (*type_map)["SHeroEscortSituation2SaveData/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_eStatePrevious"] = TYPE_ENUM;
        (*type_map)["SHeroEscortSituation2SaveData/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_fDistanceToTarget"] = TYPE_FLOAT32;
        (*type_map)["SHeroEscortSituation2SaveData/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_rCurrentScreenplay"] = TYPE_UINT32;
        (*type_map)["SHeroEscortSituation2SaveData/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_rPreferredIntermediateScreenplay"] = TYPE_UINT32;
        (*type_map)["SHeroEscortSituation2SaveData/m_fTimeSinceLossOfSight"] = TYPE_FLOAT32;
        (*type_map)["TArray<SHeroEscortSituation2SaveData>/m_fTimeSinceLossOfSight"] = TYPE_FLOAT32;
        (*type_map)["SIntelListDisplayInfoArray_dummy/index"] = TYPE_INT32;
        (*type_map)["TArray<SIntelListDisplayInfoArray_dummy>/index"] = TYPE_INT32;
        (*type_map)["SIntelListDisplayInfoArray_dummy/active"] = TYPE_BOOL;
        (*type_map)["TArray<SIntelListDisplayInfoArray_dummy>/active"] = TYPE_BOOL;
        (*type_map)["SIntelListDisplayInfoArray_dummy/newInfo"] = TYPE_BOOL;
        (*type_map)["TArray<SIntelListDisplayInfoArray_dummy>/newInfo"] = TYPE_BOOL;
        (*type_map)["SIntelListDisplayInfoArray_dummy/label"] = TYPE_ZSTRING;
        (*type_map)["TArray<SIntelListDisplayInfoArray_dummy>/label"] = TYPE_ZSTRING;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/label"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/label"] = TYPE_ZSTRING;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/silencer"] = TYPE_BOOL;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/silencer"] = TYPE_BOOL;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/count"] = TYPE_INT32;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/count"] = TYPE_INT32;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/ammo"] = TYPE_INT32;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/ammo"] = TYPE_INT32;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/weaponCategory"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/weaponCategory"] = TYPE_ZSTRING;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/nAmmoRemaining"] = TYPE_INT32;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/nAmmoRemaining"] = TYPE_INT32;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/nAmmoTotal"] = TYPE_INT32;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/nAmmoTotal"] = TYPE_INT32;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/nAmmoInClip"] = TYPE_INT32;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/nAmmoInClip"] = TYPE_INT32;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/nWeaponType"] = TYPE_INT32;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/nWeaponType"] = TYPE_INT32;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/itemCategory"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/itemCategory"] = TYPE_ZSTRING;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/itemCategoryLKey"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/itemCategoryLKey"] = TYPE_ZSTRING;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/inventoryCategoryIcon"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/inventoryCategoryIcon"] = TYPE_ZSTRING;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/sPoisonType"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/sPoisonType"] = TYPE_ZSTRING;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/notininventory"] = TYPE_BOOL;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/notininventory"] = TYPE_BOOL;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/isIllegal"] = TYPE_BOOL;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/isIllegal"] = TYPE_BOOL;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/actionName"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/actionName"] = TYPE_ZSTRING;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/longDescription"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/longDescription"] = TYPE_ZSTRING;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/missingText"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/missingText"] = TYPE_ZSTRING;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo/warningText"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo>/warningText"] = TYPE_ZSTRING;
        (*type_map)["SSentryGroupSaveData/m_rTarget"] = TYPE_UINT32;
        (*type_map)["TArray<SSentryGroupSaveData>/m_rTarget"] = TYPE_UINT32;
        (*type_map)["SSentryGroupSaveData/m_pLeader"] = TYPE_UINT32;
        (*type_map)["TArray<SSentryGroupSaveData>/m_pLeader"] = TYPE_UINT32;
        (*type_map)["SSentryGroupSaveData/m_rSentryZone"] = TYPE_UINT32;
        (*type_map)["TArray<SSentryGroupSaveData>/m_rSentryZone"] = TYPE_UINT32;
        (*type_map)["SSentryGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SSentryGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SSentryGroupSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SSentryGroupSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SSentryGroupSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SSentryGroupSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SSentryGroupSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SSentryGroupSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SSentryGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SSentryGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SSentryGroupSaveData/m_eActionPrompt"] = TYPE_ENUM;
        (*type_map)["TArray<SSentryGroupSaveData>/m_eActionPrompt"] = TYPE_ENUM;
        (*type_map)["SSentryGroupSaveData/m_bRequestedAction"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryGroupSaveData>/m_bRequestedAction"] = TYPE_BOOL;
        (*type_map)["SSentryGroupSaveData/m_bShowingWarning"] = TYPE_BOOL;
        (*type_map)["TArray<SSentryGroupSaveData>/m_bShowingWarning"] = TYPE_BOOL;
        (*type_map)["SHUDVisibilityController2SaveData/m_eCurrentRequest"] = TYPE_ENUM;
        (*type_map)["TArray<SHUDVisibilityController2SaveData>/m_eCurrentRequest"] = TYPE_ENUM;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_target"] = TYPE_INT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_target"] = TYPE_INT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_type"] = TYPE_ENUM;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_type"] = TYPE_ENUM;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_pLeader"] = TYPE_UINT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_pLeader"] = TYPE_UINT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_pAssistant"] = TYPE_UINT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_pAssistant"] = TYPE_UINT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_nLeaderApproachNode"] = TYPE_INT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_nLeaderApproachNode"] = TYPE_INT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_nAssistantApproachNode"] = TYPE_INT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_nAssistantApproachNode"] = TYPE_INT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_eApproachOrderState"] = TYPE_ENUM;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_eApproachOrderState"] = TYPE_ENUM;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_eStateStatus"] = TYPE_ENUM;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_state"] = TYPE_INT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_state"] = TYPE_INT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_prevState"] = TYPE_INT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_prevState"] = TYPE_INT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_bUsingRecurringDialog"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_bUsingRecurringDialog"] = TYPE_BOOL;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_bStartedInvestigateDialog"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_bStartedInvestigateDialog"] = TYPE_BOOL;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_bDelayInvestigateDialog"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_bDelayInvestigateDialog"] = TYPE_BOOL;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_bReservedOccupancy"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_bReservedOccupancy"] = TYPE_BOOL;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_bSilentInvestigation"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_bSilentInvestigation"] = TYPE_BOOL;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_bInvestigateDeadBody"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_bInvestigateDeadBody"] = TYPE_BOOL;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_bMultipleBodies"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_bMultipleBodies"] = TYPE_BOOL;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_bCheckSuspects"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_bCheckSuspects"] = TYPE_BOOL;
        (*type_map)["SCautiousInvestigateGroupSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_fInitialValue"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_fInitialValue"] = TYPE_FLOAT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_nFieldSize"] = TYPE_UINT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_nFieldSize"] = TYPE_UINT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_nGridCRC"] = TYPE_UINT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_nGridCRC"] = TYPE_UINT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_fInitialValue"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_fInitialValue"] = TYPE_FLOAT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_nFieldSize"] = TYPE_UINT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_nFieldSize"] = TYPE_UINT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_nGridCRC"] = TYPE_UINT32;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_nGridCRC"] = TYPE_UINT32;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_bValidTargetDistanceField"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_bValidTargetDistanceField"] = TYPE_BOOL;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_bValidTargetLOSField"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_bValidTargetLOSField"] = TYPE_BOOL;
        (*type_map)["SCautiousInvestigateGroupSaveData/m_bForceAcknowledge"] = TYPE_BOOL;
        (*type_map)["TArray<SCautiousInvestigateGroupSaveData>/m_bForceAcknowledge"] = TYPE_BOOL;
        (*type_map)["SActionRadialArcDisplayInfoArray_dummy/hidden"] = TYPE_BOOL;
        (*type_map)["TArray<SActionRadialArcDisplayInfoArray_dummy>/hidden"] = TYPE_BOOL;
        (*type_map)["SActionRadialArcDisplayInfoArray_dummy/locked"] = TYPE_BOOL;
        (*type_map)["TArray<SActionRadialArcDisplayInfoArray_dummy>/locked"] = TYPE_BOOL;
        (*type_map)["SActionRadialArcDisplayInfoArray_dummy/active"] = TYPE_BOOL;
        (*type_map)["TArray<SActionRadialArcDisplayInfoArray_dummy>/active"] = TYPE_BOOL;
        (*type_map)["SActionRadialArcDisplayInfoArray_dummy/illegal"] = TYPE_BOOL;
        (*type_map)["TArray<SActionRadialArcDisplayInfoArray_dummy>/illegal"] = TYPE_BOOL;
        (*type_map)["SActionRadialArcDisplayInfoArray_dummy/icon"] = TYPE_INT32;
        (*type_map)["TArray<SActionRadialArcDisplayInfoArray_dummy>/icon"] = TYPE_INT32;
        (*type_map)["SActionRadialArcDisplayInfoArray_dummy/label"] = TYPE_ZSTRING;
        (*type_map)["TArray<SActionRadialArcDisplayInfoArray_dummy>/label"] = TYPE_ZSTRING;
        (*type_map)["SInventoryMovementConfig/m_eItemHandlingRightHand"] = TYPE_ENUM;
        (*type_map)["TArray<SInventoryMovementConfig>/m_eItemHandlingRightHand"] = TYPE_ENUM;
        (*type_map)["SInventoryMovementConfig/m_eItemHandlingLeftHand"] = TYPE_ENUM;
        (*type_map)["TArray<SInventoryMovementConfig>/m_eItemHandlingLeftHand"] = TYPE_ENUM;
        (*type_map)["SInventoryMovementConfig/m_eFormerEquippedItems"] = TYPE_ENUM;
        (*type_map)["TArray<SInventoryMovementConfig>/m_eFormerEquippedItems"] = TYPE_ENUM;
        (*type_map)["SInventoryMovementConfig/m_eCustomRule"] = TYPE_ENUM;
        (*type_map)["TArray<SInventoryMovementConfig>/m_eCustomRule"] = TYPE_ENUM;
        (*type_map)["SInventoryMovementConfig/m_bDropBackHolsteredItem"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryMovementConfig>/m_bDropBackHolsteredItem"] = TYPE_BOOL;
        (*type_map)["SInventoryMovementConfig/m_bSlowAnimation"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryMovementConfig>/m_bSlowAnimation"] = TYPE_BOOL;
        (*type_map)["SInventoryMovementConfig/m_bForceInstantInventoryChange"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryMovementConfig>/m_bForceInstantInventoryChange"] = TYPE_BOOL;
        (*type_map)["SInventoryMovementConfig/m_bCancelIfInventoryInUse"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryMovementConfig>/m_bCancelIfInventoryInUse"] = TYPE_BOOL;
        (*type_map)["SInventoryMovementConfig/m_bSafeDrop"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryMovementConfig>/m_bSafeDrop"] = TYPE_BOOL;
        (*type_map)["SInventoryMovementConfig/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SInventoryMovementConfig>/x"] = TYPE_FLOAT32;
        (*type_map)["SInventoryMovementConfig/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SInventoryMovementConfig>/y"] = TYPE_FLOAT32;
        (*type_map)["SInventoryMovementConfig/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SInventoryMovementConfig>/z"] = TYPE_FLOAT32;
        (*type_map)["SInventoryMovementConfig/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SInventoryMovementConfig>/w"] = TYPE_FLOAT32;
        (*type_map)["ZSetPieceIconEntity.SIconData/iCategory"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZSetPieceIconEntity.SIconData>/iCategory"] = TYPE_ZSTRING;
        (*type_map)["ZSetPieceIconEntity.SIconData/iInteraction1"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZSetPieceIconEntity.SIconData>/iInteraction1"] = TYPE_ZSTRING;
        (*type_map)["ZSetPieceIconEntity.SIconData/iInteraction2"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZSetPieceIconEntity.SIconData>/iInteraction2"] = TYPE_ZSTRING;
        (*type_map)["ZSetPieceIconEntity.SIconData/iInteraction3"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZSetPieceIconEntity.SIconData>/iInteraction3"] = TYPE_ZSTRING;
        (*type_map)["ZSetPieceIconEntity.SIconData/sMissingToolText"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZSetPieceIconEntity.SIconData>/sMissingToolText"] = TYPE_ZSTRING;
        (*type_map)["ZSetPieceIconEntity.SIconData/bShowMissingTool"] = TYPE_BOOL;
        (*type_map)["TArray<ZSetPieceIconEntity.SIconData>/bShowMissingTool"] = TYPE_BOOL;
        (*type_map)["AI.Private.Details.SStimulus_AgentData_SaveData/m_AgentData"] = TYPE_UINT32;
        (*type_map)["TArray<AI.Private.Details.SStimulus_AgentData_SaveData>/m_AgentData"] = TYPE_UINT32;
        (*type_map)["ZEntityReference/m_sStr"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZEntityReference>/m_sStr"] = TYPE_ZSTRING;
        (*type_map)["ZEntityReference/m_sExposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZEntityReference>/m_sExposedEntity"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/label"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/label"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/containedLabel"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/containedLabel"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/description"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/description"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/silencer"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/silencer"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/count"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/count"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/ammo"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/ammo"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/weaponCategory"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/weaponCategory"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/nAmmoRemaining"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/nAmmoRemaining"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/nAmmoTotal"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/nAmmoTotal"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/nAmmoInClip"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/nAmmoInClip"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/nWeaponType"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/nWeaponType"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/nItemHUDType"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/nItemHUDType"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/itemCategory"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/itemCategory"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/itemCategoryLKey"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/itemCategoryLKey"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/inventoryCategoryIcon"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/inventoryCategoryIcon"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/isDroppable"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/isDroppable"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/isContainer"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/isContainer"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/containsItem"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/containsItem"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/nContainedItemHUDType"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/nContainedItemHUDType"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/bContainedItemIllegal"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/bContainedItemIllegal"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/bContainedItemSuspicious"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/bContainedItemSuspicious"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/bContainedItemDetectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/bContainedItemDetectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/detectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/detectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/suspicious"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/suspicious"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/illegal"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/illegal"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/canReload"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/canReload"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/sPoisonType"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/sPoisonType"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/label"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/label"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/containedLabel"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/containedLabel"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/description"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/description"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/silencer"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/silencer"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/count"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/count"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/ammo"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/ammo"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/weaponCategory"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/weaponCategory"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/nAmmoRemaining"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/nAmmoRemaining"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/nAmmoTotal"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/nAmmoTotal"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/nAmmoInClip"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/nAmmoInClip"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/nWeaponType"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/nWeaponType"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/nItemHUDType"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/nItemHUDType"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/itemCategory"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/itemCategory"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/itemCategoryLKey"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/itemCategoryLKey"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/inventoryCategoryIcon"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/inventoryCategoryIcon"] = TYPE_ZSTRING;
        (*type_map)["SInventoryUICache/isDroppable"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/isDroppable"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/isContainer"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/isContainer"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/containsItem"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/containsItem"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/nContainedItemHUDType"] = TYPE_INT32;
        (*type_map)["TArray<SInventoryUICache>/nContainedItemHUDType"] = TYPE_INT32;
        (*type_map)["SInventoryUICache/bContainedItemIllegal"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/bContainedItemIllegal"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/bContainedItemSuspicious"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/bContainedItemSuspicious"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/bContainedItemDetectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/bContainedItemDetectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/detectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/detectedDuringFrisk"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/suspicious"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/suspicious"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/illegal"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/illegal"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/canReload"] = TYPE_BOOL;
        (*type_map)["TArray<SInventoryUICache>/canReload"] = TYPE_BOOL;
        (*type_map)["SInventoryUICache/sPoisonType"] = TYPE_ZSTRING;
        (*type_map)["TArray<SInventoryUICache>/sPoisonType"] = TYPE_ZSTRING;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfoSlim/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfoSlim>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfoSlim/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfoSlim>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["SHudMissionTimerControllerData/m_nTicks"] = TYPE_INT64;
        (*type_map)["TArray<SHudMissionTimerControllerData>/m_nTicks"] = TYPE_INT64;
        (*type_map)["SHudMissionTimerControllerData/m_bWasIntroCutFired"] = TYPE_BOOL;
        (*type_map)["TArray<SHudMissionTimerControllerData>/m_bWasIntroCutFired"] = TYPE_BOOL;
        (*type_map)["SHUDPIPControllerSaveData/m_bPiPEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SHUDPIPControllerSaveData>/m_bPiPEnabled"] = TYPE_BOOL;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfoSlim/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfoSlim>/m_IDHigh"] = TYPE_UINT32;
        (*type_map)["ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfoSlim/m_IDLow"] = TYPE_UINT32;
        (*type_map)["TArray<ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfoSlim>/m_IDLow"] = TYPE_UINT32;
        (*type_map)["ZScopedER64/m_nEntityID"] = TYPE_UINT64;
        (*type_map)["TArray<ZScopedER64>/m_nEntityID"] = TYPE_UINT64;
        (*type_map)["ZScopedER64/m_sExposedEntity"] = TYPE_ZSTRING;
        (*type_map)["TArray<ZScopedER64>/m_sExposedEntity"] = TYPE_ZSTRING;
        (*type_map)["SSecuritySystemRecorderSaveData/m_bHasRecordings"] = TYPE_BOOL;
        (*type_map)["TArray<SSecuritySystemRecorderSaveData>/m_bHasRecordings"] = TYPE_BOOL;
        (*type_map)["SSecuritySystemRecorderSaveData/m_bIsFunctional"] = TYPE_BOOL;
        (*type_map)["TArray<SSecuritySystemRecorderSaveData>/m_bIsFunctional"] = TYPE_BOOL;
        (*type_map)["STrajectoryTrackSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/x"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/y"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/z"] = TYPE_FLOAT32;
        (*type_map)["STrajectoryTrackSaveData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<STrajectoryTrackSaveData>/w"] = TYPE_FLOAT32;
        (*type_map)["SAIVisionBlockerSaveData/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["TArray<SAIVisionBlockerSaveData>/m_bEnabled"] = TYPE_BOOL;
        (*type_map)["SCrowdMapData/m_nVersion"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdMapData>/m_nVersion"] = TYPE_UINT32;
        (*type_map)["SCrowdMapData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/m_nGridSizeX"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdMapData>/m_nGridSizeX"] = TYPE_UINT32;
        (*type_map)["SCrowdMapData/m_nGridSizeY"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdMapData>/m_nGridSizeY"] = TYPE_UINT32;
        (*type_map)["SCrowdMapData/m_nCellSizeX"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdMapData>/m_nCellSizeX"] = TYPE_UINT32;
        (*type_map)["SCrowdMapData/m_nCellSizeY"] = TYPE_UINT32;
        (*type_map)["TArray<SCrowdMapData>/m_nCellSizeY"] = TYPE_UINT32;
        (*type_map)["SCrowdMapData/m_nHeightOffset"] = TYPE_INT16;
        (*type_map)["TArray<SCrowdMapData>/m_nHeightOffset"] = TYPE_INT16;
        (*type_map)["SCrowdMapData/m_nOnNavGrid"] = TYPE_UINT8;
        (*type_map)["TArray<SCrowdMapData>/m_nOnNavGrid"] = TYPE_UINT8;
        (*type_map)["SCrowdMapData/m_fGridMapHeightOffsetsScale"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/m_fGridMapHeightOffsetsScale"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/m_fGridMapHeightOffsetsBias"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/m_fGridMapHeightOffsetsBias"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/m_nGroupFlowStartChannel"] = TYPE_INT32;
        (*type_map)["TArray<SCrowdMapData>/m_nGroupFlowStartChannel"] = TYPE_INT32;
        (*type_map)["SCrowdMapData/m_nGridCellSize"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/m_nGridCellSize"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/w"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/w"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/x"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/x"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/y"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/y"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/z"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/z"] = TYPE_FLOAT32;
        (*type_map)["SCrowdMapData/m_nGridGeneratorOffset"] = TYPE_FLOAT32;
        (*type_map)["TArray<SCrowdMapData>/m_nGridGeneratorOffset"] = TYPE_FLOAT32;
        (*type_map)["SActorIKControllerSaveData/m_fRightHandWeight"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorIKControllerSaveData>/m_fRightHandWeight"] = TYPE_FLOAT32;
        (*type_map)["SActorIKControllerSaveData/m_fLeftHandWeight"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorIKControllerSaveData>/m_fLeftHandWeight"] = TYPE_FLOAT32;
        (*type_map)["SActorIKControllerSaveData/m_fRightHandTargetWeight"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorIKControllerSaveData>/m_fRightHandTargetWeight"] = TYPE_FLOAT32;
        (*type_map)["SActorIKControllerSaveData/m_fLeftHandTargetWeight"] = TYPE_FLOAT32;
        (*type_map)["TArray<SActorIKControllerSaveData>/m_fLeftHandTargetWeight"] = TYPE_FLOAT32;
        (*type_map)["EItemMeleeDamageBehavior"] = TYPE_ENUM;
        (*type_map)["ZStateControllerEntity.WrapMode"] = TYPE_ENUM;
        (*type_map)["ZFriskSuspectGroup.EAssistantState"] = TYPE_ENUM;
        (*type_map)["ZRenderPostfilterParametersEntity.EHDRGlareType"] = TYPE_ENUM;
        (*type_map)["ZOperatorBool.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["EGSEvent"] = TYPE_ENUM;
        (*type_map)["ZCautiousInvestigateGroup.EApproachOrderState"] = TYPE_ENUM;
        (*type_map)["EGSKillSituation"] = TYPE_ENUM;
        (*type_map)["ZHUDCamera3DControllerEntity.ESpace"] = TYPE_ENUM;
        (*type_map)["ETessellationMode"] = TYPE_ENUM;
        (*type_map)["EBystanderPointType"] = TYPE_ENUM;
        (*type_map)["_EUIOptionKey"] = TYPE_ENUM;
        (*type_map)["EVRConfigCameraRotationAllowed"] = TYPE_ENUM;
        (*type_map)["ZInteractionGuideData.EDirection"] = TYPE_ENUM;
        (*type_map)["ZInteractionData.EFilterResult"] = TYPE_ENUM;
        (*type_map)["ZHeroEscortSituation2Entity.ETargetState"] = TYPE_ENUM;
        (*type_map)["EOutfitAICategory"] = TYPE_ENUM;
        (*type_map)["ESoundChannelGroup"] = TYPE_ENUM;
        (*type_map)["ZActorKeywordCondition.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["EGSExplodingPropType"] = TYPE_ENUM;
        (*type_map)["ZCrowdActorEntity.ECharacterSoundType"] = TYPE_ENUM;
        (*type_map)["eItemType"] = TYPE_ENUM;
        (*type_map)["EDebugExclusionLayerState"] = TYPE_ENUM;
        (*type_map)["ILightEntity.ELightType"] = TYPE_ENUM;
        (*type_map)["ZPhotoModeMenuDataProvider.EMenuEntryType"] = TYPE_ENUM;
        (*type_map)["EOnlinTest"] = TYPE_ENUM;
        (*type_map)["eContractSessionStartError"] = TYPE_ENUM;
        (*type_map)["EParticleColorUsage"] = TYPE_ENUM;
        (*type_map)["EGameModeId"] = TYPE_ENUM;
        (*type_map)["ZActBehaviorEntity.EApproachAlignment"] = TYPE_ENUM;
        (*type_map)["ILightEntity.EFrameIndexStrategy"] = TYPE_ENUM;
        (*type_map)["EViewportLock"] = TYPE_ENUM;
        (*type_map)["ZInputListenerDpadEntity.eInputListenerDpad"] = TYPE_ENUM;
        (*type_map)["ZEscortSituation2Entity.ETargetState"] = TYPE_ENUM;
        (*type_map)["ZTrespassingSituation.ESituationState"] = TYPE_ENUM;
        (*type_map)["EAIFormationMemberSpeed"] = TYPE_ENUM;
        (*type_map)["ERenderGlowTypes"] = TYPE_ENUM;
        (*type_map)["EFocusBarState"] = TYPE_ENUM;
        (*type_map)["ESoundCollisionObjectType"] = TYPE_ENUM;
        (*type_map)["ZDistanceCondition.ECompareMethod"] = TYPE_ENUM;
        (*type_map)["TeleportActionType"] = TYPE_ENUM;
        (*type_map)["EActorAIState"] = TYPE_ENUM;
        (*type_map)["EMorphemeEventId"] = TYPE_ENUM;
        (*type_map)["EAccidentScaleContext"] = TYPE_ENUM;
        (*type_map)["EEngineModeId"] = TYPE_ENUM;
        (*type_map)["ZActBehaviorEntity.EState"] = TYPE_ENUM;
        (*type_map)["ZSoundAmbienceGroup.ESoundCollisionType"] = TYPE_ENUM;
        (*type_map)["EDamageEvent"] = TYPE_ENUM;
        (*type_map)["ZDebugGizmoEntity.EDrawLayer"] = TYPE_ENUM;
        (*type_map)["ZCoverPlane.ECoverSize"] = TYPE_ENUM;
        (*type_map)["EAnimSetType"] = TYPE_ENUM;
        (*type_map)["ZContextKillGuide.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["EMassImpulseType"] = TYPE_ENUM;
        (*type_map)["ReverbFidelity"] = TYPE_ENUM;
        (*type_map)["EDifficultyLevel"] = TYPE_ENUM;
        (*type_map)["ECharacterCollidableLayer"] = TYPE_ENUM;
        (*type_map)["ZHUDOutfitWidgetControllerEntity.EVisibilityPolicy"] = TYPE_ENUM;
        (*type_map)["ESmartWaitCondition"] = TYPE_ENUM;
        (*type_map)["ZActorPickerEffectTrack.EEffectPhaseAction"] = TYPE_ENUM;
        (*type_map)["ERegionId"] = TYPE_ENUM;
        (*type_map)["ZTestGroupPath.EModifierType"] = TYPE_ENUM;
        (*type_map)["ZCautiousSearchGroup.EAssistantState"] = TYPE_ENUM;
        (*type_map)["EAnimationPose"] = TYPE_ENUM;
        (*type_map)["EActorLookAtStopReason"] = TYPE_ENUM;
        (*type_map)["ZHM5Item.EUseTypes"] = TYPE_ENUM;
        (*type_map)["EHM5SoundFootwearType"] = TYPE_ENUM;
        (*type_map)["ECharacterIdleHandlerFullbodyType"] = TYPE_ENUM;
        (*type_map)["ZValueBool_Operation_Signal.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["ZCautiousInvestigateGroup.EInvestigateGroupState"] = TYPE_ENUM;
        (*type_map)["IHM5Door.eCloseMode"] = TYPE_ENUM;
        (*type_map)["EParticleSpritePivotLocation"] = TYPE_ENUM;
        (*type_map)["WebSocketUtils.EOpCode"] = TYPE_ENUM;
        (*type_map)["EVRConfigAnimationMode"] = TYPE_ENUM;
        (*type_map)["EAnimSetState"] = TYPE_ENUM;
        (*type_map)["ZRenderPostfilterParametersEntity.EHDRToneMapType"] = TYPE_ENUM;
        (*type_map)["SFootIKEventData.EFoot"] = TYPE_ENUM;
        (*type_map)["EHM5GameInputFlag"] = TYPE_ENUM;
        (*type_map)["EDramaStateFlag"] = TYPE_ENUM;
        (*type_map)["ZHeroEscortSituation2Entity.EEscortState"] = TYPE_ENUM;
        (*type_map)["EActorState"] = TYPE_ENUM;
        (*type_map)["SActorSoundDefs.EDefinition"] = TYPE_ENUM;
        (*type_map)["ZKeywordCondition.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["EBehaviorTreeVariableType"] = TYPE_ENUM;
        (*type_map)["EActorPerceptionSensitivity"] = TYPE_ENUM;
        (*type_map)["ECharacterStateTransitionAttempt"] = TYPE_ENUM;
        (*type_map)["ETakeDownState"] = TYPE_ENUM;
        (*type_map)["ESequencePreviewState"] = TYPE_ENUM;
        (*type_map)["ECameraState"] = TYPE_ENUM;
        (*type_map)["IContractObjective.ObjectiveType"] = TYPE_ENUM;
        (*type_map)["ZAISoundEvent.ELoudness"] = TYPE_ENUM;
        (*type_map)["ZStandOffSituation.ESituationState"] = TYPE_ENUM;
        (*type_map)["ECppTypeFlags"] = TYPE_ENUM;
        (*type_map)["ESynchronisedActionState"] = TYPE_ENUM;
        (*type_map)["EInventoryConfigItemHandling"] = TYPE_ENUM;
        (*type_map)["ZUISubtitleDataProvider.EAlignment"] = TYPE_ENUM;
        (*type_map)["ECollidableLayer"] = TYPE_ENUM;
        (*type_map)["EGSKillVictim"] = TYPE_ENUM;
        (*type_map)["IContractEvaluationContextListener.EListenerType"] = TYPE_ENUM;
        (*type_map)["IRenderCompositorEntity.EMode"] = TYPE_ENUM;
        (*type_map)["ZActorKnowledgeCondition.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["IHM5Door.EOpenMode"] = TYPE_ENUM;
        (*type_map)["EHeroGameState"] = TYPE_ENUM;
        (*type_map)["EMarkerInclusionMode"] = TYPE_ENUM;
        (*type_map)["ZHM5ItemInteractionEventConsumer.EHM5SoundItemInteractionEvent"] = TYPE_ENUM;
        (*type_map)["ETargetType"] = TYPE_ENUM;
        (*type_map)["ETessellationFactorMode"] = TYPE_ENUM;
        (*type_map)["ZHM5GenericEventConsumer.EEvent"] = TYPE_ENUM;
        (*type_map)["EActorBumpType"] = TYPE_ENUM;
        (*type_map)["EHM5SoundFootstepStance"] = TYPE_ENUM;
        (*type_map)["EGestureCategory"] = TYPE_ENUM;
        (*type_map)["ZOnlineManager.EIoiAccountState"] = TYPE_ENUM;
        (*type_map)["ETimerEntityCommandType"] = TYPE_ENUM;
        (*type_map)["ZValueInt_Comparator_Poll.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["eWeaponOperation"] = TYPE_ENUM;
        (*type_map)["ERayDetailLevel"] = TYPE_ENUM;
        (*type_map)["EVictimMovementType"] = TYPE_ENUM;
        (*type_map)["ZHM5WeaponBasicConfigEntity.EWeaponBasicConfigAudioImpactType"] = TYPE_ENUM;
        (*type_map)["ECameraShakerChannel"] = TYPE_ENUM;
        (*type_map)["CrowdUtil.ECrowdActorMood"] = TYPE_ENUM;
        (*type_map)["EItemLocation"] = TYPE_ENUM;
        (*type_map)["ESituationType"] = TYPE_ENUM;
        (*type_map)["ZContextKillGuide.EContextKillType"] = TYPE_ENUM;
        (*type_map)["MenuWeaponUpgradeData.EUpgradeAction"] = TYPE_ENUM;
        (*type_map)["ZUIPerformanceTestMetricsCollectorEntity.EVsyncPolicy"] = TYPE_ENUM;
        (*type_map)["EBoolStateRequirement"] = TYPE_ENUM;
        (*type_map)["EIntelType"] = TYPE_ENUM;
        (*type_map)["EMultiplayerLobbyRequestType"] = TYPE_ENUM;
        (*type_map)["ERayLayer"] = TYPE_ENUM;
        (*type_map)["EExclusionLayer"] = TYPE_ENUM;
        (*type_map)["ZHeroEscortSituationEntity.EEscortState"] = TYPE_ENUM;
        (*type_map)["EConversationRole"] = TYPE_ENUM;
        (*type_map)["AudioEventCullingBehavior"] = TYPE_ENUM;
        (*type_map)["Network.PacketPriority"] = TYPE_ENUM;
        (*type_map)["EReplicaMode"] = TYPE_ENUM;
        (*type_map)["ZValueInt_Comparator.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["ZSpatialEntity.ERoomBehaviour"] = TYPE_ENUM;
        (*type_map)["ZOnlineManager.EError"] = TYPE_ENUM;
        (*type_map)["EDetachUsage"] = TYPE_ENUM;
        (*type_map)["ZActorPicker.EKeywordEvaluationType"] = TYPE_ENUM;
        (*type_map)["EDestructibleInteractionType"] = TYPE_ENUM;
        (*type_map)["EGameEventType"] = TYPE_ENUM;
        (*type_map)["EPhysicsObjectType"] = TYPE_ENUM;
        (*type_map)["eParticleEmitterMeshEntity_SpawnModes"] = TYPE_ENUM;
        (*type_map)["eWeaponType"] = TYPE_ENUM;
        (*type_map)["ERatingTitle"] = TYPE_ENUM;
        (*type_map)["ECameraControls"] = TYPE_ENUM;
        (*type_map)["ECollidableShape"] = TYPE_ENUM;
        (*type_map)["EHM5SoundRicochetType"] = TYPE_ENUM;
        (*type_map)["ZUISplashHintDataProviderEntity.ESplashHintType"] = TYPE_ENUM;
        (*type_map)["ZHM5GameTimeMultiplierEntity.eTMLDReason"] = TYPE_ENUM;
        (*type_map)["ZInteractionEventConsumer.EEvent"] = TYPE_ENUM;
        (*type_map)["ZHM5IndicatorManager.EIndicatorType"] = TYPE_ENUM;
        (*type_map)["BoneId.Enum"] = TYPE_ENUM;
        (*type_map)["ZVsTargetPicker.ETargetSelectionType"] = TYPE_ENUM;
        (*type_map)["ZAvoidDangerousAreaGroup.EAvoidDangerousAreaGroupState"] = TYPE_ENUM;
        (*type_map)["EActorLookAtTargetType"] = TYPE_ENUM;
        (*type_map)["ECustomSoundDefType"] = TYPE_ENUM;
        (*type_map)["EWeaponSpecialSituation"] = TYPE_ENUM;
        (*type_map)["EAIModifierScope"] = TYPE_ENUM;
        (*type_map)["ZHM5WeaponEventConsumer.EAnimWeapon"] = TYPE_ENUM;
        (*type_map)["EStashpointContainedEntityType"] = TYPE_ENUM;
        (*type_map)["ESoundCollisionType"] = TYPE_ENUM;
        (*type_map)["ICloset.EClosetType"] = TYPE_ENUM;
        (*type_map)["EHitmanPermissionFlag"] = TYPE_ENUM;
        (*type_map)["EActionRadialArcIconType"] = TYPE_ENUM;
        (*type_map)["EParticleDecalSpawnEntity_Constraints"] = TYPE_ENUM;
        (*type_map)["ZActBehaviorEntity.ERotationAlignment"] = TYPE_ENUM;
        (*type_map)["ZPatrolBehaviorEntity.ERotationAlignment"] = TYPE_ENUM;
        (*type_map)["EAnimBlendMode"] = TYPE_ENUM;
        (*type_map)["ETeamModeId"] = TYPE_ENUM;
        (*type_map)["ZUIControlEntity.EScaleMode"] = TYPE_ENUM;
        (*type_map)["ZInputListenerActorPool.eInputListenerButtons"] = TYPE_ENUM;
        (*type_map)["ERuntimeMemoryAllocationState"] = TYPE_ENUM;
        (*type_map)["CrowdRegionType"] = TYPE_ENUM;
        (*type_map)["EDramaEventAction"] = TYPE_ENUM;
        (*type_map)["ZRecoverUnconsciousGroup.EInvestigateGroupState"] = TYPE_ENUM;
        (*type_map)["ECharacterActionRequests"] = TYPE_ENUM;
        (*type_map)["ZHM5HIKEventConsumer.EBlend"] = TYPE_ENUM;
        (*type_map)["EWeaponUpgradeIcon"] = TYPE_ENUM;
        (*type_map)["ECollisionResponse"] = TYPE_ENUM;
        (*type_map)["ZDramaSituationEntity.EReentryBehavior"] = TYPE_ENUM;
        (*type_map)["IScatterContainerEntity.EResizeMode"] = TYPE_ENUM;
        (*type_map)["ZBoneWeightRotationEntity.eRotationAxises"] = TYPE_ENUM;
        (*type_map)["EGameTension"] = TYPE_ENUM;
        (*type_map)["ERegionMask"] = TYPE_ENUM;
        (*type_map)["ECharacterAnimEvent"] = TYPE_ENUM;
        (*type_map)["EMatchOverCondition"] = TYPE_ENUM;
        (*type_map)["CrowdUtil.ECrowdStandingPush"] = TYPE_ENUM;
        (*type_map)["EDialogueLine"] = TYPE_ENUM;
        (*type_map)["EPostProcessorComponentType"] = TYPE_ENUM;
        (*type_map)["WebSocketUtils.ECloseStatus"] = TYPE_ENUM;
        (*type_map)["EControlButtonName"] = TYPE_ENUM;
        (*type_map)["ZInvestigateDisguiseGroup.EState"] = TYPE_ENUM;
        (*type_map)["ECOMUsage"] = TYPE_ENUM;
        (*type_map)["EAIEventType"] = TYPE_ENUM;
        (*type_map)["EHM5SoundCloseCombatEvent"] = TYPE_ENUM;
        (*type_map)["EVirtualPlatformID"] = TYPE_ENUM;
        (*type_map)["eAmmoType"] = TYPE_ENUM;
        (*type_map)["ZEntityPropertyReplica.EReplicationStrategy"] = TYPE_ENUM;
        (*type_map)["ZApproachOrder.EApproachStyle"] = TYPE_ENUM;
        (*type_map)["ZInvestigateCautiousSituation.EBystanderState"] = TYPE_ENUM;
        (*type_map)["ZSmuggleSituationEntity.ESmuggleState"] = TYPE_ENUM;
        (*type_map)["ZSniperCombatSituation.ESituationState"] = TYPE_ENUM;
        (*type_map)["EOnlineEventInvestigationType"] = TYPE_ENUM;
        (*type_map)["IItemWeapon.EDeadlyThrowType"] = TYPE_ENUM;
        (*type_map)["EValueUpdateStrategy"] = TYPE_ENUM;
        (*type_map)["ZEscortSituationEntity.ETargetState"] = TYPE_ENUM;
        (*type_map)["IRenderCompositorEntity.EViewportAnchor"] = TYPE_ENUM;
        (*type_map)["ECoverPosition"] = TYPE_ENUM;
        (*type_map)["EAgilityState"] = TYPE_ENUM;
        (*type_map)["SUITestData.ETestEnum"] = TYPE_ENUM;
        (*type_map)["EVRConfigCinemaMode"] = TYPE_ENUM;
        (*type_map)["EOutfitType"] = TYPE_ENUM;
        (*type_map)["ZActorTensionEntity.ETensionCheckMode"] = TYPE_ENUM;
        (*type_map)["EUbitusRequest"] = TYPE_ENUM;
        (*type_map)["ZScreenplay.EState"] = TYPE_ENUM;
        (*type_map)["EDifficultyParameter"] = TYPE_ENUM;
        (*type_map)["ZInputListenerButtonEntity.eInputListenerButtons"] = TYPE_ENUM;
        (*type_map)["EEquipAbility"] = TYPE_ENUM;
        (*type_map)["EAISituationEvent"] = TYPE_ENUM;
        (*type_map)["ZLeadEscortSituationEntity.EEscortState"] = TYPE_ENUM;
        (*type_map)["ZSniperCombatGroup.EGroupState"] = TYPE_ENUM;
        (*type_map)["EVolumeTriggerEntityTypeFlags"] = TYPE_ENUM;
        (*type_map)["ZSetUIControlDisplayInfoEntity.EVisibilityOp"] = TYPE_ENUM;
        (*type_map)["EActionPromptState"] = TYPE_ENUM;
        (*type_map)["ZMoveToPositionBehaviorEntity.ERotationAlignment"] = TYPE_ENUM;
        (*type_map)["ESaveType"] = TYPE_ENUM;
        (*type_map)["ZHM5WeaponBasicConfigEntity.EWeaponBasicConfigAudioFireType"] = TYPE_ENUM;
        (*type_map)["EButtonPressType"] = TYPE_ENUM;
        (*type_map)["EImpactEffectsOptions"] = TYPE_ENUM;
        (*type_map)["EBooleanOption"] = TYPE_ENUM;
        (*type_map)["EStandRepositionStrategy"] = TYPE_ENUM;
        (*type_map)["ZLookAtLogic.EAxisSelect"] = TYPE_ENUM;
        (*type_map)["ESituationStateChangeReason"] = TYPE_ENUM;
        (*type_map)["EMaterialRegistrationState"] = TYPE_ENUM;
        (*type_map)["ZRenderPostfilterParametersEntity.EDOFBlurType"] = TYPE_ENUM;
        (*type_map)["CrowdReactionAIEventType"] = TYPE_ENUM;
        (*type_map)["ZHeroEscortSituationEntity.ETargetState"] = TYPE_ENUM;
        (*type_map)["ZHitmanLocomotionQuery.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["CrowdUtil.EDefaultStateTypes"] = TYPE_ENUM;
        (*type_map)["ZAIPerceptibleEntity.EReactionBehaviorMode"] = TYPE_ENUM;
        (*type_map)["EGameEventArgType"] = TYPE_ENUM;
        (*type_map)["ZCautiousSearchGroup.ESearchGroupState"] = TYPE_ENUM;
        (*type_map)["EVRConfigRotationType"] = TYPE_ENUM;
        (*type_map)["IRoomEntity.EReasoningGridImportance"] = TYPE_ENUM;
        (*type_map)["EFSMInternalEvent"] = TYPE_ENUM;
        (*type_map)["ZOnlineManager.EState"] = TYPE_ENUM;
        (*type_map)["ZDebugHM5GameTimeMultiplierEnt.eTMLDReason"] = TYPE_ENUM;
        (*type_map)["ECautiousDisturbanceState"] = TYPE_ENUM;
        (*type_map)["ZValueBool_Operation.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["IContractObjective.SCounterData.ECounterType"] = TYPE_ENUM;
        (*type_map)["ECCNodeType"] = TYPE_ENUM;
        (*type_map)["ZHM5CrowdGenericEventConsumer.EEvent"] = TYPE_ENUM;
        (*type_map)["EFontFlags"] = TYPE_ENUM;
        (*type_map)["EDeathBehavior"] = TYPE_ENUM;
        (*type_map)["CrowdMapImpl.CellFlags"] = TYPE_ENUM;
        (*type_map)["ZBoneAttachEntity.EResetMode"] = TYPE_ENUM;
        (*type_map)["EAIModifiers"] = TYPE_ENUM;
        (*type_map)["ESoundGateType"] = TYPE_ENUM;
        (*type_map)["ZVRCameraEntity.ETurnMode"] = TYPE_ENUM;
        (*type_map)["ZChannelKeywordCondition.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["ZUIFlowLayoutEntity.EFlowType"] = TYPE_ENUM;
        (*type_map)["ZTrackDollyControllerQueryEntity.ETrackPointQueryType"] = TYPE_ENUM;
        (*type_map)["ESubcontrollerInventorySlot"] = TYPE_ENUM;
        (*type_map)["IHM5Door.EInitialState"] = TYPE_ENUM;
        (*type_map)["EActionType"] = TYPE_ENUM;
        (*type_map)["ERANDOM_DISTRIBUTION"] = TYPE_ENUM;
        (*type_map)["InputControlNamesp.eHM5InputActionType"] = TYPE_ENUM;
        (*type_map)["ERatingCategory"] = TYPE_ENUM;
        (*type_map)["EDebugSpatialInfoVerbosity"] = TYPE_ENUM;
        (*type_map)["EPlayMode"] = TYPE_ENUM;
        (*type_map)["ZHM5FaceFXSpecificEventConsumer.EEvent"] = TYPE_ENUM;
        (*type_map)["EIKEndEffector"] = TYPE_ENUM;
        (*type_map)["EHintMessageType"] = TYPE_ENUM;
        (*type_map)["EHUDMessageStatus"] = TYPE_ENUM;
        (*type_map)["ERequirementId"] = TYPE_ENUM;
        (*type_map)["ZSecuritySystemCameraConfiguration.ECameraEscalationSituations"] = TYPE_ENUM;
        (*type_map)["EConstraintType"] = TYPE_ENUM;
        (*type_map)["EVRIKElementMode"] = TYPE_ENUM;
        (*type_map)["EObjectiveType"] = TYPE_ENUM;
        (*type_map)["EWeaponUpgradeUse"] = TYPE_ENUM;
        (*type_map)["EActorSoundDefs"] = TYPE_ENUM;
        (*type_map)["Network.OrderingChannel"] = TYPE_ENUM;
        (*type_map)["ZRenderPostfilterParametersEntity.EHDRAdaptationType"] = TYPE_ENUM;
        (*type_map)["ECheatGroup"] = TYPE_ENUM;
        (*type_map)["EReplicaOperation"] = TYPE_ENUM;
        (*type_map)["ECCEmitterEffect"] = TYPE_ENUM;
        (*type_map)["ECommunicationBarState"] = TYPE_ENUM;
        (*type_map)["EButtonDisplay"] = TYPE_ENUM;
        (*type_map)["ZValueBool_OperationRecalc.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["EHM5SoundBulletType"] = TYPE_ENUM;
        (*type_map)["EContinuity"] = TYPE_ENUM;
        (*type_map)["EVRRenderingMode"] = TYPE_ENUM;
        (*type_map)["ZHM5WeaponBasicConfigEntity.EWeaponBasicConfigAudioHeadTailType"] = TYPE_ENUM;
        (*type_map)["ECharacterFullBodyStateType"] = TYPE_ENUM;
        (*type_map)["EControllerButton"] = TYPE_ENUM;
        (*type_map)["ZCautiousBackupGroup.EGroupState"] = TYPE_ENUM;
        (*type_map)["ZHM5HitmanHealthModifier.EHealthDrainType"] = TYPE_ENUM;
        (*type_map)["ERayType"] = TYPE_ENUM;
        (*type_map)["ZHM5BodyContainer.EBCBodyMode"] = TYPE_ENUM;
        (*type_map)["ESoundMaterialType"] = TYPE_ENUM;
        (*type_map)["EScreenAnchor"] = TYPE_ENUM;
        (*type_map)["eHitmanPermissionReason"] = TYPE_ENUM;
        (*type_map)["EActorAnimationOrder"] = TYPE_ENUM;
        (*type_map)["ESpeed"] = TYPE_ENUM;
        (*type_map)["ESeamFixMode"] = TYPE_ENUM;
        (*type_map)["ESyncEvent"] = TYPE_ENUM;
        (*type_map)["CrowdUtil.ECrowdDirection"] = TYPE_ENUM;
        (*type_map)["ZPreferenceItemEntity.EBoolOptions"] = TYPE_ENUM;
        (*type_map)["ZHM5WeaponBasicConfigEntity.EWeaponBasicConfigAudioFamily"] = TYPE_ENUM;
        (*type_map)["ZStandOffSituation.EDialogState"] = TYPE_ENUM;
        (*type_map)["ZCameraConeTriggerEntity.EAlignment"] = TYPE_ENUM;
        (*type_map)["ZHeroInventoryAction.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["IContractObjective.Category"] = TYPE_ENUM;
        (*type_map)["ZHM5LedgeMount.ELedgeEndState"] = TYPE_ENUM;
        (*type_map)["EHUDElement"] = TYPE_ENUM;
        (*type_map)["ZHUDCamera3DControllerEntity.EMode"] = TYPE_ENUM;
        (*type_map)["ZHUDTimerInstance.ETimeFormatChoice"] = TYPE_ENUM;
        (*type_map)["ECollidablesType"] = TYPE_ENUM;
        (*type_map)["EParticleModifierImpulseDirections"] = TYPE_ENUM;
        (*type_map)["EItemPoisonType"] = TYPE_ENUM;
        (*type_map)["EScreenplayTriggerEvent"] = TYPE_ENUM;
        (*type_map)["ETakeDownAnim"] = TYPE_ENUM;
        (*type_map)["eVRFadeType"] = TYPE_ENUM;
        (*type_map)["ZLogicMultipleGate.EGateType"] = TYPE_ENUM;
        (*type_map)["ZActBehaviorEntity.EMovementType"] = TYPE_ENUM;
        (*type_map)["ZPatrolBehaviorEntity.EMovementType"] = TYPE_ENUM;
        (*type_map)["EUIActionGroupIcon"] = TYPE_ENUM;
        (*type_map)["ESilenceRating"] = TYPE_ENUM;
        (*type_map)["GameLobbyState"] = TYPE_ENUM;
        (*type_map)["EVRConfigHeadAnchorMode"] = TYPE_ENUM;
        (*type_map)["EFilterMaskBit"] = TYPE_ENUM;
        (*type_map)["ECollisionPriority"] = TYPE_ENUM;
        (*type_map)["ZActStateCondition.EState"] = TYPE_ENUM;
        (*type_map)["ELedgeDismountBehavior"] = TYPE_ENUM;
        (*type_map)["IContractObjective.Type"] = TYPE_ENUM;
        (*type_map)["ZValueInt_Evaluation.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["IScatterContainerEntity.ECanvasSize"] = TYPE_ENUM;
        (*type_map)["ZMoveToOrder.EMoveSpeed"] = TYPE_ENUM;
        (*type_map)["ECCDecalEffect"] = TYPE_ENUM;
        (*type_map)["ZContractObjectiveHudHintEntity.EObjectiveHintIcon"] = TYPE_ENUM;
        (*type_map)["IScatterContainerEntity.ECanvasClearMode"] = TYPE_ENUM;
        (*type_map)["ESpeechPriority"] = TYPE_ENUM;
        (*type_map)["EActorRole"] = TYPE_ENUM;
        (*type_map)["ECCWeaponAnimSet"] = TYPE_ENUM;
        (*type_map)["ECompiledBehaviorType"] = TYPE_ENUM;
        (*type_map)["EItemHUDType"] = TYPE_ENUM;
        (*type_map)["ZDetectedInPrivateGroup.EInvestigateGroupState"] = TYPE_ENUM;
        (*type_map)["ZActorPickerFilterKeyword.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["ZConditionListEntity.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["ENetworkSystemID"] = TYPE_ENUM;
        (*type_map)["ZHM5FaceFXReactionEventConsumer.EEvent"] = TYPE_ENUM;
        (*type_map)["ZDebugSpatialEntity.EDrawLayer"] = TYPE_ENUM;
        (*type_map)["EIntelTensionLevel"] = TYPE_ENUM;
        (*type_map)["CrowdUtil.ECrowdSide"] = TYPE_ENUM;
        (*type_map)["ESentryActionPrompt"] = TYPE_ENUM;
        (*type_map)["EInventoryConfigCustomRule"] = TYPE_ENUM;
        (*type_map)["ZItemSpawner.EPhysicsMode"] = TYPE_ENUM;
        (*type_map)["ICameraEntity.EProjectionType"] = TYPE_ENUM;
        (*type_map)["EBIEventTypes"] = TYPE_ENUM;
        (*type_map)["EInteractionInputType"] = TYPE_ENUM;
        (*type_map)["ZDeadBodySituation.ESituationFlavor"] = TYPE_ENUM;
        (*type_map)["ZSetVisibleEntity.StartBehavior"] = TYPE_ENUM;
        (*type_map)["ZBoxReflectionEntity.EBoundsType"] = TYPE_ENUM;
        (*type_map)["ERatingTitleRequirement"] = TYPE_ENUM;
        (*type_map)["EVRIKElement"] = TYPE_ENUM;
        (*type_map)["STestStruct.ETestEnum"] = TYPE_ENUM;
        (*type_map)["ZHM5BodySoundEventConsumer.EAnimSoundBody"] = TYPE_ENUM;
        (*type_map)["ECCNodeSubtype"] = TYPE_ENUM;
        (*type_map)["ZPIPMessageEntity.EIcon"] = TYPE_ENUM;
        (*type_map)["EWaypointRotationAlignment"] = TYPE_ENUM;
        (*type_map)["EHintMessageSoundType"] = TYPE_ENUM;
        (*type_map)["EAsyncRaycastsGroup"] = TYPE_ENUM;
        (*type_map)["EKnownEntityType"] = TYPE_ENUM;
        (*type_map)["ZActorAccessoryItemCondition.EConditionTypes"] = TYPE_ENUM;
        (*type_map)["ZHM5DynamicRayCastEntity.ECollideType"] = TYPE_ENUM;
        (*type_map)["ZCausalNodeEntity.ECauseEvaluationType"] = TYPE_ENUM;
        (*type_map)["ESoundGateFlags"] = TYPE_ENUM;
        (*type_map)["CrowdUtil.EGenderReq"] = TYPE_ENUM;
        (*type_map)["EInteractionIndicatorState"] = TYPE_ENUM;
        (*type_map)["EActorLookAtPriority"] = TYPE_ENUM;
        (*type_map)["ZCameraPlaneTriggerEntity.EAlignment"] = TYPE_ENUM;
        (*type_map)["ECharacterAnimEventState"] = TYPE_ENUM;
        (*type_map)["ZFriskSuspectGroup.EHitmanGreetState"] = TYPE_ENUM;
        (*type_map)["SDoorSoundDefs.EDefinition"] = TYPE_ENUM;
        (*type_map)["ZActorPickerEffectDrama.EEffectPhaseAction"] = TYPE_ENUM;
        (*type_map)["ZAudioSequenceTrack.EPlaybackTarget"] = TYPE_ENUM;
        (*type_map)["EItemModifierType"] = TYPE_ENUM;
        (*type_map)["EAISituation"] = TYPE_ENUM;
        (*type_map)["EScreenPlayState"] = TYPE_ENUM;
        (*type_map)["EDramaSituationDescriptors"] = TYPE_ENUM;
        (*type_map)["ERagdollPart"] = TYPE_ENUM;
        (*type_map)["EOpportunityState"] = TYPE_ENUM;
        (*type_map)["EOrderCompletionStatus"] = TYPE_ENUM;
        (*type_map)["ZHM5ContextActionEntity.EInteraction"] = TYPE_ENUM;
        (*type_map)["EOutbreakInfectionStage"] = TYPE_ENUM;
        (*type_map)["eActionRewardType"] = TYPE_ENUM;
        (*type_map)["ZAT2Controller.EFootstepsMovementType"] = TYPE_ENUM;
        (*type_map)["ZMoveToPositionBehaviorEntity.EMovementType"] = TYPE_ENUM;
        (*type_map)["ZHM5ForceCover.EFaceDirection"] = TYPE_ENUM;
        (*type_map)["AudioCurve"] = TYPE_ENUM;
        (*type_map)["EActivationPriority"] = TYPE_ENUM;
        (*type_map)["ZMenuSliderNavigationEntity.ESliderInputMode"] = TYPE_ENUM;
        (*type_map)["ZActDurationCondition.EState"] = TYPE_ENUM;
        (*type_map)["ETextAlignment"] = TYPE_ENUM;
        (*type_map)["eItemSize"] = TYPE_ENUM;
        (*type_map)["ZEscortSituation2Entity.EEscortState"] = TYPE_ENUM;
        (*type_map)["ZLeadEscortSituationEntity.ETargetState"] = TYPE_ENUM;
        (*type_map)["ECharacterSubcontrollerType"] = TYPE_ENUM;
        (*type_map)["ECrowdFlowCandidates"] = TYPE_ENUM;
        (*type_map)["EThrownCollisionSoundLoudness"] = TYPE_ENUM;
        (*type_map)["EUIBusyOperationId"] = TYPE_ENUM;
        (*type_map)["EAttachLocation"] = TYPE_ENUM;
        (*type_map)["EEngineFrameUpdatePriority"] = TYPE_ENUM;
        (*type_map)["EInformationBarMessage"] = TYPE_ENUM;
        (*type_map)["ESniperScoreMessageType"] = TYPE_ENUM;
        (*type_map)["ZHttpUrl.EVerb"] = TYPE_ENUM;
        (*type_map)["ESmoothingMode"] = TYPE_ENUM;
        (*type_map)["ZActorPickerEffectTemplate.EEffectPhaseAction"] = TYPE_ENUM;
        (*type_map)["EActorAIDot"] = TYPE_ENUM;
        (*type_map)["ZDecalControllerEntity.EScaleType"] = TYPE_ENUM;
        (*type_map)["ZUIControlLayoutLegacyAspect.ELayoutMode"] = TYPE_ENUM;
        (*type_map)["ZHM5WeaponBasicConfigEntity.EWeaponBasicConfigAudioClass"] = TYPE_ENUM;
        (*type_map)["ZUIControlLayoutLegacyAspect.EAlignmentType"] = TYPE_ENUM;
        (*type_map)["ZEscortSituationEntity.EEscortState"] = TYPE_ENUM;
        (*type_map)["SniperControllerConditionType"] = TYPE_ENUM;
        (*type_map)["ZActorInstanceEntity.EFFXMode"] = TYPE_ENUM;
        (*type_map)["EMapType"] = TYPE_ENUM;
        (*type_map)["CrowdUtil.ECrowdFacing"] = TYPE_ENUM;
        (*type_map)["EActorEmotionState"] = TYPE_ENUM;
        (*type_map)["EKeywordSetBehavior"] = TYPE_ENUM;
        (*type_map)["eItemRarity"] = TYPE_ENUM;
        (*type_map)["eHolsterAbility"] = TYPE_ENUM;
        (*type_map)["EMoveEndState"] = TYPE_ENUM;
        (*type_map)["EPlaceableType"] = TYPE_ENUM;
        (*type_map)["ELastSoundTension"] = TYPE_ENUM;
        (*type_map)["ZSequenceEntity.ELetterBoxAspect"] = TYPE_ENUM;
        (*type_map)["ZHM5HIKEventConsumer.EEffector"] = TYPE_ENUM;
        (*type_map)["ZWaypointEntity.EMovementType"] = TYPE_ENUM;
        (*type_map)["EInventoryStorageType"] = TYPE_ENUM;
        (*type_map)["EDialogEventEndReason"] = TYPE_ENUM;
        (*type_map)["EDefaultCollidableLayer"] = TYPE_ENUM;
        (*type_map)["eItemHands"] = TYPE_ENUM;
        (*type_map)["ZActorProviderFilterKeyword.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["ZHUDUIRoot.EHUDVisibility"] = TYPE_ENUM;
        (*type_map)["EKillType"] = TYPE_ENUM;
        (*type_map)["EHUDIconType"] = TYPE_ENUM;
        (*type_map)["ECharacterActionSyncRequests"] = TYPE_ENUM;
        (*type_map)["ZInvestigateCautiousSituation.ESituationState"] = TYPE_ENUM;
        (*type_map)["EActBodyType"] = TYPE_ENUM;
        (*type_map)["ZHUDOccluderTriggerEntity.EOccluderTestBit"] = TYPE_ENUM;
        (*type_map)["EOpportunityRevealState"] = TYPE_ENUM;
        (*type_map)["EGSBodyPart"] = TYPE_ENUM;
        (*type_map)["EActorSecondaryIconState"] = TYPE_ENUM;
        (*type_map)["ZInputListenerAxisEntity.eInputListenerAxes"] = TYPE_ENUM;
        (*type_map)["EActorEventTypes"] = TYPE_ENUM;
        (*type_map)["EVRConfigCustomEvent"] = TYPE_ENUM;
        (*type_map)["EMultiplayerNetworkState"] = TYPE_ENUM;
        (*type_map)["EBoolCheckType"] = TYPE_ENUM;
        (*type_map)["EActorFaction"] = TYPE_ENUM;
        (*type_map)["SoundPlayState"] = TYPE_ENUM;
        (*type_map)["ECausalGraphTraversal"] = TYPE_ENUM;
        (*type_map)["EPushNotificationType"] = TYPE_ENUM;
        (*type_map)["ZCharacterSpeakCondition.EState"] = TYPE_ENUM;
        (*type_map)["EVRRenderDeviceType"] = TYPE_ENUM;
        (*type_map)["IHM5Door.EOpenDir"] = TYPE_ENUM;
        (*type_map)["EDamageResponse"] = TYPE_ENUM;
        (*type_map)["EInventoryConfigFormerEquippedItems"] = TYPE_ENUM;
        (*type_map)["ESituationJoinReason"] = TYPE_ENUM;
        (*type_map)["UIMapLayer.EUIMapLayerID"] = TYPE_ENUM;
        (*type_map)["EScreenplayStateFlag"] = TYPE_ENUM;
        (*type_map)["ENetPlayerEvent"] = TYPE_ENUM;
        (*type_map)["ZCoverPlane.ECoverType"] = TYPE_ENUM;
        (*type_map)["ECameraOffset_old"] = TYPE_ENUM;
        (*type_map)["EVRConfigCapsuleGridSize"] = TYPE_ENUM;
        (*type_map)["ECompiledConditionType"] = TYPE_ENUM;
        (*type_map)["EItemGripType"] = TYPE_ENUM;
        (*type_map)["EUIBusyState"] = TYPE_ENUM;
        (*type_map)["EBulletType"] = TYPE_ENUM;
        (*type_map)["EPathFinderBoxType"] = TYPE_ENUM;
        (*type_map)["ZVRHUDWristAlignmentController.EAxis"] = TYPE_ENUM;
        (*type_map)["EMotionType"] = TYPE_ENUM;
        (*type_map)["ECharacterStateTags"] = TYPE_ENUM;
        (*type_map)["ECCDUsage"] = TYPE_ENUM;
        (*type_map)["ZUIControlEntity.EAlignment"] = TYPE_ENUM;
        (*type_map)["EAmmoBehaviourConfigType"] = TYPE_ENUM;
        (*type_map)["ZHM5BodyContainer.eBCCloseMode"] = TYPE_ENUM;
        (*type_map)["EFSMStateStatus"] = TYPE_ENUM;
        (*type_map)["EHM5SoundFootstepEvent"] = TYPE_ENUM;
        (*type_map)["ZHM5ValueEntity_bool.EForwardRule"] = TYPE_ENUM;
        (*type_map)["Network.PacketReliability"] = TYPE_ENUM;
        (*type_map)["IContractObjective.State"] = TYPE_ENUM;
        (*type_map)["ZActorDebugEntity.EActorDebugColor"] = TYPE_ENUM;
        (*type_map)["ERenderVRTrackingID"] = TYPE_ENUM;
        (*type_map)["EMoveSpeed"] = TYPE_ENUM;
        (*type_map)["EDeathContext"] = TYPE_ENUM;
        (*type_map)["ECoordinateSpace"] = TYPE_ENUM;
        (*type_map)["ECameraAssistanceMode"] = TYPE_ENUM;
        (*type_map)["ZUIListNavigationEntity.ENavigationInputMode"] = TYPE_ENUM;
        (*type_map)["EExtendedPropertyType"] = TYPE_ENUM;
        (*type_map)["ERegistrationState"] = TYPE_ENUM;
        (*type_map)["EDisconnectReason"] = TYPE_ENUM;
        (*type_map)["EIntelStage"] = TYPE_ENUM;
        (*type_map)["EActorVoiceVariation"] = TYPE_ENUM;
        (*type_map)["ECharacterAnimChildNetworkSlot"] = TYPE_ENUM;
        (*type_map)["EStealthSituation"] = TYPE_ENUM;
        (*type_map)["ZHeroKeywordCondition.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["EAudioVolumetricMixingMode"] = TYPE_ENUM;
        (*type_map)["ZActorBoneAttachEntity.EResetMode"] = TYPE_ENUM;
        (*type_map)["IHM5Door.ECPDoorLockType"] = TYPE_ENUM;
        (*type_map)["EActorRank"] = TYPE_ENUM;
        (*type_map)["EPersistentBoolDataSyncType"] = TYPE_ENUM;
        (*type_map)["ESaveLoadStatus"] = TYPE_ENUM;
        (*type_map)["ESituationAvailability"] = TYPE_ENUM;
        (*type_map)["EEntityOrdering"] = TYPE_ENUM;
        (*type_map)["EAccidentDeathContext"] = TYPE_ENUM;
        (*type_map)["EActorType"] = TYPE_ENUM;
        (*type_map)["EDialogEventItemType"] = TYPE_ENUM;
        (*type_map)["ZAT2Controller.EFoot"] = TYPE_ENUM;
        (*type_map)["EVRHUDHandedness"] = TYPE_ENUM;
        (*type_map)["ECharacterUpperBodyStateType"] = TYPE_ENUM;
        (*type_map)["ZDecalControllerEntity.ERotationType"] = TYPE_ENUM;
        (*type_map)["IScatterContainerEntity.EBrushType"] = TYPE_ENUM;
        (*type_map)["EBaseMovementType"] = TYPE_ENUM;
        (*type_map)["ZHM5LedgeMount.EFaceDirection"] = TYPE_ENUM;
        (*type_map)["ZMoveToPositionBehaviorEntity.EApproachAlignment"] = TYPE_ENUM;
        (*type_map)["EClothBendConstrainType"] = TYPE_ENUM;
        (*type_map)["ERoleEvent"] = TYPE_ENUM;
        (*type_map)["ZWorldUIElementInstanceBase.EVisibility"] = TYPE_ENUM;
        (*type_map)["EHUDIconFlags"] = TYPE_ENUM;
        (*type_map)["EDeathAnimationType"] = TYPE_ENUM;
        (*type_map)["ZCautiousInvestigateGroup.EAssistantState"] = TYPE_ENUM;
        (*type_map)["ZHM5Animator.EBoneAnimator"] = TYPE_ENUM;
        (*type_map)["ERestitutionCombineMode"] = TYPE_ENUM;
        (*type_map)["ECharacterIdlePriority"] = TYPE_ENUM;
        (*type_map)["ZSequenceEntity.ECommand"] = TYPE_ENUM;
        (*type_map)["ZVRCameraEntity.EEye"] = TYPE_ENUM;
        (*type_map)["EDisposalType"] = TYPE_ENUM;
        (*type_map)["EDynamicVariableType"] = TYPE_ENUM;
        (*type_map)["EButtonState"] = TYPE_ENUM;
        (*type_map)["ZHM5AgilityEventConsumer.EEvent"] = TYPE_ENUM;
        (*type_map)["ZHM5BodyContainer.EBCState"] = TYPE_ENUM;
        (*type_map)["ZHM5Item.EKeywordEvaluationType"] = TYPE_ENUM;
        (*type_map)["InputControlNamesp.eHM5InputActionID"] = TYPE_ENUM;
        (*type_map)["JSONTemplate.ETemplateType"] = TYPE_ENUM;
        (*type_map)["ZMirrorEntity.EMirrorQuality"] = TYPE_ENUM;
        (*type_map)["EWeaponAnimationCategory"] = TYPE_ENUM;
        (*type_map)["EAILegalType"] = TYPE_ENUM;
        (*type_map)["ZActorPickerFilterGroup.EEvaluationType"] = TYPE_ENUM;
        (*type_map)["ZWaveformGeneratorEntity.ECurveType"] = TYPE_ENUM;
        (*type_map)["ZHM5HitmanHealthModifier.EHealthValue"] = TYPE_ENUM;
        (*type_map)["EConversationID"] = TYPE_ENUM;
        (*type_map)["ZDebugTextEntity.EHorizontalAlignment"] = TYPE_ENUM;
        (*type_map)["EClipSpawnAxis"] = TYPE_ENUM;
        (*type_map)["EMeBarState"] = TYPE_ENUM;
        (*type_map)["ECameraCollisionMode"] = TYPE_ENUM;
        (*type_map)["EClothStretchConstrainType"] = TYPE_ENUM;
        (*type_map)["EMoveRecenterMode"] = TYPE_ENUM;
        (*type_map)["ENamedGameEvents"] = TYPE_ENUM;
        (*type_map)["ZDebugTextEntity.EVerticalAlignment"] = TYPE_ENUM;
        (*type_map)["ZMinimapNavDirectionProvider.EAxis"] = TYPE_ENUM;
        (*type_map)["ZSetUIControlDisplayInfoEntity.EProjectionOp"] = TYPE_ENUM;
        (*type_map)["ZDistanceCondition.EObjectType"] = TYPE_ENUM;
        (*type_map)["EHM5SoundFootstepEmitterTarget"] = TYPE_ENUM;
        (*type_map)["EGuardPointType"] = TYPE_ENUM;
        (*type_map)["ECharacterEvent"] = TYPE_ENUM;
        (*type_map)["ECharacterIdleHandlerUpperBodyType"] = TYPE_ENUM;
        (*type_map)["ECharacterBodyType"] = TYPE_ENUM;
        (*type_map)["EAimAssistActivationState"] = TYPE_ENUM;
        (*type_map)["ZHM5BodyContainer.EBCAnimSet"] = TYPE_ENUM;
        (*type_map)["ELedgeDismountDirection"] = TYPE_ENUM;
        (*type_map)["ETargetPrintDestination"] = TYPE_ENUM;
        (*type_map)["ZHUDWorldSpatialAttachEntity.EOrientation"] = TYPE_ENUM;
        (*type_map)["eParticleEmitterBoxEntity_SpawnModes"] = TYPE_ENUM;
        (*type_map)["EDeathType"] = TYPE_ENUM;
        (*type_map)["ECommunicationBarMessage"] = TYPE_ENUM;
        (*type_map)["ZHUDCamera3DControllerEntity.EType"] = TYPE_ENUM;
        (*type_map)["EThrowType"] = TYPE_ENUM;
        (*type_map)["EDetectedNatType"] = TYPE_ENUM;
        (*type_map)["ILightEntity.ERoomLightFlow"] = TYPE_ENUM;
        (*type_map)["ECrossHairType"] = TYPE_ENUM;
        (*type_map)["EMarkerClipAlgorithm"] = TYPE_ENUM;
        (*type_map)["ZHeroBoneAttachEntity.EResetMode"] = TYPE_ENUM;
        (*type_map)["eBurstPatternType"] = TYPE_ENUM;
        (*type_map)["EQueryMaskType"] = TYPE_ENUM;
        (*type_map)["ZPointOfInterestEntity.EPOIType"] = TYPE_ENUM;
        (*type_map)["EGait"] = TYPE_ENUM;
        (*type_map)["EAIGoal"] = TYPE_ENUM;
        (*type_map)["ECharacterResourceType"] = TYPE_ENUM;
        (*type_map)["ZHM5WeaponBasicConfigEntity.EWeaponBasicConfigAudioExoticType"] = TYPE_ENUM;
        (*type_map)["EDisturbanceType"] = TYPE_ENUM;
        (*type_map)["IRenderMaterialEntity.EModifierOperation"] = TYPE_ENUM;
        (*type_map)["ZBoxReflectionEntity.EType"] = TYPE_ENUM;
        (*type_map)["ZGetHelpGroup.EInvestigateGroupState"] = TYPE_ENUM;
        (*type_map)["ECollisionNotifyGroup"] = TYPE_ENUM;
        (*type_map)["ECharSetCharacterType"] = TYPE_ENUM;
        (*type_map)["EActorGroup"] = TYPE_ENUM;
        (*type_map)["InputControlNamesp.eHM5InputAction"] = TYPE_ENUM;
        (*type_map)["EAISharedEventType"] = TYPE_ENUM;
        (*type_map)["ZPathfinderDebugEntity.EDebugTestType"] = TYPE_ENUM;
        (*type_map)["ECombatZoneState"] = TYPE_ENUM;
        (*type_map)["ELocale"] = TYPE_ENUM;
        (*type_map)["EGameUIMenu"] = TYPE_ENUM;
        (*type_map)["EAutoScanMode"] = TYPE_ENUM;
        (*type_map)["ENetRole"] = TYPE_ENUM;
        (*type_map)["EActorCCPreset"] = TYPE_ENUM;
        (*type_map)["EItemRequirement"] = TYPE_ENUM;
        (*type_map)["EClothColliderFilter"] = TYPE_ENUM;
        (*type_map)["EVsGenericEvent"] = TYPE_ENUM;
        (*type_map)["ESmartBehaviorOrder"] = TYPE_ENUM;
        (*type_map)["ZRagdollAttacherEntity.EResetMode"] = TYPE_ENUM;
    }
}

void initialize_enum_map()
{
    if (!enum_map_initialized)
    {
        enum_map_initialized = true;

        enum_map = new std::map<std::string, std::map<uint32_t, std::string>>();

        (*enum_map)["EItemMeleeDamageBehavior"] = std::map<uint32_t, std::string>{
        { 0, "EIMDB_Undefined" },
        { 1, "EIMDB_Bouncing" },
        { 2, "EIMDB_Slashing" },
        { 3, "EIMDB_Sticking" }
        };

        (*enum_map)["ZStateControllerEntity.WrapMode"] = std::map<uint32_t, std::string>{
            { 0, "WM_Loop" },
            { 1, "WM_Clamp" }
        };

        (*enum_map)["ZFriskSuspectGroup.EAssistantState"] = std::map<uint32_t, std::string>{
            { 0, "AS_Waiting" },
            { 1, "AS_Approach" },
            { 2, "AS_Approaching" },
            { 3, "AS_Covering" }
        };

        (*enum_map)["ZRenderPostfilterParametersEntity.EHDRGlareType"] = std::map<uint32_t, std::string>{
            { 0, "eCamera" },
            { 1, "eNatural" },
            { 2, "eCheapLens" },
            { 3, "eFilterCrossScreen" },
            { 4, "eFilterCrossScreenSpectral" },
            { 5, "eFilterSnowCross" },
            { 6, "eFilterSnowCrossSpectral" },
            { 7, "eFilterSunnyCross" },
            { 8, "eFilterSunnyCrossSpectral" },
            { 9, "eCinecamVerticalSlits" },
            { 10, "eCinecamHorizontalSlits" }
        };

        (*enum_map)["ZOperatorBool.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" }
        };

        (*enum_map)["EGSEvent"] = std::map<uint32_t, std::string>{
            { 0, "GSEvent_StrayBullet" },
            { 1, "GSEvent_TookDamage" },
            { 2, "GSEvent_UsedCover" },
            { 3, "GSEvent_UsedRun" },
            { 4, "GSEvent_UsedEliminate" },
            { 5, "GSEvent_UsedChokeOut" },
            { 6, "GSEvent_UsedKnockOutByHand" },
            { 7, "GSEvent_Pacified" },
            { 8, "GSEvent_TargetPacified" },
            { 9, "GSEvent_Recover" },
            { 10, "GSEvent_CaughtArmed" },
            { 11, "GSEvent_BodyFound" },
            { 12, "GSEvent_InvestigateCurious" },
            { 13, "GSEvent_NPCKilled" },
            { 14, "GSEvent_KilledNPCHidden" },
            { 15, "GSEvent_InvestigateCautious" },
            { 16, "GSEvent_PrecisionAimedKill" },
            { 17, "GSEvent_BlendInActivated" },
            { 18, "GSEvent_PropKill" },
            { 19, "GSEvent_SpottedThroughDisguise" },
            { 20, "GSEvent_TakeOutNonLethal" },
            { 21, "GSEvent_TargetKilled" },
            { 22, "GSEvent_NonTargetKilled" },
            { 23, "GSEvent_AllTargetsKilled" },
            { 24, "GSEvent_AccidentKill" },
            { 25, "GSEvent_ObjectiveUpdate" },
            { 26, "GSEvent_TargetAccidentKill" },
            { 27, "GSEvent_ObjectiveActivate" },
            { 28, "GSEvent_Headshot" },
            { 29, "GSEvent_Fiberwire" },
            { 30, "GSEvent_UsedEliminateSilent" },
            { 31, "GSEvent_ItemFound" },
            { 32, "GSEvent_ItemStashed" },
            { 33, "GSEvent_BodyBagPlaced" },
            { 34, "GSEvent_Projectile_HeadShot" },
            { 35, "GSEvent_Projectile_BodyShot" },
            { 36, "GSEvent_Projectile_Crowd_HeadShot" },
            { 37, "GSEvent_Projectile_Crowd_BodyShot" },
            { 38, "GSEvent_Projectile_Missed" },
            { 39, "GSEvent_Projectile_MultiKillTargets" }
        };

        (*enum_map)["ZCautiousInvestigateGroup.EApproachOrderState"] = std::map<uint32_t, std::string>{
            { 0, "AOS_RequestHuntApproachNode" },
            { 1, "AOS_RequestLeaderApproachNode" },
            { 2, "AOS_WaitForApproachNode" },
            { 3, "AOS_RequestLOSNode" },
            { 4, "AOS_Ready" },
            { 5, "AOS_NoApproachNode" }
        };

        (*enum_map)["EGSKillSituation"] = std::map<uint32_t, std::string>{
            { 0, "GSKILLSITUATION_UNKNOWN" },
            { 1, "GSKILLSITUATION_CLOSECOMBAT" },
            { 2, "GSKILLSITUATION_SILENT" },
            { 3, "GSKILLSITUATION_ENVIRONMENT" },
            { 4, "GSKILLSITUATION_ACTION" },
            { 5, "GSKILLSITUATION_DEADLYTHROW" },
            { 6, "GSKILLSITUATION_PULLTHROUGHWINDOW" },
            { 7, "GSKILLSITUATION_PUSHOVERRAILING" },
            { 8, "GSKILLSITUATION_PACIFY" },
            { 9, "GSKILLSITUATION_FIBERWIRE" }
        };

        (*enum_map)["ZHUDCamera3DControllerEntity.ESpace"] = std::map<uint32_t, std::string>{
            { 0, "View" },
            { 1, "Camera" },
            { 2, "Player" },
            { 3, "World" }
        };

        (*enum_map)["ETessellationMode"] = std::map<uint32_t, std::string>{
            { 0, "TESSELLATIONMODE_FLAT" },
            { 1, "TESSELLATIONMODE_PHONG" }
        };

        (*enum_map)["EBystanderPointType"] = std::map<uint32_t, std::string>{
            { 0, "BPT_Scared" },
            { 1, "BPT_Alerted" }
        };

        (*enum_map)["_EUIOptionKey"] = std::map<uint32_t, std::string>{
            { 2001, "UI_OPTION_GRAPHICS_SUBTITLES_SIZE" },
            { 220, "UI_OPTION_GAME_INVERT_INVENTORY_EMOTE" },
            { 100, "UI_OPTION_GAME_VIBRATION" },
            { 365, "UI_OPTION_GAME_AID_VITAL_INFO" },
            { 301, "UI_OPTION_GAME_INVERT_MOUSE_X" },
            { 2620, "UI_OPTION_GRAPHICS_SHADOW_RESOLUTION" },
            { 3003, "UI_OPTION_VR_HEAD_BASED_MOVEMENT" },
            { 110, "UI_OPTION_GAME_ADAPTIVE_FEEDBACK" },
            { 373, "UI_OPTION_GAME_MINI_MAP_SHOW_TARGETS" },
            { 1060, "UI_OPTION_SOUND_MUTE_OTHER_PLAYER" },
            { 200, "UI_OPTION_GAME_AIM_ASSIST" },
            { 210, "UI_OPTION_GAME_AIM_CAUSAL" },
            { 364, "UI_OPTION_GAME_AID_ATTENTION" },
            { 300, "UI_OPTION_GAME_INVERT_X" },
            { 2010, "UI_OPTION_GRAPHICS_SUBTITLES_VR" },
            { 3004, "UI_OPTION_VR_FADE_ON_COLLISION" },
            { 2747, "UI_OPTION_GRAPHICS_VRS" },
            { 366, "UI_OPTION_GAME_AID_INTERACTION_H" },
            { 2310, "UI_OPTION_DISPLAY_STEREOSCOPIC" },
            { 302, "UI_OPTION_GAME_INVERT_MOUSE_Y" },
            { 2771, "UI_OPTION_GSM_AUTHORITY_END_MARKER" },
            { 374, "UI_OPTION_GAME_CHALLENGES_FILTER" },
            { 310, "UI_OPTION_GAME_INVERT_Y" },
            { 2000, "UI_OPTION_GRAPHICS_SUBTITLES" },
            { 1220, "UI_OPTION_SOUND_DYNAMIC_RANGE_MODE" },
            { 375, "UI_OPTION_GAME_AID_MISSION_TIMER" },
            { 2240, "UI_OPTION_DISPLAY_REFRESHRATE" },
            { 311, "UI_OPTION_GAME_CONTROL_SCHEME" },
            { 376, "UI_OPTION_GAME_DIFFICULTY_LEVEL_HUD" },
            { 2320, "UI_OPTION_DISPLAY_STEREO_DEPTH" },
            { 312, "UI_OPTION_GAME_FAST_TARGET" },
            { 385, "UI_OPTION_GAME_AID_AIM_TOGGLE" },
            { 2210, "UI_OPTION_GRAPHICS_SAFE_AREA_X" },
            { 321, "UI_OPTION_GAME_DIFFICULTY" },
            { 2743, "UI_OPTION_GRAPHICS_MOTION_BLUR" },
            { 330, "UI_OPTION_GAME_TRIGGER_SHOOT" },
            { 3006, "UI_OPTION_VR_TURN_SPEED" },
            { 332, "UI_OPTION_GAME_SWITCH_SNEAK_AND_CAMERA" },
            { 333, "UI_OPTION_GAME_LEFT_HANDED_CONTROLS" },
            { 334, "UI_OPTION_GAME_CAMERA_SENSITIVITY_HORZ" },
            { 2610, "UI_OPTION_GRAPHICS_SHADOW_QUALITY" },
            { 3001, "UI_OPTION_VR_BLINDERS_STRENGTH" },
            { 335, "UI_OPTION_GAME_CAMERA_SENSITIVITY_VERT" },
            { 400, "UI_OPTION_GAME_AUTOSAVE_HUD" },
            { 336, "UI_OPTION_GAME_MOUSE_SENSITIVITY" },
            { 2600, "UI_OPTION_GRAPHICS_QUALITY" },
            { 2011, "UI_OPTION_GRAPHICS_SUBTITLES_SIZE_VR" },
            { 337, "UI_OPTION_GAME_AIM_SENSITIVITY" },
            { 338, "UI_OPTION_GAME_CAMERA_SENSITIVITY" },
            { 340, "UI_OPTION_GAME_INSTINCT_PATHS" },
            { 342, "UI_OPTION_GAME_INSTINCT_NPCGLOW" },
            { 3000, "UI_OPTION_VR_BLINDERS_ENABLED" },
            { 346, "UI_OPTION_GAME_HINTS_TUTORIAL" },
            { 348, "UI_OPTION_GAME_HINTS_INSTINCT" },
            { 350, "UI_OPTION_GAME_LANG_AUDIO" },
            { 2690, "UI_OPTION_GRAPHICS_MIRRORS" },
            { 351, "UI_OPTION_GAME_LANG_TEXT" },
            { 352, "UI_OPTION_GAME_COVER_TOGGLE" },
            { 2680, "UI_OPTION_GRAPHICS_TESSELLATION" },
            { 353, "UI_OPTION_GAME_FIXED_MAP" },
            { 354, "UI_OPTION_GAME_MAP_SHOW_NORTH_INDICATOR" },
            { 1221, "UI_OPTION_SOUND_DYNAMIC_RANGE_MODE_VR" },
            { 360, "UI_OPTION_GAME_AID_OPPORTUNITIES" },
            { 1010, "UI_OPTION_SOUND_VOLUME_MASTER" },
            { 3007, "UI_OPTION_VR_MINIMUM_REPROJECTION_COLOR" },
            { 361, "UI_OPTION_GAME_AID_INSTINCT" },
            { 2775, "UI_OPTION_GRAPHICS_DIFFUSE_COLOR_CLAMP" },
            { 362, "UI_OPTION_GAME_AID_MINI_MAP" },
            { 2260, "UI_OPTION_DISPLAY_EXCLUSIVE" },
            { 1040, "UI_OPTION_SOUND_VOLUME_DIALOGUE" },
            { 363, "UI_OPTION_GAME_AID_NPC_ICONS" },
            { 367, "UI_OPTION_GAME_AID_OBJECTIVES" },
            { 2770, "UI_OPTION_GRAPHICS_FRAMERATE_LIMIT" },
            { 368, "UI_OPTION_GAME_AID_WEAPON_HUD" },
            { 1030, "UI_OPTION_SOUND_VOLUME_MUSIC" },
            { 369, "UI_OPTION_GAME_AID_CHALLENGEDESCRIPTION" },
            { 2760, "UI_OPTION_GRAPHICS_GAMMA" },
            { 370, "UI_OPTION_GAME_MINI_MAP_SHOW_NPCS" },
            { 371, "UI_OPTION_GAME_AID_TARGET_INFO" },
            { 2710, "UI_OPTION_GRAPHICS_LOD" },
            { 372, "UI_OPTION_GAME_AID_CHALLENGE_HUD" },
            { 377, "UI_OPTION_GAME_AID_GLOBAL_HINTS" },
            { 378, "UI_OPTION_GAME_SCORE_HUD" },
            { 379, "UI_OPTION_GAME_AID_LVA" },
            { 380, "UI_OPTION_GAME_AID_PICTURE_IN_PICTURE" },
            { 2270, "UI_OPTION_DISPLAY_VSYNC" },
            { 1050, "UI_OPTION_SOUND_MUTE_MICROPHONE" },
            { 381, "UI_OPTION_GAME_AID_INTERACTION_PROMPT" },
            { 2772, "UI_OPTION_GRAPHICS_HDR_GAMMA" },
            { 382, "UI_OPTION_GAME_AID_SA_HUD" },
            { 383, "UI_OPTION_GAME_AID_RELOAD_HUD" },
            { 384, "UI_OPTION_GAME_AID_CAMERA_GRID" },
            { 386, "UI_OPTION_GAME_AID_OBJECTIVES_VR" },
            { 387, "UI_OPTION_GAME_AID_WEAPON_HUD_VR" },
            { 388, "UI_OPTION_GAME_AID_RELOAD_HUD_VR" },
            { 1020, "UI_OPTION_SOUND_VOLUME_EFFECTS" },
            { 390, "UI_OPTION_GAME_AUTOSAVE" },
            { 2650, "UI_OPTION_GRAPHICS_ASSAO_QUALITY" },
            { 391, "UI_OPTION_GAME_AUTOSAVE_VR" },
            { 1200, "UI_OPTION_SOUND_OUTPUTMODE" },
            { 1210, "UI_OPTION_SOUND_SIMULATION_QUALITY" },
            { 3005, "UI_OPTION_VR_TURN_RATE" },
            { 2742, "UI_OPTION_GRAPHICS_REFLECTION_QUALITY" },
            { 2220, "UI_OPTION_GRAPHICS_SAFE_AREA_Y" },
            { 2221, "UI_OPTION_GSM_AUTHORITY_BEGIN_MARKER" },
            { 2230, "UI_OPTION_DISPLAY_RESOLUTION" },
            { 2250, "UI_OPTION_DISPLAY_FULLSCREEN" },
            { 2280, "UI_OPTION_DISPLAY_MONITOR" },
            { 2290, "UI_OPTION_DISPLAY_QUALITY" },
            { 2630, "UI_OPTION_GRAPHICS_TEXTURE_QUALITY" },
            { 2300, "UI_OPTION_DISPLAY_ASPECT" },
            { 2330, "UI_OPTION_DISPLAY_STEREO_STRENGTH" },
            { 2640, "UI_OPTION_GRAPHICS_TEXTURE_FILTER" },
            { 2660, "UI_OPTION_GRAPHICS_VSYNC" },
            { 2720, "UI_OPTION_GRAPHICS_MOTIONBLUR" },
            { 2740, "UI_OPTION_GRAPHICS_BOKEH" },
            { 2744, "UI_OPTION_GRAPHICS_DYNAMIC_SHARPENING" },
            { 2745, "UI_OPTION_GRAPHICS_SIMULATION_QUALITY" },
            { 2746, "UI_OPTION_GRAPHICS_SSR" },
            { 2750, "UI_OPTION_GRAPHICS_SUPER_SAMPLING" },
            { 2773, "UI_OPTION_GRAPHICS_RENDERING_QUALITY" },
            { 2774, "UI_OPTION_GRAPHICS_NEUTRAL_LUT_BLEND" },
            { 3002, "UI_OPTION_VR_TURN_MODE" },
            { 3008, "UI_OPTION_VR_LEFT_HAND_FOLLOW_RIGHT" },
            { 3009, "UI_OPTION_VR_SAFE_AREA_ENABLED" }
        };

        (*enum_map)["EVRConfigCameraRotationAllowed"] = std::map<uint32_t, std::string>{
            { 0, "EVRCCRA_RotationEnabled" },
            { 1, "EVRCCRA_RotationDisabled" },
            { 2, "EVRCCRA_KeepCurrent" }
        };

        (*enum_map)["ZInteractionGuideData.EDirection"] = std::map<uint32_t, std::string>{
            { 0, "UP" },
            { 1, "DOWN" },
            { 2, "LEFT" },
            { 3, "RIGHT" }
        };

        (*enum_map)["ZInteractionData.EFilterResult"] = std::map<uint32_t, std::string>{
            { 0, "EFR_REQUESTED" },
            { 1, "EFR_ENABLE_INTERACTION" },
            { 2, "EFR_EXPANDED_NOT_INTERACTABLE" },
            { 3, "EFR_COLLAPSED_CANT_OPERATE" },
            { 4, "EFR_COLLAPSED_PRIORITY" },
            { 5, "EFR_COLLAPSED_GAMESTATE" },
            { 6, "EFR_COLLAPSED_ACTION_FILTER" },
            { 7, "EFR_REJECTED_OTHER" },
            { 8, "EFR_REJECTED_OUTOFRANGE" },
            { 9, "EFR_REJECTED_OCCLUDED" },
            { 10, "EFR_REJECTED_OUTOFVIEW" },
            { 11, "EFR_REJECTED_GAMESTATE" },
            { 12, "EFR_REJECTED_ACTION_FILTER" },
            { 13, "EFR_REJECTED_INVALIDDATA" },
            { 14, "EFR_REJECTED_PRIORITY" }
        };

        (*enum_map)["ZHeroEscortSituation2Entity.ETargetState"] = std::map<uint32_t, std::string>{
            { 0, "ETS_Unknown" },
            { 1, "ETS_NoTarget" },
            { 2, "ETS_RunningActBehavior" },
            { 3, "ETS_RunningDummyBehavior" },
            { 4, "ETS_RunningOtherBehavior" },
            { 5, "ETS_Dead" },
            { 6, "ETS_TargetIsHitman" }
        };

        (*enum_map)["EOutfitAICategory"] = std::map<uint32_t, std::string>{
            { 0, "OAC_Undefined" },
            { 1, "OAC_Fallback" },
            { 2, "OAC_47Suit" },
            { 3, "OAC_47TRAINING" },
            { 4, "OAC_47MARRAKESH" },
            { 5, "OAC_47SAPIENZA" },
            { 6, "OAC_47BANGKOK" },
            { 7, "OAC_47COLORADO" },
            { 8, "OAC_47HOKKAIDO" },
            { 9, "OAC_47PREORDER" },
            { 10, "OAC_47COLUMBIA" },
            { 11, "OAC_47ISLAND" },
            { 12, "OAC_47MUMBAI" },
            { 13, "OAC_47NEWZEALAND" },
            { 14, "OAC_47STARTCLASSY" },
            { 15, "OAC_47STARTOUTFIT" },
            { 16, "OAC_47SUBURBIA" },
            { 17, "OAC_Bodyguard" },
            { 18, "OAC_CameraMan" },
            { 19, "OAC_Chef" },
            { 20, "OAC_Cleaner" },
            { 21, "OAC_Cop" },
            { 22, "OAC_Crew" },
            { 23, "OAC_DaSilva" },
            { 24, "OAC_Gardner" },
            { 25, "OAC_Hazmat" },
            { 26, "OAC_HouseStaff" },
            { 27, "OAC_Maintenance" },
            { 28, "OAC_Officer" },
            { 29, "OAC_Priest" },
            { 30, "OAC_Printer" },
            { 31, "OAC_Scientist" },
            { 32, "OAC_Security" },
            { 33, "OAC_Sheik" },
            { 34, "OAC_Stylist" },
            { 35, "OAC_Waiter" },
            { 36, "OAC_Busker" },
            { 37, "OAC_Caddie" },
            { 38, "OAC_ChurchStaff" },
            { 39, "OAC_Cyclist" },
            { 40, "OAC_Filmcrew" },
            { 41, "OAC_Fortune" },
            { 42, "OAC_Hippie" },
            { 43, "OAC_Investor" },
            { 44, "OAC_KGB" },
            { 45, "OAC_Lawyer" },
            { 46, "OAC_Kruger" },
            { 47, "OAC_Masseur" },
            { 48, "OAC_Mechanic" },
            { 49, "OAC_Norfolk" },
            { 50, "OAC_Plague" },
            { 51, "OAC_Psych" },
            { 52, "OAC_Shopkeep" },
            { 53, "OAC_Soldier" },
            { 54, "OAC_Tux" },
            { 55, "OAC_Vampire" },
            { 56, "OAC_YachtCrew" },
            { 57, "OAC_Exterminator" },
            { 58, "OAC_SoundCrew" },
            { 59, "OAC_Intern" },
            { 60, "OAC_Stalker" },
            { 61, "OAC_Scarecrow" },
            { 62, "OAC_Hacker" },
            { 63, "OAC_SpecOps" },
            { 64, "OAC_Berg" },
            { 65, "OAC_Morgue" },
            { 66, "OAC_Surgeon" },
            { 67, "OAC_Doctor" },
            { 68, "OAC_Director" },
            { 69, "OAC_Ninja" },
            { 70, "OAC_Baseball" },
            { 71, "OAC_KillBill" },
            { 72, "OAC_Pilot" },
            { 73, "OAC_Yoga" },
            { 74, "OAC_Mummy" },
            { 75, "OAC_Cowboy" },
            { 76, "OAC_Staff" },
            { 77, "OAC_Santa" },
            { 78, "OAC_MambaCrew" },
            { 79, "OAC_Delivery" },
            { 80, "OAC_GOTY_Clown" },
            { 81, "OAC_GOTY_Cowboy" },
            { 82, "OAC_GOTY_DarkSniper" },
            { 83, "OAC_Driver" },
            { 84, "OAC_Driverpale" },
            { 85, "OAC_Eventstff" },
            { 86, "OAC_Flrdaman" },
            { 87, "OAC_Food" },
            { 88, "OAC_Journal" },
            { 89, "OAC_Krnstdtengnr" },
            { 90, "OAC_Krnstdtsec" },
            { 91, "OAC_Ktchstff" },
            { 92, "OAC_Lee" },
            { 93, "OAC_Mascot" },
            { 94, "OAC_Medic" },
            { 95, "OAC_Mendez" },
            { 96, "OAC_Musician" },
            { 97, "OAC_Racecoord" },
            { 98, "OAC_Racemarsh" },
            { 99, "OAC_Thug" },
            { 100, "OAC_Worker" },
            { 101, "OAC_Research" },
            { 102, "OAC_Tatoo" },
            { 103, "OAC_Shaman" },
            { 104, "OAC_Artist" },
            { 105, "OAC_Barber" },
            { 106, "OAC_DJ" },
            { 107, "OAC_Kshmrn" },
            { 108, "OAC_Master" },
            { 109, "OAC_Burial" },
            { 110, "OAC_Ravenmaster" },
            { 111, "OAC_Sentinel" },
            { 112, "OAC_Blake" },
            { 113, "OAC_Actor" },
            { 114, "OAC_Architect" },
            { 115, "OAC_Arkian" },
            { 116, "OAC_Arkptrn" },
            { 117, "OAC_Bbq" },
            { 118, "OAC_Bollycrew" },
            { 119, "OAC_Cavegd" },
            { 120, "OAC_Civilian" },
            { 121, "OAC_Cavewkr" },
            { 122, "OAC_Clothsale" },
            { 123, "OAC_Counsellor" },
            { 124, "OAC_Cowboyhat" },
            { 125, "OAC_Custdn" },
            { 126, "OAC_Dancer" },
            { 127, "OAC_Dbbwll" },
            { 128, "OAC_Deadjanus" },
            { 129, "OAC_Driverch" },
            { 130, "OAC_Driversa" },
            { 131, "OAC_Driveruk" },
            { 132, "OAC_Driverus" },
            { 133, "OAC_Druglabwkr" },
            { 134, "OAC_Elite" },
            { 135, "OAC_Fakemlstrm" },
            { 136, "OAC_Farm" },
            { 137, "OAC_Fieldgrd" },
            { 138, "OAC_Headmaster" },
            { 139, "OAC_Knight" },
            { 140, "OAC_Laundrywkr" },
            { 141, "OAC_Lndrygrd" },
            { 142, "OAC_Mailman" },
            { 143, "OAC_Mansiongd" },
            { 144, "OAC_Mech_Miami" },
            { 145, "OAC_Mechch" },
            { 146, "OAC_Mechit" },
            { 147, "OAC_Mechkrnstdt" },
            { 148, "OAC_Mechsa" },
            { 149, "OAC_Mechuk" },
            { 150, "OAC_Mechus" },
            { 151, "OAC_Metalwkr" },
            { 152, "OAC_Militiasec" },
            { 153, "OAC_Mime" },
            { 154, "OAC_Moviemnstr" },
            { 155, "OAC_Mumbaiserv" },
            { 156, "OAC_Mumbsec" },
            { 157, "OAC_Nitiate" },
            { 158, "OAC_Nurse" },
            { 159, "OAC_Orson" },
            { 160, "OAC_Parka" },
            { 161, "OAC_Politicasst" },
            { 162, "OAC_Politician" },
            { 163, "OAC_Priest_VP" },
            { 164, "OAC_Queensgrd" },
            { 165, "OAC_Queenthug" },
            { 166, "OAC_Rangangrd" },
            { 167, "OAC_Rangansec" },
            { 168, "OAC_Realstbroke" },
            { 169, "OAC_Resident" },
            { 170, "OAC_Resortstaff" },
            { 171, "OAC_Sitewkr" },
            { 172, "OAC_Snowtrek" },
            { 173, "OAC_Subwkr" },
            { 174, "OAC_Suit" },
            { 175, "OAC_Tailor" },
            { 176, "OAC_Teaserv" },
            { 177, "OAC_Terminus" },
            { 178, "OAC_Trainserv" },
            { 179, "OAC_Villagegd" },
            { 180, "OAC_Winter" },
            { 181, "OAC_Wiseman" },
            { 182, "OAC_Investbanker" },
            { 183, "OAC_Bankteller" },
            { 184, "OAC_Robber" },
            { 185, "OAC_TechCrew" },
            { 186, "OAC_Attendant" },
            { 187, "OAC_Critic" },
            { 188, "OAC_FamilyGrd" },
            { 189, "OAC_PrivateEye" },
            { 190, "OAC_Undertaker" },
            { 191, "OAC_Photographer" },
            { 192, "OAC_LawyerBd" },
            { 193, "OAC_Biker" },
            { 194, "OAC_DeliveryFox" },
            { 195, "OAC_Dealer" },
            { 196, "OAC_ClubOwner" },
            { 197, "OAC_Bartender" },
            { 198, "OAC_ClubStaff" },
            { 199, "OAC_ClubTech" },
            { 200, "OAC_Herald" },
            { 201, "OAC_Gaucho" },
            { 202, "OAC_WineMkr" },
            { 203, "OAC_Fixer" },
            { 204, "OAC_Sommelier" }
        };

        (*enum_map)["ESoundChannelGroup"] = std::map<uint32_t, std::string>{
            { 0, "ESCG_NONE" },
            { 1, "SND_Default" },
            { 2, "SND_Phys_Rigidbody" },
            { 3, "SND_Phys_Shatter" },
            { 4, "SND_Wpn_HM" },
            { 5, "SND_Wpn_HM_Shot" },
            { 6, "SND_Wpn_NPC" },
            { 7, "SND_Wpn_Impacts" },
            { 8, "SND_Wpn_Flybys" },
            { 9, "SND_Characters" },
            { 10, "SND_Ambience" },
            { 11, "SND_Props" },
            { 12, "SND_Prop_Item" },
            { 13, "SND_FS_HM" },
            { 14, "SND_FS_NPC" },
            { 15, "SND_VisualFX" },
            { 16, "SND_VisualFX_ShotActivate" },
            { 17, "SND_VisualFX_Explosions" },
            { 18, "SND_Diag_HM" },
            { 19, "SND_Diag_NPC" },
            { 20, "SND_CS_Ingame" },
            { 21, "SND_CS_PreRend" },
            { 22, "SND_Music_Env" },
            { 23, "SND_MusicNonEnv" },
            { 24, "SND_SpecialFX_CC" },
            { 25, "SND_SpecialFX_Jumps" },
            { 26, "SND_SpecialFX_Closet" },
            { 27, "SND_SpecialFX_Vent" },
            { 28, "SND_SpecialFX_Instinct" },
            { 29, "SND_SpecialFX_Disguise" },
            { 30, "SND_SpecialFX_Agility" },
            { 31, "SND_Stingers_SFX" },
            { 32, "SND_GUI" },
            { 33, "SND_Test" },
            { 34, "ANIM_HM_Generic" },
            { 35, "ANIM_HM_Loco" },
            { 36, "ANIM_HM_Agility" },
            { 37, "ANIM_HM_Suit_Flap" },
            { 38, "ANIM_HM_Suit_Release" },
            { 39, "ANIM_HM_Suit_Slide" },
            { 40, "ANIM_HM_Suit_LandImpact" },
            { 41, "ANIM_HM_Suit_Grab" },
            { 42, "ANIM_HM_Suit_Roll" },
            { 43, "ANIM_HM_Suit_Swoosh_Body" },
            { 44, "ANIM_HM_Suit_Swoosh_Fast" },
            { 45, "ANIM_HM_CC_Impacts" },
            { 46, "ANIM_HM_CC_Movement" },
            { 47, "ANIM_NPC_Generic" },
            { 48, "ANIM_NPC_Loco" },
            { 49, "ANIM_NPC_CC_Impacts" },
            { 50, "ANIM_NPC_CC_Movement" },
            { 51, "SND_Wpn_HM_Tail" },
            { 52, "SND_Wpn_NPC_Tail" },
            { 53, "SND_Diag_NPC_Crowd" },
            { 54, "SND_Phys_RigidBody_Ragdoll" },
            { 55, "SND_Diag_VO" },
            { 56, "SND_GUI_Menu" },
            { 57, "SND_Props_Doors" },
            { 58, "SND_Wpn_HM_Handguns" },
            { 59, "SND_Wpn_HM_Revolvers" },
            { 60, "SND_Wpn_HM_Rifles" },
            { 61, "SND_Wpn_HM_Shotguns" },
            { 62, "SND_Wpn_HM_Smgs" },
            { 63, "SND_Wpn_HM_Snipers" },
            { 64, "SND_Wpn_HM_Other" },
            { 65, "SND_Wpn_NPC_Handguns" },
            { 66, "SND_Wpn_NPC_Revolvers" },
            { 67, "SND_Wpn_NPC_Rifles" },
            { 68, "SND_Wpn_NPC_Shotguns" },
            { 69, "SND_Wpn_NPC_Smgs" },
            { 70, "SND_Wpn_NPC_Snipers" },
            { 71, "SND_Wpn_NPC_Other" },
            { 72, "SND_Diag_NPC_Oneliner" },
            { 73, "SND_Moments" }
        };

        (*enum_map)["ZActorKeywordCondition.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" },
            { 3, "ANY_TRUE_IF_NO_REQS" }
        };

        (*enum_map)["EGSExplodingPropType"] = std::map<uint32_t, std::string>{
            { 0, "eGSExplodingProp_Unknown" },
            { 1, "eGSExplodingProp_Barrel" },
            { 2, "eGSExplodingProp_PetrolCan" },
            { 3, "eGSExplodingProp_GasCanister" },
            { 4, "eGSExplodingProp_GasTank" },
            { 5, "eGSExplodingProp_Mine" },
            { 6, "eGSExplodingProp_Pig" },
            { 7, "eGSExplodingProp_Pigeon" },
            { 8, "eGSExplodingProp_FireworksBox" },
            { 9, "eGSExplodingProp_Car" }
        };

        (*enum_map)["ZCrowdActorEntity.ECharacterSoundType"] = std::map<uint32_t, std::string>{
            { 0, "eSoundType_Male" },
            { 1, "eSoundType_Female" },
            { 2, "eSoundType_Female_Heels" }
        };

        (*enum_map)["eItemType"] = std::map<uint32_t, std::string>{
            { 690, "eCC_PoolCue" },
            { 40, "eCC_Shovel" },
            { 650, "eOther_ContractEnvelope" },
            { 0, "eCC_FireExtinguisher_01" },
            { 680, "eCC_GlassShiv" },
            { 50, "eCC_Hammer" },
            { 640, "eCC_Scissor" },
            { 10, "eCC_Knife" },
            { 60, "eCC_Cleaver" },
            { 670, "eCC_BaseballBat" },
            { 20, "eCC_Axe" },
            { 70, "eCC_AntitankMine" },
            { 660, "eItemIrrelevantWeapon" },
            { 30, "eCC_PetrolCan" },
            { 730, "eCC_Guitar" },
            { 80, "eCC_C4Brick" },
            { 720, "eCC_Crutch" },
            { 90, "eCC_RemoteExplosive" },
            { 100, "eDetonator" },
            { 740, "eCC_Iron" },
            { 110, "eCC_Wrench" },
            { 120, "eCC_Dildo" },
            { 903, "eDLC_TEST_Prop_02" },
            { 130, "eCC_Bottle" },
            { 140, "eCC_Saw" },
            { 150, "eCC_Screwdriver" },
            { 160, "eCC_MetalPipe" },
            { 170, "eCC_Gavel" },
            { 901, "eDLC_TEST_FireArm_02" },
            { 180, "eCC_Radio" },
            { 190, "eCC_Bong" },
            { 530, "eSniper_AS50" },
            { 921, "eCC_SledgeHammer" },
            { 200, "eCC_Statue_Bust_A" },
            { 520, "eSMG_TMP" },
            { 210, "eGun_44AutoMag" },
            { 550, "eSniper_SakoTRG" },
            { 220, "eGun_44AutoMagSilenced" },
            { 230, "eGun_Derringer" },
            { 540, "eSniper_Remington700" },
            { 923, "eCC_Brick" },
            { 570, "eItemAmmo" },
            { 240, "eGun_Glock" },
            { 560, "eSniper_SakoTRGSilenced" },
            { 250, "eGun_GlockDirty" },
            { 910, "eHotSauceBarrel" },
            { 260, "eGun_GlockSilenced" },
            { 900, "eDLC_TEST_FireArm_01" },
            { 270, "eGun_HardBaller_01" },
            { 280, "eGun_HardBallerSilenced" },
            { 290, "eGun_Sig226" },
            { 300, "eGun_Sig226Silenced" },
            { 940, "eOther_Camera" },
            { 310, "eGun_Sphinx3000" },
            { 320, "eGun_Taurus24_7" },
            { 330, "eGun_Taurus24_7Silenced" },
            { 340, "eGun_Spotter" },
            { 350, "eOther_MG" },
            { 360, "eOther_RPG" },
            { 370, "eRevolver_PoliceRevolver" },
            { 380, "eRevolver_Snubnosed" },
            { 390, "eRevolver_Taurus" },
            { 922, "eCC_Katana" },
            { 400, "eRifle_HK416" },
            { 410, "eRifle_HK416Scope" },
            { 420, "eRifle_HK416Silenced" },
            { 932, "eSyringe_Sedative" },
            { 430, "eRifle_PumpRifle" },
            { 440, "eRifle_SG552" },
            { 450, "eRifle_SG552Scope" },
            { 460, "eShotgun_M500" },
            { 470, "eShotgun_M500New" },
            { 480, "eSMG_HK_UMP" },
            { 490, "eSMG_HK_UMPFlashlight" },
            { 500, "eSMG_HK_UMPScope" },
            { 510, "eSMG_HK_UMPSilenced" },
            { 580, "eCC_FiberWire" },
            { 590, "eOther_ZippoLighter" },
            { 600, "eOther_Keycard_A" },
            { 610, "eOther_SecurityTape" },
            { 620, "eCC_PowerCord" },
            { 630, "eCC_PoliceBaton" },
            { 700, "eCC_Rake" },
            { 710, "eCC_ToyCar" },
            { 760, "eRifle_Beretta_ARX160" },
            { 800, "eShotgun_Spas12" },
            { 810, "eShotgun_Spas12_Compact" },
            { 830, "eShotgun_Silenced" },
            { 860, "eSMG_AK74u" },
            { 880, "eSMG_STK" },
            { 902, "eDLC_TEST_Prop_01" },
            { 920, "eOther_GenericPickup" },
            { 924, "cCC_Book_A" },
            { 931, "eSyringe_Lethal" },
            { 933, "eSyringe_Emetic" },
            { 934, "eSuitcase" },
            { 1337, "eUnknownItemType" }
        };

        (*enum_map)["EDebugExclusionLayerState"] = std::map<uint32_t, std::string>{
            { 0, "DEBUGELSTATE_UNBLOCKED" },
            { 1, "DEBUGELSTATE_BLOCKED" },
            { 2, "DEBUGELSTATE_UNKNOWN" }
        };

        (*enum_map)["ILightEntity.ELightType"] = std::map<uint32_t, std::string>{
            { 0, "LT_DIRECTIONAL" },
            { 1, "LT_ENVIRONMENT" },
            { 2, "LT_OMNI" },
            { 3, "LT_SPOT" },
            { 4, "LT_SQUARESPOT" },
            { 5, "LT_CAPSULE" },
            { 6, "LT_AREA_QUAD" }
        };

        (*enum_map)["ZPhotoModeMenuDataProvider.EMenuEntryType"] = std::map<uint32_t, std::string>{
            { 1, "Toggle" },
            { 2, "Slider" },
            { 3, "List" }
        };

        (*enum_map)["EOnlinTest"] = std::map<uint32_t, std::string>{
            { 0, "eHELLO" },
            { 1, "eWORLD" }
        };

        (*enum_map)["eContractSessionStartError"] = std::map<uint32_t, std::string>{
            { 0, "ERROR_NONE" },
            { 1, "ERROR_MISSING_CONTENT" },
            { 2, "ERROR_SERVER_UNREACHABLE" },
            { 3, "ERROR_SERVER_ERROR" },
            { 4, "ERROR_CONTRACT_NOT_PLAYABLE_YET" },
            { 5, "ERROR_CONTRACT_NOT_PLAYABLE_ANYMORE" },
            { 6, "ERROR_CANCELED" },
            { 7, "ERROR_ALREADY_STARTING" },
            { 8, "ERROR_UNKNOWN" }
        };

        (*enum_map)["EParticleColorUsage"] = std::map<uint32_t, std::string>{
            { 0, "REPLACE_PARTICLE_COLOR" },
            { 1, "LEAVE_PARTICLE_COLOR" }
        };

        (*enum_map)["EGameModeId"] = std::map<uint32_t, std::string>{
            { -1, "GameMode_Invalid" },
            { 0, "GameMode_Normal" },
            { 1, "GameMode_Sniper" },
            { 2, "GameMode_Versus" },
            { 3, "GameMode_Max" }
        };

        (*enum_map)["ZActBehaviorEntity.EApproachAlignment"] = std::map<uint32_t, std::string>{
            { 0, "AA_STRICT" },
            { 1, "AA_LOOSE" }
        };

        (*enum_map)["ILightEntity.EFrameIndexStrategy"] = std::map<uint32_t, std::string>{
            { 0, "WRAP" },
            { 1, "CLAMP" }
        };

        (*enum_map)["EViewportLock"] = std::map<uint32_t, std::string>{
            { 0, "VPL_None" },
            { 1, "VPL_Rectangular" },
            { 2, "VPL_Rectangular_AvoidMinimapOverlap" }
        };

        (*enum_map)["ZInputListenerDpadEntity.eInputListenerDpad"] = std::map<uint32_t, std::string>{
            { 0, "EILDP_UP" },
            { 1, "EILDP_LEFT" },
            { 2, "EILDP_DOWN" },
            { 3, "EILDP_RIGHT" }
        };

        (*enum_map)["ZEscortSituation2Entity.ETargetState"] = std::map<uint32_t, std::string>{
            { 0, "ETS_Unknown" },
            { 1, "ETS_NoTarget" },
            { 2, "ETS_RunningActBehavior" },
            { 3, "ETS_RunningDummyBehavior" },
            { 4, "ETS_RunningOtherBehavior" },
            { 5, "ETS_Dead" },
            { 6, "ETS_TargetIsHitman" }
        };

        (*enum_map)["ZTrespassingSituation.ESituationState"] = std::map<uint32_t, std::string>{
            { 1, "SS_Main" },
            { 2, "SS_StandDown" },
            { 3, "SS_Escalate" }
        };

        (*enum_map)["EAIFormationMemberSpeed"] = std::map<uint32_t, std::string>{
            { 0, "eFMS_Slow" },
            { 1, "eFMS_Normal" },
            { 2, "eFMS_Fast" }
        };

        (*enum_map)["ERenderGlowTypes"] = std::map<uint32_t, std::string>{
            { 0, "ERENDERGLOWTYPE_NONE" },
            { 1, "ERENDERGLOWTYPE_ENEMIES" },
            { 2, "ERENDERGLOWTYPE_ALLIES" },
            { 3, "ERENDERGLOWTYPE_CIVILIAN" },
            { 4, "ERENDERGLOWTYPE_ITEMS" },
            { 5, "ERENDERGLOWTYPE_STASHED_ITEMS" },
            { 6, "ERENDERGLOWTYPE_SETPIECE" },
            { 7, "ERENDERGLOWTYPE_BACKGROUND" },
            { 8, "ERENDERGLOWTYPE_CONTRACT_TARGET" },
            { 9, "ERENDERGLOWTYPE_CONTRACT_TARGET_NON_CRITICAL" },
            { 10, "ERENDERGLOWTYPE_CONTRACT_TARGET_SPECIAL" },
            { 11, "ERENDERGLOWTYPE_OBJECTIVES" },
            { 12, "ERENDERGLOWTYPE_ENFORCER" },
            { 13, "ERENDERGLOWTYPE_LTMEMORY" },
            { 14, "ERENDERGLOWTYPE_TAGGED" },
            { 15, "ERENDERGLOWTYPE_TAGFOCUS_UNTAGGED" },
            { 16, "ERENDERGLOWTYPE_TAGFOCUS_TAGGED" },
            { 17, "ERENDERGLOWTYPE_BACKGROUNDUNMASKED" },
            { 18, "ERENDERGLOWTYPE_INTERACTION" },
            { 19, "ERENDERGLOWTYPE_INTERACTION_SELECTED" },
            { 20, "ERENDERGLOWTYPE_INTERACTION_DESELECTED" },
            { 21, "ERENDERGLOWTYPE_PLAYER_LVA" },
            { 22, "ERENDERGLOWTYPE_PLAYER_LVA_SEEN" },
            { 23, "ERENDERGLOWTYPE_VS_OPPONENT" },
            { 24, "ERENDERGLOWTYPE_TRAVERSAL" },
            { 25, "ERENDERGLOWTYPE_EMISSIVE_UI" },
            { 26, "ERENDERGLOWTYPE_EMISSIVE_UI_IGNORE_DEPTH" },
            { 27, "ERENDERGLOWTYPE_OPPONENT" },
            { 28, "ERENDERGLOWTYPE_CAMERA" }
        };

        (*enum_map)["EFocusBarState"] = std::map<uint32_t, std::string>{
            { 0, "FOCUS_BAR_NORMAL" },
            { 1, "FOCUS_BAR_INSTINCT" },
            { 2, "FOCUS_BAR_BURNING" }
        };

        (*enum_map)["ESoundCollisionObjectType"] = std::map<uint32_t, std::string>{
            { 0, "StaticRigidBody" },
            { 1, "DynamicRigidBody" },
            { 2, "Ragdoll" }
        };

        (*enum_map)["ZDistanceCondition.ECompareMethod"] = std::map<uint32_t, std::string>{
            { 0, "CM_GreaterOrEqualThan" },
            { 1, "CM_LessThan" }
        };

        (*enum_map)["TeleportActionType"] = std::map<uint32_t, std::string>{
            { 0, "STAY" },
            { 1, "TELEPORT" },
            { 2, "LEAVE_CROWD" }
        };

        (*enum_map)["EActorAIState"] = std::map<uint32_t, std::string>{
            { 0, "eAAIS_None" },
            { 1, "eAAIS_Distracted" },
            { 2, "eAAIS_PotentialThreat" },
            { 3, "eAAIS_PotentialThreatDistracted" },
            { 4, "eAAIS_PotentialThreatDisabled" },
            { 5, "eAAIS_Aggressive" },
            { 6, "eAAIS_EscortingOut" },
            { 7, "eAAIS_Fleeing" },
            { 8, "eAAIS_Unconscious" },
            { 9, "eAAIS_Stunned" },
            { 10, "eAAIS_Grenade" },
            { 11, "eAAIS_DisabledInCombat" },
            { 12, "eAAIS_Disabled" },
            { 13, "eAAIS_Max" }
        };

        (*enum_map)["EMorphemeEventId"] = std::map<uint32_t, std::string>{
            { 0, "eDE_None" },
            { 1700, "eDE_StandToMoveRotationToTranslation" },
            { 18, "eDE_UnholsterWeapon" },
            { 10051, "eDE_Act_FB_BlendIn_Start" },
            { 862, "eDE_RecoveryPowerRagdollEnd" },
            { 19, "eDE_HolsterWeapon" },
            { 100, "eDE_LegR" },
            { 20, "eDE_FireWeapon" },
            { 1801, "eDE_HeadIKDisable" },
            { 4001, "eDE_ActItemPickup" },
            { 101, "eDE_LegL" },
            { 900, "eDE_ImpactFinished" },
            { 21, "eDE_AttachWeapon" },
            { 22, "eDE_DetachWeapon" },
            { 200, "eDE_TransitionEnd_LegR" },
            { 201, "eDE_TransitionEnd_LegL" },
            { 255, "eDE_Finish" },
            { 701, "eDE_EnableNPCHitmanCollision" },
            { 2010, "eDE_HeadControlEnable" },
            { 300, "eDE_InterpolationStart" },
            { 3011, "eDE_CombatEnableLeftHandIK" },
            { 1600, "eDE_OffHandIKEnable" },
            { 301, "eDE_InterpolationEnd" },
            { 400, "eDE_TransitionSignal" },
            { 3010, "eDE_CombatEnableRightHandIK" },
            { 3030, "eDE_CombatEnableShoot" },
            { 500, "eDE_TransitionEnd" },
            { 10050, "eDE_Act_UB_BlendIn_End" },
            { 700, "eDE_DisableNPCHitmanCollision" },
            { 800, "eDE_EnableRagdollRangeStart" },
            { 801, "eDE_EnableRagdollRangeEnd" },
            { 850, "eDE_StartBlendingOut" },
            { 3050, "eDE_CombatEnableBlindShoot" },
            { 851, "eDE_FinishBlendingOut" },
            { 1090, "eDE_ActFullbodyStartMarker" },
            { 860, "eDE_StartOrientationBlend" },
            { 861, "eDE_FinishOrientationBlend" },
            { 3015, "eDE_CombatEndEnableIK" },
            { 863, "eDE_RecoveryBlendEnd" },
            { 1000, "eDE_ActFinished" },
            { 1001, "eDE_ActFinishedWhenMoving" },
            { 2001, "eDE_WindowLeaningDisable" },
            { 1005, "eDE_ActReached" },
            { 1050, "eDE_ActLoop" },
            { 1091, "eDE_ActFullbodyEndMarker" },
            { 1100, "eDE_ReactionFinished" },
            { 1500, "eDE_StandToCrouch" },
            { 1501, "eDE_CrouchToStand" },
            { 1601, "eDE_OffHandIKDisable" },
            { 4002, "eDE_ActItemDrop" },
            { 3070, "eDE_CombatUnholsterGrenade" },
            { 1701, "eDE_MoveToStandTranslationToRotation" },
            { 1800, "eDE_HeadIKEnable" },
            { 4000, "eDE_ActBehaviorEventStart" },
            { 2000, "eDE_WindowLeaningEnable" },
            { 4010, "eDE_AmbientItemUseMarker" },
            { 2002, "eDE_PreventDeathAnimations" },
            { 2003, "eDE_AllowDeathAnimations" },
            { 2011, "eDE_HeadControlDisable" },
            { 3000, "eDE_CombatActEndMarker" },
            { 3025, "eDE_CombatEndDisableIK" },
            { 3100, "eDE_CombatAim" },
            { 10301, "eDE_Act_LeadIn_Marker" },
            { 3020, "eDE_CombatStartDisableIK" },
            { 3040, "eDE_CombatDisableShoot" },
            { 3060, "eDE_CombatDisableBlindShoot" },
            { 3080, "eDE_CombatThrowGrenade" },
            { 4999, "eDE_ActBehaviorEventEnd" },
            { 10052, "eDE_Act_FB_BlendIn_End" },
            { 10053, "eDE_Act_FB_BlendOut_End" }
        };

        (*enum_map)["EAccidentScaleContext"] = std::map<uint32_t, std::string>{
            { 0, "eASC_Standard" },
            { 1, "eASC_Unsafe" },
            { 2, "eASC_Dangerous" }
        };

        (*enum_map)["EEngineModeId"] = std::map<uint32_t, std::string>{
            { -1, "EngineMode_Invalid" },
            { 0, "EngineMode_SinglePlayer" },
            { 1, "EngineMode_SplitScreen" },
            { 2, "EngineMode_Multiplayer" },
            { 3, "EngineMode_Max" }
        };

        (*enum_map)["ZActBehaviorEntity.EState"] = std::map<uint32_t, std::string>{
            { 0, "UNDEFINED" },
            { 1, "IDLE" },
            { 2, "STOPPING" },
            { 3, "PREPARING" },
            { 4, "MOVING" },
            { 5, "ENTERING" },
            { 6, "RUNNING" },
            { 7, "TIMEDOUT" },
            { 8, "COMPLETE" }
        };

        (*enum_map)["ZSoundAmbienceGroup.ESoundCollisionType"] = std::map<uint32_t, std::string>{
            { 0, "SCT_Box" },
            { 1, "SCT_Cylinder" },
            { 2, "SCT_Sphere" },
            { 3, "SCT_Volume" }
        };

        (*enum_map)["EDamageEvent"] = std::map<uint32_t, std::string>{
            { 128, "eDE_Shoot" },
            { 64, "eDE_DeadlyThrow" },
            { 0, "eDE_UNDEFINED" },
            { 16384, "eDE_Electric" },
            { 32768, "eDE_SuspendedObject" },
            { 32, "eDE_KickDownStairs" },
            { 8192, "eDE_Poison" },
            { 16, "eDE_PushOver" },
            { 4096, "eDE_Garotte" },
            { 1, "eDE_InCloset" },
            { 2, "eDE_Subdue" },
            { 4, "eDE_CloseCombat" },
            { 256, "eDE_Sedated" },
            { 512, "eDE_InstantTakeDown" },
            { 1024, "eDE_CoupDeGrace" },
            { 2048, "eDE_ContextKill" },
            { 65536, "eDE_Burn" },
            { 131072, "eDE_Drop" },
            { 262144, "eDE_Drown" }
        };

        (*enum_map)["ZDebugGizmoEntity.EDrawLayer"] = std::map<uint32_t, std::string>{
            { 0, "DL_DEFAULT" },
            { 1, "DL_LIGHT" },
            { 2, "DL_PARTICLES" },
            { 3, "DL_PARTITIONING" },
            { 4, "DL_DECALS" },
            { 5, "DL_CROWD" },
            { 6, "DL_PHYSICS" },
            { 7, "DL_HERO" },
            { 8, "DL_AI" },
            { 9, "DL_AI_GRID" },
            { 10, "DL_AI_SITUATION" },
            { 11, "DL_AI_AREA" },
            { 12, "DL_NPC_LOCOMOTION" },
            { 13, "DL_GAME" },
            { 14, "DL_ALIGNMENT" },
            { 15, "DL_ENGINE" },
            { 16, "DL_SOUND" },
            { 17, "DL_ANIMATION" },
            { 18, "DL_CLOTH" },
            { 19, "DL_SOUND_PARTITIONING" },
            { 20, "DL_UI" }
        };

        (*enum_map)["ZCoverPlane.ECoverSize"] = std::map<uint32_t, std::string>{
            { 0, "eLowCover" },
            { 1, "eMediumCover" },
            { 2, "eHighCover" }
        };

        (*enum_map)["EAnimSetType"] = std::map<uint32_t, std::string>{
            { 0, "EAST_UNDEFINED" },
            { 1, "EAST_DEFAULT" },
            { 2, "EAST_PISTOL" },
            { 3, "EAST_REVOLVER" },
            { 4, "EAST_SMG" },
            { 5, "EAST_SNIPER" },
            { 6, "EAST_ASSULT" },
            { 7, "EAST_SHOTGUN" },
            { 8, "EAST_BODYBAG" },
            { 9, "EAST_GLASS" },
            { 10, "EAST_WHISKYGLASS" },
            { 11, "EAST_WINEGLASS" },
            { 12, "EAST_CHAMPAGNEGLASS" },
            { 13, "EAST_PHONE" },
            { 14, "EAST_BOX" },
            { 15, "EAST_PLATE" },
            { 16, "EAST_SMALLOBJ" },
            { 17, "EAST_SUITCASE" },
            { 18, "EAST_TRAY" },
            { 19, "EAST_TROLLY" },
            { 20, "EAST_FLASHLIGHT" },
            { 21, "EAST_CARRY_1HANDEDWEAPON" },
            { 22, "EAST_CARRY_2HANDEDWEAPON" },
            { 23, "EAST_CARRY_RAKE" },
            { 24, "EAST_CARRY_WEAPON_ITEM" },
            { 25, "EAST_CARRY_BRICK_MINE" },
            { 26, "EAST_CARRY_PROXY_MINE" },
            { 27, "EAST_CARRY_LEAD_PIPES" },
            { 28, "EAST_CARRY_TUBE" },
            { 29, "EAST_CARRY_UMBRELLA" }
        };

        (*enum_map)["ZContextKillGuide.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" }
        };

        (*enum_map)["EMassImpulseType"] = std::map<uint32_t, std::string>{
            { 0, "eMIT_None" },
            { 1, "eMIT_Explosion" },
            { 2, "eMIT_ShockWave" },
            { 3, "eMIT_ShockWaveNoExplosion" }
        };

        (*enum_map)["ReverbFidelity"] = std::map<uint32_t, std::string>{
            { 0, "Low" },
            { 1, "Medium" },
            { 2, "High" }
        };

        (*enum_map)["EDifficultyLevel"] = std::map<uint32_t, std::string>{
            { 0, "eDL_NO_FLAGS" },
            { 8, "eDL_VERY_HARD" },
            { 1, "eDL_EASY" },
            { 2, "eDL_NORMAL" },
            { 4, "eDL_HARD" },
            { 15, "eDL_ALL_FLAGS" }
        };

        (*enum_map)["ECharacterCollidableLayer"] = std::map<uint32_t, std::string>{
            { 0, "CCL_DYNAMIC" },
            { 1, "CCL_DYNAMIC_TRANSPARENT" },
            { 2, "CCL_DYNAMIC_NO_COLLISION" },
            { 3, "CCL_DYNAMIC_NO_COLLISION_TRANSPARENT" },
            { 4, "CCL_UNUSED_LAST" }
        };

        (*enum_map)["ZHUDOutfitWidgetControllerEntity.EVisibilityPolicy"] = std::map<uint32_t, std::string>{
            { 0, "INITIALLY_HIDDEN_POPUP_ON_CHANGE" },
            { 1, "DONT_TOUCH" }
        };

        (*enum_map)["ESmartWaitCondition"] = std::map<uint32_t, std::string>{
            { 0, "SWC_Time" },
            { 1, "SWC_Distance" },
            { 2, "SWC_Executing" },
            { 3, "SWC_Executed" }
        };

        (*enum_map)["ZActorPickerEffectTrack.EEffectPhaseAction"] = std::map<uint32_t, std::string>{
            { 0, "EPA_ATTACH" },
            { 1, "EPA_DETACH" }
        };

        (*enum_map)["ERegionId"] = std::map<uint32_t, std::string>{
            { 0, "RegionId_Default" },
            { 1, "RegionId_Japan" },
            { 2, "RegionId_Asia" }
        };

        (*enum_map)["ZTestGroupPath.EModifierType"] = std::map<uint32_t, std::string>{
            { 0, "EMT_PushCorners" },
            { 1, "EMT_PushCornersAlt" }
        };

        (*enum_map)["ZCautiousSearchGroup.EAssistantState"] = std::map<uint32_t, std::string>{
            { 0, "AS_CalculateFields" },
            { 1, "AS_RequestNode" },
            { 2, "AS_Approach" },
            { 3, "AS_Approaching" },
            { 4, "AS_Act" },
            { 5, "AS_Acting" }
        };

        (*enum_map)["EAnimationPose"] = std::map<uint32_t, std::string>{
            { 0, "AP_Undefined" },
            { 1, "AP_Standing" },
            { 2, "AP_SittingChair" },
            { 3, "AP_SittingGround" },
            { 4, "AP_LyingGround" },
            { 5, "AP_Crouching" },
            { 6, "AP_SittingBench" },
            { 7, "AP_SittingChairTable" }
        };

        (*enum_map)["EActorLookAtStopReason"] = std::map<uint32_t, std::string>{
            { 0, "eSR_Unknown" },
            { 1, "eSR_Disabled" },
            { 2, "eSR_DurationExpired" },
            { 3, "eSR_OutOfRange" },
            { 4, "eSR_OutOfSight" },
            { 5, "eSR_OutOfRemainingPathDistance" },
            { 6, "eSR_Interrupted" },
            { 7, "eSR_TargetRemoved" },
            { 8, "eSR_HigherPriorityProfile" },
            { 9, "eSR_HideInPlainSight" }
        };

        (*enum_map)["ZHM5Item.EUseTypes"] = std::map<uint32_t, std::string>{
            { 0, "EUT_CantUse" },
            { 1, "EUT_Toggle" },
            { 2, "EUT_TurnOn" }
        };

        (*enum_map)["EHM5SoundFootwearType"] = std::map<uint32_t, std::string>{
            { 0, "EFWT_UNDEFINED" },
            { 1, "EFWT_BAREFOOT" },
            { 2, "EFWT_SLIPPERS" },
            { 3, "EFWT_DISPOSABLE_SLIPPERS" },
            { 4, "EFWT_SANDALS" },
            { 5, "EFWT_SNEAKERS" },
            { 6, "EFWT_SNEAKERS_METALLEG" },
            { 7, "EFWT_LEATHER" },
            { 8, "EFWT_FEMALE_LEATHER" },
            { 9, "EFWT_BOOTS" },
            { 10, "EFWT_COWBOY_BOOTS" },
            { 11, "EFWT_FEMALE_COWBOY_BOOTS" },
            { 12, "EFWT_RUBBER_BOOTS" },
            { 13, "EFWT_HIGH_HEELS" },
            { 14, "EFWT_LEATHER_KEYS" },
            { 15, "EFWT_SWAT_BOOTS" }
        };

        (*enum_map)["ECharacterIdleHandlerFullbodyType"] = std::map<uint32_t, std::string>{
            { 0, "ecIHFBT_DisguisedIdle" },
            { 1, "ecIHFBT_Event" }
        };

        (*enum_map)["ZValueBool_Operation_Signal.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" },
            { 3, "NOT_ALL" },
            { 4, "ALL_EQUAL" },
            { 5, "ONE_TRUE" }
        };

        (*enum_map)["ZCautiousInvestigateGroup.EInvestigateGroupState"] = std::map<uint32_t, std::string>{
            { 0, "IGS_FindAssistant" },
            { 1, "IGS_PreAcknowledge" },
            { 2, "IGS_Acknowledge" },
            { 3, "IGS_Approach" },
            { 4, "IGS_Approaching" },
            { 5, "IGS_Investigating" },
            { 6, "IGS_DeadBody" },
            { 7, "IGS_Completed" },
            { 8, "IGS_Max" }
        };

        (*enum_map)["IHM5Door.eCloseMode"] = std::map<uint32_t, std::string>{
            { 0, "CM_AUTOCLOSE" },
            { 1, "CM_MANUALCLOSE" },
            { 2, "CM_NEVERCLOSE" }
        };

        (*enum_map)["EParticleSpritePivotLocation"] = std::map<uint32_t, std::string>{
            { 0, "CENTER_PIVOT" },
            { 1, "BOTTOM_PIVOT" },
            { 2, "TOP_PIVOT" }
        };

        (*enum_map)["WebSocketUtils.EOpCode"] = std::map<uint32_t, std::string>{
            { 0, "eCONTINUATION" },
            { 8, "eCLOSE" },
            { 1, "eTEXT" },
            { 9, "ePING" },
            { 2, "eBINARY" },
            { 10, "ePONG" },
            { 15, "eNONE" }
        };

        (*enum_map)["EVRConfigAnimationMode"] = std::map<uint32_t, std::string>{
            { 0, "EVRCAM_FullAnimation" },
            { 1, "EVRCAM_FullAnimationFreeze" },
            { 2, "EVRCAM_HideAnimation" },
            { 3, "EVRCAM_HideUpperBodyAnimation" },
            { 4, "EVRCAM_RemoveGroundMotion" },
            { 5, "EVRCAM_RemoveFullBodyAndGroundMotion" },
            { 6, "EVRCAM_KeepCurrentMode" }
        };

        (*enum_map)["EAnimSetState"] = std::map<uint32_t, std::string>{
            { 0, "EASES_DEFAULT" },
            { 1, "EASES_AMBIENT_ARMED" },
            { 2, "EASES_AMBIENT_VIP_ESCORT" },
            { 3, "EASES_AMBIENT_HERO_ESCORT" },
            { 4, "EASES_COMBAT_EVACUATE" },
            { 5, "EASES_COMBAT_EVACUATE_VIP_SOLO" },
            { 6, "EASES_SICK" },
            { 7, "EASES_INFECTED" }
        };

        (*enum_map)["ZRenderPostfilterParametersEntity.EHDRToneMapType"] = std::map<uint32_t, std::string>{
            { 0, "eLinear" },
            { 1, "eReinhardRGB" },
            { 2, "eFilmicRGB" }
        };

        (*enum_map)["SFootIKEventData.EFoot"] = std::map<uint32_t, std::string>{
            { 0, "eLeft" },
            { 1, "eRight" },
            { 2, "eBoth" }
        };

        (*enum_map)["EHM5GameInputFlag"] = std::map<uint32_t, std::string>{
            { 0, "eGameInputActionPerform" },
            { 1, "eGameInputActionPickup" },
            { 2, "eGameInputActionAbort" },
            { 3, "eGameInputActionDoor" },
            { 4, "eGameInputWeaponZoomIn" },
            { 5, "eGameInputWeaponZoomOut" },
            { 6, "eGameInputActionShoot" },
            { 7, "eGameInputActionPrecisionShoot" },
            { 8, "eGameInputAimOTS" },
            { 9, "eGameInputCoverAction" },
            { 10, "eGameInputCoverAlternativeAction" },
            { 11, "eGameInputInventoryAccept" },
            { 12, "eGameInputEquipShortRange" },
            { 13, "eGameInputEquipLongRange" },
            { 14, "eGameInputHolsterItem" },
            { 15, "eGameInputDropItem" },
            { 16, "eGameInputTogglePlacement" },
            { 17, "eGameInputActivatePropQuick" },
            { 18, "eGameInputActivateProp" },
            { 19, "eGameInputActivatePropHold" },
            { 20, "eGameInputActivatePropSecondary" },
            { 21, "eGameInputActivatePropInterruptibleStart" },
            { 22, "eGameInputActivatePropInterruptibleEnd" },
            { 23, "eGameInputConcealRetrieve" },
            { 24, "eGameInputGuideAction" },
            { 25, "eGameInputGuideActionHold" },
            { 26, "eGameInputGuideActionSecondary" },
            { 27, "eGameInputGuideEnterWindow" },
            { 28, "eGameInputGuideSneakPastWindow" },
            { 29, "eGameInputGuideSneakPastWindowHold" },
            { 30, "eGameInputGuideKill" },
            { 31, "eGameInputSlideLadder" },
            { 32, "eGameInputCloseCombat" },
            { 33, "eGameInputFiberwire" },
            { 34, "eGameInputCloseCombatCounter" },
            { 35, "eGameInputCloseCombatTakeDown" },
            { 36, "eGameInputCloseCombatSnapNeck" },
            { 37, "eGameInputSurrender" },
            { 38, "eGameInputShowItem" },
            { 39, "eGameInputReload" },
            { 40, "eGameInputTakeDisguise" },
            { 41, "eGameInputDragDropBody" },
            { 42, "eGameInputDumpBody" },
            { 43, "eGameInputSneakToggle" },
            { 44, "eGameInputCamSwitch" },
            { 45, "eGameInputActivateRun" },
            { 46, "eGameInputActivateWalkSlow" },
            { 47, "eGameInputInstinctMode" },
            { 48, "eGameInputContractTargetTag" },
            { 49, "eGameInputThrow" },
            { 50, "eGameInputCloseCombatChainHigh" },
            { 51, "eGameInputCloseCombatChainLow" },
            { 52, "eGameInputCloseCombatChainCounter" },
            { 53, "eGameInputSkipCutSequence" },
            { 54, "eGameInputCloseCombatChokeStart" },
            { 55, "eGameInputCloseCombatChoke" },
            { 56, "eGameInputFocusedInteractionFaceUp" },
            { 57, "eGameInputFocusedInteractionFaceLeft" },
            { 58, "eGameInputFocusedInteractionFaceDown" },
            { 59, "eGameInputFocusedInteractionLeftStickAnalog" },
            { 60, "eGameInputRemoteAction" },
            { 61, "eGameInputChangeAmmoNext" },
            { 62, "eGameInputChangeAmmoPrevious" },
            { 63, "eGameInputDefault" },
            { 64, "eGameInputActionsNUM" }
        };

        (*enum_map)["EDramaStateFlag"] = std::map<uint32_t, std::string>{
            { 0, "eDSF_DEFAULT" },
            { 8, "eDSF_RUNNING" },
            { 16, "eDSF_DONE" },
            { 32, "eDSF_TERMINATED" },
            { 1, "eDSF_ENABLED" },
            { 2, "eDSF_CAST" },
            { 4, "eDSF_RESUMING" }
        };

        (*enum_map)["ZHeroEscortSituation2Entity.EEscortState"] = std::map<uint32_t, std::string>{
            { 0, "EES_Idle" },
            { 1, "EES_Evaluate" },
            { 2, "EES_Escorting" },
            { 3, "EES_Intermediate" },
            { 4, "EES_OutOfRange" }
        };

        (*enum_map)["EActorState"] = std::map<uint32_t, std::string>{
            { 0, "AS_DEACTIVATED" },
            { 1, "AS_ALIVE" },
            { 2, "AS_DYING" },
            { 3, "AS_DEAD" },
            { 4, "AS_DISABLED" }
        };

        (*enum_map)["SActorSoundDefs.EDefinition"] = std::map<uint32_t, std::string>{
            { 0, "_NoSound" }
        };

        (*enum_map)["ZKeywordCondition.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" },
            { 3, "ANY_TRUE_IF_NO_REQS" },
            { 4, "EQUAL" },
            { 5, "GREATER" },
            { 6, "LESS" }
        };

        (*enum_map)["EBehaviorTreeVariableType"] = std::map<uint32_t, std::string>{
            { -1, "BTVT_Invalid" },
            { 0, "BTVT_SceneReference" },
            { 1, "BTVT_Contextual" },
            { 2, "BTVT_Dynamic" },
            { 3, "BTVT_NumTypes" }
        };

        (*enum_map)["EActorPerceptionSensitivity"] = std::map<uint32_t, std::string>{
            { 0, "APS_AMBIENT_DEAFBLIND" },
            { 1, "APS_AMBIENT_SLEEPING" },
            { 2, "APS_AMBIENT_PREOCCUPIED" },
            { 3, "APS_AMBIENT" },
            { 4, "APS_ALERT_LOW" },
            { 5, "APS_ALERT" },
            { 6, "APS_COMBAT" },
            { 7, "APS_SPIDER_SENSE" }
        };

        (*enum_map)["ECharacterStateTransitionAttempt"] = std::map<uint32_t, std::string>{
            { 0, "eSM_TA_IfDestinationCan" },
            { 1, "eSM_TA_IfDestinationCanAndWants" },
            { 2, "eSM_TA_IfDestinationCanAndOriginDoesNotWant" },
            { 3, "eSM_TA_IfDestinationCanAndWantsOriginDoesNotWant" },
            { 4, "eSM_TA_IfDestinationCanAndOriginCanNot" }
        };

        (*enum_map)["ETakeDownState"] = std::map<uint32_t, std::string>{
            { 0, "eTD_Cover" },
            { 1, "eTD_Locomotion" },
            { 2, "eTD_ChokeLoop" },
            { 3, "eTD_ChokeFinish" },
            { 4, "eTD_Deactivating" },
            { 5, "eTD_Unknown" }
        };

        (*enum_map)["ESequencePreviewState"] = std::map<uint32_t, std::string>{
            { 0, "PREVIEW_STOPPED" },
            { 1, "PREVIEW_PLAYING" },
            { 2, "PREVIEW_PAUSED" }
        };

        (*enum_map)["ECameraState"] = std::map<uint32_t, std::string>{
            { 0, "eCamSneakStand" },
            { 1, "eCamSneakWalk" },
            { 2, "eCamSneakRoadyRun" },
            { 3, "eCamNormalStand" },
            { 4, "eCamNormalWalk" },
            { 5, "eCamNormalRun" },
            { 6, "eCamLocomotion" },
            { 7, "eCamCrowdStand" },
            { 8, "eCamCrowdWalk" },
            { 9, "eCamCrowdRun" },
            { 10, "eCamCrowdSneakStand" },
            { 11, "eCamCrowdSneakWalk" },
            { 12, "eCamCrowdSneakRoadyRun" },
            { 13, "eCamCrowdLocomotion" },
            { 14, "eCamDead" },
            { 15, "eCamLadder" },
            { 16, "eCamDrainPipe" },
            { 17, "eCamDrag" },
            { 18, "eCamSBTag" },
            { 19, "eCamSBTagOTS" },
            { 20, "eCamCloseCombat" },
            { 21, "eCamFiberWire" },
            { 22, "eCamWindowPull" },
            { 23, "eCamRailPush" },
            { 24, "eCamLedgeKick" },
            { 25, "eCamLedgePull" },
            { 26, "eCamLedgeHang" },
            { 27, "eCamLedgeWalk" },
            { 28, "eCamLedgeWalkOTS" },
            { 29, "eCamCoverLow" },
            { 30, "eCamCoverMedium" },
            { 31, "eCamCoverHigh" },
            { 32, "eCamCoverLowOTS" },
            { 33, "eCamCoverHighOTS" },
            { 34, "eCamCoverLowScope" },
            { 35, "eCamCoverHighScope" },
            { 36, "eCamCoverLowTakedownOver" },
            { 37, "eCamCoverLowTakedownCorner" },
            { 38, "eCamCoverHighTakedownCorner" },
            { 39, "eCamTakeDisguise" },
            { 40, "eCamOTS" },
            { 41, "eCamOTSHigh" },
            { 42, "eCamOTSLow" },
            { 43, "eCamUnAimedShooting" },
            { 44, "eCamUnAimedShootingHigh" },
            { 45, "eCamUnAimedShootingLow" },
            { 46, "eCamScope" },
            { 47, "eCamScopeHigh" },
            { 48, "eCamScopeLow" },
            { 49, "eCamVaultLow" },
            { 50, "eCamVaultHigh" },
            { 51, "eCamTakedown" },
            { 52, "eCamTakedownChair" },
            { 53, "eCamLockedSniping" },
            { 54, "eCamLockedSnipingScope" },
            { 55, "eCamLockedSnipingScopeHigh" },
            { 56, "eCamLockedSnipingScopeLow" },
            { 57, "eCamContainerAssemble" },
            { 58, "eCamNumProfiles" },
            { 59, "eCamAll" }
        };

        (*enum_map)["IContractObjective.ObjectiveType"] = std::map<uint32_t, std::string>{
            { 0, "KILL" },
            { 1, "SETPIECE" },
            { 2, "CUSTOMKILL" },
            { 3, "CUSTOM" }
        };

        (*enum_map)["ZAISoundEvent.ELoudness"] = std::map<uint32_t, std::string>{
            { 0, "EAISEL_Default" },
            { 1, "EAISEL_VeryLow" },
            { 2, "EAISEL_Low" },
            { 3, "EAISEL_Normal" },
            { 4, "EAISEL_Loud" },
            { 5, "EAISEL_VeryLoud" }
        };

        (*enum_map)["ZStandOffSituation.ESituationState"] = std::map<uint32_t, std::string>{
            { 0, "SS_Uncertain" },
            { 1, "SS_Main" },
            { 2, "SS_Arresting" },
            { 3, "SS_GetHelp" },
            { 4, "SS_Escalate" },
            { 5, "SS_Investigate" },
            { 6, "SS_GetHelpFromFleeingCivilian" }
        };

        (*enum_map)["ECppTypeFlags"] = std::map<uint32_t, std::string>{
            { 1, "EDITOR_ONLY" },
            { 2, "EDITOR_ONLY_CRITICAL" },
            { 4, "RESETABLE" },
            { 8, "RESETABLE_COND" },
            { 16, "RESETABLE_STATIC" }
        };

        (*enum_map)["ESynchronisedActionState"] = std::map<uint32_t, std::string>{
            { 0, "eSAS_INACTIVE" },
            { 1, "eSAS_WAITING_TO_EXECUTE" },
            { 2, "eSAS_COOLINGDOWN" }
        };

        (*enum_map)["EInventoryConfigItemHandling"] = std::map<uint32_t, std::string>{
            { 0, "EICIH_Allow" },
            { 1, "EICIH_Store" },
            { 2, "EICIH_InstaStore" },
            { 3, "EICIH_Drop" },
            { 4, "EICIH_DropOrStore" },
            { 5, "EICIH_DropAndPickup" },
            { 6, "EICIH_DoNothing" }
        };

        (*enum_map)["ZUISubtitleDataProvider.EAlignment"] = std::map<uint32_t, std::string>{
            { 0, "ALIGN_BOTTOM" },
            { 1, "ALIGN_TOP" }
        };

        (*enum_map)["ECollidableLayer"] = std::map<uint32_t, std::string>{
            { 0, "eCollLayer_COLLIDE_WITH_ALL" },
            { 1, "eCollLayer_STATIC_COLLIDABLES_ONLY" },
            { 2, "eCollLayer_DYNAMIC_COLLIDABLES_ONLY" },
            { 3, "eCollLayer_STAIRS" },
            { 4, "eCollLayer_SHOT_ONLY_COLLISION" },
            { 5, "eCollLayer_DYNAMIC_TRASH_COLLIDABLES" },
            { 6, "eCollLayer_KINEMATIC_COLLIDABLES_ONLY" },
            { 7, "eCollLayer_STATIC_COLLIDABLES_ONLY_TRANSPARENT" },
            { 8, "eCollLayer_DYNAMIC_COLLIDABLES_ONLY_TRANSPARENT" },
            { 9, "eCollLayer_KINEMATIC_COLLIDABLES_ONLY_TRANSPARENT" },
            { 10, "eCollLayer_STAIRS_STEPS" },
            { 11, "eCollLayer_STAIRS_SLOPE" },
            { 12, "eCollLayer_HERO_PROXY" },
            { 13, "eCollLayer_ACTOR_PROXY" },
            { 14, "eCollLayer_HERO_VR" },
            { 15, "eCollLayer_CLIP" },
            { 16, "eCollLayer_ACTOR_RAGDOLL" },
            { 17, "eCollLayer_CROWD_RAGDOLL" },
            { 18, "eCollLayer_LEDGE_ANCHOR" },
            { 19, "eCollLayer_ACTOR_DYN_BODY" },
            { 20, "eCollLayer_HERO_DYN_BODY" },
            { 21, "eCollLayer_ITEMS" },
            { 22, "eCollLayer_WEAPONS" },
            { 23, "eCollLayer_COLLISION_VOLUME_HITMAN_ON" },
            { 24, "eCollLayer_COLLISION_VOLUME_HITMAN_OFF" },
            { 25, "eCollLayer_DYNAMIC_COLLIDABLES_ONLY_NO_CHARACTER" },
            { 26, "eCollLayer_DYNAMIC_COLLIDABLES_ONLY_NO_CHARACTER_TRANSPARENT" },
            { 27, "eCollLayer_COLLIDE_WITH_STATIC_ONLY" },
            { 28, "eCollLayer_AI_VISION_BLOCKER" },
            { 29, "eCollLayer_AI_VISION_BLOCKER_AMBIENT_ONLY" },
            { 30, "eCollayer_UNUSED_LAST" }
        };

        (*enum_map)["EGSKillVictim"] = std::map<uint32_t, std::string>{
            { 0, "GSKILLVICTIM_UNKNOWN" },
            { 1, "GSKILLVICTIM_CIVILIAN" },
            { 2, "GSKILLVICTIM_GUARD" },
            { 3, "GSKILLVICTIM_TARGET" }
        };

        (*enum_map)["IContractEvaluationContextListener.EListenerType"] = std::map<uint32_t, std::string>{
            { 0, "eDEFAULT" },
            { 1, "eOBJECTIVECOUNTER" },
            { 2, "eFORCEUPDATE" },
            { 3, "eCUSTOM" },
            { 4, "eINTERNAL" },
            { 5, "eCHALLENGECOUNTER" },
            { 6, "eCHALLENGETREE" },
            { 7, "eTOGGLE" },
            { 8, "eMATCHARRAYS" }
        };

        (*enum_map)["IRenderCompositorEntity.EMode"] = std::map<uint32_t, std::string>{
            { 0, "eSourceA" },
            { 1, "eSourceB" },
            { 2, "eLayered" },
            { 3, "eAlphaLayered" }
        };

        (*enum_map)["ZActorKnowledgeCondition.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "ANY" }
        };

        (*enum_map)["IHM5Door.EOpenMode"] = std::map<uint32_t, std::string>{
            { 0, "OM_TWO_WAY" },
            { 1, "OM_OPEN_POS_SIDE_ONLY" },
            { 2, "OM_OPEN_NEG_SIDE_ONLY" },
            { 3, "OM_DISABLED" }
        };

        (*enum_map)["EHeroGameState"] = std::map<uint32_t, std::string>{
            { 0, "eHGS_Reserved_QueryALL" },
            { 1, "eHGS_Reserved_QueryAny" },
            { 2, "eHGS_InstinctModeActive" },
            { 3, "eHGS_IsHardToSee" },
            { 4, "eHGS_Sneaking" },
            { 5, "eHGS_InSequence" },
            { 6, "eHGS_InCloseCombat" },
            { 7, "eHGS_ItemHandlingActive" },
            { 8, "eHGS_CamSwitched" },
            { 9, "eHGS_SniperMode" },
            { 10, "eHGS_OTSMode" },
            { 11, "eHGS_DualWielding" },
            { 12, "eHGS_PreciseAim" },
            { 13, "eHGS_ActivatingAltFire" },
            { 14, "eHGS_FiredLastFrFocusBurnRate" },
            { 15, "eHGS_FiredLastFrFocusGainValue" },
            { 16, "eHGS_BurningFocus" },
            { 17, "eHGS_InsideCloset" },
            { 18, "eHGS_Peeking" },
            { 19, "eHGS_FocusedInteraction" },
            { 20, "eHGS_HoldsUtility" },
            { 21, "eHGS_FacingRight" },
            { 22, "eHGS_ThrowAiming" },
            { 23, "eHGS_PlaceItemAiming" },
            { 24, "eHGS_Reloading" },
            { 25, "eHGS_FiberWirePrimedAndReady" },
            { 26, "eHGS_OperatingDoorVRHandPush" },
            { 27, "eHGS_MvAgility" },
            { 28, "eHGS_MvCover" },
            { 29, "eHGS_MvDragging" },
            { 30, "eHGS_MvDrainPipe" },
            { 31, "eHGS_MvLedgeWalk" },
            { 32, "eHGS_MvLedgeHang" },
            { 33, "eHGS_MvLocomotion" },
            { 34, "eHGS_MvCloseCombat" },
            { 35, "eHGS_MvSurrendering" },
            { 36, "eHGS_MvFriskComplying" },
            { 37, "eHGS_MvShowItem" },
            { 38, "eHGS_MvThrow" },
            { 39, "eHGS_MvFiberWireKill" },
            { 40, "eHGS_MvAlign" },
            { 41, "eHGS_MvTakedown" },
            { 42, "eHGS_MvSubAction" },
            { 43, "eHGS_MvNewFullBody" },
            { 44, "eHGS_MvDisguiseSafeZone" },
            { 45, "eHGS_MvPlaceItem" },
            { 46, "eHGS_NUM" }
        };

        (*enum_map)["EMarkerInclusionMode"] = std::map<uint32_t, std::string>{
            { 0, "MIM_DEFAULT" },
            { 1, "MIM_IF_FORCE_INCLUDED_ONLY" }
        };

        (*enum_map)["ZHM5ItemInteractionEventConsumer.EHM5SoundItemInteractionEvent"] = std::map<uint32_t, std::string>{
            { 0, "EIIE_ItemImpactBack" },
            { 1, "EIIE_ItemImpactFront" },
            { 2, "EIIE_ImpactLow" },
            { 3, "EIIE_ItemPullOut" },
            { 4, "EIIE_ItemOnDeadlyThrow" },
            { 5, "EIIE_ItemSlitThroat" },
            { 6, "EIIE_ItemSoundGeneric01" },
            { 7, "EIIE_ItemSoundGeneric02" },
            { 8, "EIIE_ItemSoundGeneric03" }
        };

        (*enum_map)["ETargetType"] = std::map<uint32_t, std::string>{
            { 0, "eTDS_None" },
            { 1, "eTDS_LookAtTarget" },
            { 2, "eTDS_Spatial" },
            { 3, "eTDS_Linked" }
        };

        (*enum_map)["ETessellationFactorMode"] = std::map<uint32_t, std::string>{
            { 0, "TESSELLATIONFACTORMODE_FIXED" },
            { 1, "TESSELLATIONFACTORMODE_OBJECT" },
            { 2, "TESSELLATIONFACTORMODE_TRIANGLE" }
        };

        (*enum_map)["ZHM5GenericEventConsumer.EEvent"] = std::map<uint32_t, std::string>{
            { 0, "eGeneric00" },
            { 1, "eGeneric01" },
            { 2, "eGeneric02" },
            { 3, "eGeneric03" },
            { 4, "eGeneric04" },
            { 5, "eGeneric05" },
            { 6, "eGeneric06" },
            { 7, "eGeneric07" }
        };

        (*enum_map)["EActorBumpType"] = std::map<uint32_t, std::string>{
            { 0, "EABT_NONE" },
            { 1, "EABT_UPPERBODY" },
            { 2, "EABT_HEAD" }
        };

        (*enum_map)["ETimerEntityCommandType"] = std::map<uint32_t, std::string>{
            { 0, "ETECT_Add" },
            { 1, "ETECT_Remove" },
            { 2, "ETECT_Reset" }
        };

        (*enum_map)["ZValueInt_Comparator_Poll.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "EQUAL" },
            { 1, "NOT_EQUAL" },
            { 2, "LESS" },
            { 3, "LESS_OR_EQUAL" },
            { 4, "HIGHER" },
            { 5, "HIGHER_OR_EQUAL" }
        };

        (*enum_map)["EHM5SoundFootstepStance"] = std::map<uint32_t, std::string>{
            { 0, "EFSS_SNEAK" },
            { 1, "EFSS_SNEAKRUN" },
            { 2, "EFSS_WALKSLOWLY" },
            { 3, "EFSS_WALK" },
            { 4, "EFSS_RUN" },
            { 5, "EFSS_ANY" }
        };

        (*enum_map)["EGestureCategory"] = std::map<uint32_t, std::string>{
            { 0, "EGC_None" },
            { 1, "EGC_AmbientDialog" },
            { 2, "EGC_TrespassWarn1" },
            { 3, "EGC_TrespassWarn2" },
            { 4, "EGC_TrespassWarn3" },
            { 5, "EGC_StopWarn" }
        };

        (*enum_map)["eWeaponOperation"] = std::map<uint32_t, std::string>{
            { 0, "WO_SEMI_AUTO" },
            { 1, "WO_FULL_AUTO" }
        };

        (*enum_map)["ERayDetailLevel"] = std::map<uint32_t, std::string>{
            { 0, "RAYDETAILS_NONE" },
            { 1, "RAYDETAILS_BONES" },
            { 2, "RAYDETAILS_MESH" }
        };

        (*enum_map)["EVictimMovementType"] = std::map<uint32_t, std::string>{
            { 4, "eVictimMovementRecoveryFinisher" },
            { -1, "eVictimMovementNone" },
            { 0, "eVictimMovementPullVictimFromWindow" },
            { 1, "eVictimMovementThrowBodyOverRail" },
            { 2, "eVictimMovementDumpBodyOverLedge" },
            { 3, "eVictimMovementTakeDown" },
            { 5, "eVictimMovementGrabVictim" },
            { 6, "eVictimMovementPushVictimThroughWindowAndRail" },
            { 7, "eVictimMovementContextKill" },
            { 8, "eVictimMovementKickVictimOverLedge" },
            { 9, "eVictimMovementCoupDeGrace" },
            { 10, "eVictimMovementCloseCombat" },
            { 11, "eVictimMovementLast" }
        };

        (*enum_map)["ZHM5WeaponBasicConfigEntity.EWeaponBasicConfigAudioImpactType"] = std::map<uint32_t, std::string>{
            { 0, "eWBC_AudioImpactType_Normal" },
            { 1, "eWBC_AudioImpactType_Sweetener" }
        };

        (*enum_map)["ECameraShakerChannel"] = std::map<uint32_t, std::string>{
            { 0, "eCameraShakerChannel_Default" },
            { 1, "eCameraShakerChannle_Locomotion" },
            { 2, "eCameraShakerChannel_Ambient" },
            { 3, "eCameraShakerChannel_Weapon" },
            { 4, "eCameraShakerChannel_CloseCombat" },
            { 5, "eCameraShakerChannel_Num" }
        };

        (*enum_map)["CrowdUtil.ECrowdActorMood"] = std::map<uint32_t, std::string>{
            { 0, "CM_AMBIENT" },
            { 1, "CM_ALERTED" },
            { 2, "CM_SCARED" },
            { 3, "CM_PANICED" },
            { 4, "CM_DEAD" },
            { 5, "CM_DISABLED" },
            { 6, "NUM_ACTOR_MOOD_TYPES" }
        };

        (*enum_map)["EItemLocation"] = std::map<uint32_t, std::string>{
            { 0, "eIL_Anywhere" },
            { 1, "eIL_Inventory" },
            { 2, "eIL_RightHand" },
            { 3, "eIL_LeftHand" },
            { 4, "eIL_FreeBone" },
            { 5, "eIL_Count" }
        };

        (*enum_map)["ESituationType"] = std::map<uint32_t, std::string>{
            { 0, "AIST_Any" },
            { 1, "AIST_DetectedInPrivate" },
            { 2, "AIST_HandleDistraction" },
            { 3, "AIST_Spectator" },
            { 4, "AIST_InvestigateWeapon" },
            { 5, "AIST_GuardBody" },
            { 6, "AIST_Entourage" },
            { 7, "AIST_HandleTrespassing" },
            { 8, "AIST_DeadBody" },
            { 9, "AIST_InvestigateCautious" },
            { 10, "AIST_Sentry" },
            { 11, "AIST_HandleDisguise" },
            { 12, "AIST_SC_Curious" },
            { 13, "AIST_SC_Alerted" },
            { 14, "AIST_SC_Combat" },
            { 15, "AIST_SniperCombat" },
            { 16, "AIST_Arrest" },
            { 17, "AIST_StandOff" },
            { 18, "AIST_RecoverUnconscious" },
            { 19, "AIST_AvoidExplosion" },
            { 20, "AIST_Evacuate" },
            { 21, "AIST_ProtoCombat" },
            { 22, "AIST_DangerousArea" },
            { 23, "AIST_CloseCombat" },
            { 24, "AIST_Infected" },
            { 25, "ESituationType_Count" }
        };

        (*enum_map)["ZContextKillGuide.EContextKillType"] = std::map<uint32_t, std::string>{
            { 0, "eCKT_TOILET_DROWN" },
            { 1, "eCKT_SNAP_AND_TOSS" },
            { 2, "eCKT_PUSH" },
            { 3, "eCKT_NO_ANIMATION" },
            { 4, "eCKT_END" }
        };

        (*enum_map)["MenuWeaponUpgradeData.EUpgradeAction"] = std::map<uint32_t, std::string>{
            { 0, "EUPGRADE_ACTION_NONE" },
            { 1, "EUPGRADE_ACTION_INSTALL" },
            { 2, "EUPGRADE_ACTION_REMOVE" },
            { 3, "EUPGRADE_ACTION_UNLOCK_SLOT" },
            { 4, "EUPGRADE_ACTION_BUY_NEXT_LEVEL" },
            { 5, "EUPGRADE_ACTION_EQUIP_WEAPON" },
            { 6, "EUPGRADE_ACTION_UNEQUIP_WEAPON" },
            { 7, "EUPGRADE_ACTION_CLEAR_LEVELS" }
        };

        (*enum_map)["ZUIPerformanceTestMetricsCollectorEntity.EVsyncPolicy"] = std::map<uint32_t, std::string>{
            { -1, "None" },
            { 0, "ForceOff" },
            { 1, "Force60" },
            { 2, "Force30" }
        };

        (*enum_map)["EBoolStateRequirement"] = std::map<uint32_t, std::string>{
            { 0, "eBSR_Any" },
            { 1, "eBSR_RequireTrue" },
            { 2, "eBSR_RequireFalse" }
        };

        (*enum_map)["EIntelType"] = std::map<uint32_t, std::string>{
            { 0, "eIT_DATA" },
            { 1, "eIT_OPPORTUNITY" },
            { 2, "eIT_BACKGROUND" },
            { 3, "eIT_HANDLER" },
            { 4, "eIT_UNDEFINED" }
        };

        (*enum_map)["EMultiplayerLobbyRequestType"] = std::map<uint32_t, std::string>{
            { 0, "LOBBY_REQUEST_VOID" },
            { 1, "LOBBY_REQUEST_IDLE" },
            { 2, "LOBBY_REQUEST_CREATE" },
            { 3, "LOBBY_REQUEST_CREATE_LOCALHOST" },
            { 4, "LOBBY_REQUEST_JOIN" }
        };

        (*enum_map)["ERayLayer"] = std::map<uint32_t, std::string>{
            { 8, "eRayLayer_BLOODSPLATDECAL_COLI" },
            { 0, "eRayLayer_COLLIDE_WITH_ALL" },
            { 1, "eRayLayer_CAMERA_COLI" },
            { 2, "eRayLayer_CAMERA_COLI_CAMERA_OBSTACE_ONLY" },
            { 3, "eRayLayer_HERO_FIRE" },
            { 4, "eRayLayer_ACTOR_FIRE" },
            { 5, "eRayLayer_ACTOR_LINE_OF_FIRE" },
            { 7, "eRayLayer_FOOTSTEPS_COLI" },
            { 9, "eRayLayer_COLLIDE_WITH_STATIC" },
            { 10, "eRayLayer_COLLIDE_WITH_STATIC_EXCL_TRANSPARENT" },
            { 11, "eRayLayer_PARTICLES" },
            { 12, "eRayLayer_COVERSEARCH" },
            { 13, "eRayLayer_ACTOR_VISIBILITY" },
            { 14, "eRayLayer_ACTOR_VISIBILITY_AMBIENT" },
            { 16, "eRayLayer_PICKUP" },
            { 17, "eRayLayer_HERO_PROXY" },
            { 19, "eRayLayer_COLLIDE_WITH_STATIC_AND_SLOPE" },
            { 20, "eRayLayer_COLLIDE_WITH_STATIC_AND_SLOPE_EXCL_TRANSPARENT" },
            { 22, "eRayLayer_HERO_PROXY_NO_VOLUMES" },
            { 23, "eRayLayer_PHYSICS_MANIPULATOR" },
            { 24, "eRayLayer_UNUSED_LAST" }
        };

        (*enum_map)["EExclusionLayer"] = std::map<uint32_t, std::string>{
            { 0, "EL_NONE" },
            { 1, "EL_STORY" },
            { 2, "EL_AMBIENT" }
        };

        (*enum_map)["ZHeroEscortSituationEntity.EEscortState"] = std::map<uint32_t, std::string>{
            { 0, "EES_Idle" },
            { 1, "EES_Evaluate" },
            { 2, "EES_Escorting" },
            { 3, "EES_Intermediate" },
            { 4, "EES_OutOfRange" }
        };

        (*enum_map)["EConversationRole"] = std::map<uint32_t, std::string>{
            { 0, "eCR_Leader" },
            { 1, "eCR_Assistant" }
        };

        (*enum_map)["AudioEventCullingBehavior"] = std::map<uint32_t, std::string>{
            { 0, "AutoSendStop" },
            { 1, "AutoSendStopAfterTriggered" },
            { 2, "NoAutoSendStop" },
            { 3, "NoDistanceCulling" }
        };

        (*enum_map)["Network.PacketPriority"] = std::map<uint32_t, std::string>{
            { 0, "IMMEDIATE_PRIORITY" },
            { 1, "HIGH_PRIORITY" },
            { 2, "MEDIUM_PRIORITY" },
            { 3, "LOW_PRIORITY" },
            { 4, "NUMBER_OF_PRIORITIES" }
        };

        (*enum_map)["EReplicaMode"] = std::map<uint32_t, std::string>{
            { 0, "E_RM_STATIC_OBJECT" },
            { 1, "E_RM_DYNAMIC" }
        };

        (*enum_map)["ZValueInt_Comparator.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "EQUAL" },
            { 1, "NOT_EQUAL" },
            { 2, "LESS" },
            { 3, "LESS_OR_EQUAL" },
            { 4, "HIGHER" },
            { 5, "HIGHER_OR_EQUAL" }
        };

        (*enum_map)["ZSpatialEntity.ERoomBehaviour"] = std::map<uint32_t, std::string>{
            { 0, "ROOM_STATIC" },
            { 1, "ROOM_DYNAMIC" },
            { 2, "ROOM_STATIC_OUTSIDE_CLIENT" }
        };

        (*enum_map)["ZOnlineManager.EError"] = std::map<uint32_t, std::string>{
            { 1001, "eNETWORK_UNKNOWN" },
            { 0, "eNONE" },
            { 1000, "eGENERAL" },
            { 1002, "eNETWORK_SEND_FAILED" },
            { 1003, "eAPI_VERSION" },
            { 1004, "eAUTHENTICATION_UNAUTHORIZED" },
            { 1005, "eAUTHENTICATION_PROXY" },
            { 1024, "eGENERAL_SERVER_ERROR" },
            { 1006, "eAUTHENTICATION_SERVER_ERROR" },
            { 1007, "eAUTHENTICATION_USER_GONE" },
            { 1030, "eCANCELLED" },
            { 1008, "eAUTHENTICATION_STEAM_GENERAL" },
            { 1009, "eAUTHENTICATION_EPIC_GENERAL" },
            { 1010, "eAUTHENTICATION_IZUMO_GENERAL" },
            { 1027, "eDYNAMIC_RESOURCES_CONFIG_ERROR" },
            { 1011, "eAUTHENTICATION_PSN_GENERAL" },
            { 1012, "eAUTHENTICATION_PSN_NP_CHECK" },
            { 1013, "eAUTHENTICATION_PSN_ACCOUNT_COLLISION" },
            { 1014, "eAUTHENTICATION_NO_PRIMARY_USER" },
            { 1015, "eAUTHENTICATION_XBLIVE_GENERAL" },
            { 1016, "eAUTHENTICATION_XBLIVE_SIGNED_OUT" },
            { 1017, "eAUTHENTICATION_XBLIVE_USER_CHANGED" },
            { 1028, "eDYNAMIC_RESOURCES_UPDATEFAILED" },
            { 1018, "eAUTHENTICATION_STADIA_GENERAL" },
            { 1019, "ePLATFORM_USERINFO" },
            { 1020, "eCONFIGURATION" },
            { 1021, "eENTITLEMENTS" },
            { 1022, "ePROFILE" },
            { 1023, "eGAME_SESSION" },
            { 1025, "eGENERAL_SERVER_BUSY" },
            { 1026, "eGENERAL_CLIENT_ERROR" },
            { 1029, "eDYNAMIC_RESOURCES_OUTDATED" },
            { 1031, "eERROR_MAX" }
        };

        (*enum_map)["EDetachUsage"] = std::map<uint32_t, std::string>{
            { 0, "EDU_NEVER" },
            { 1, "EDU_ALWAYS" },
            { 2, "EDU_RAGDOLL_ONLY" }
        };

        (*enum_map)["ZActorPicker.EKeywordEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" }
        };

        (*enum_map)["EDestructibleInteractionType"] = std::map<uint32_t, std::string>{
            { 0, "eDIT_SHOT" },
            { 1, "eDIT_EXPLOSION" },
            { 2, "eDIT_COLLISION" },
            { 3, "eDIT_FRACTURE_AND_DETACH_ALL" },
            { 4, "eDIT_OUT_OF_WORLD" },
            { 5, "eDIT_COUNT" }
        };

        (*enum_map)["EGameEventType"] = std::map<uint32_t, std::string>{
            { 0, "GET_GameplayStart" },
            { 1, "GET_GameplayStop" },
            { 2, "GET_IntroCutStart" },
            { 3, "GET_IntroCutEnd" },
            { 4, "GET_ProfilingStart" },
            { 5, "GET_SavegameRestored" },
            { 6, "GET_PlayingAfterLoad" },
            { 7, "GET_COUNT" }
        };

        (*enum_map)["EPhysicsObjectType"] = std::map<uint32_t, std::string>{
            { 0, "EPHYSICSOBJECTTYPE_UNKNOWN" },
            { 1, "EPHYSICSOBJECTTYPE_DYNAMIC" },
            { 2, "EPHYSICSOBJECTTYPE_KINEMATIC" },
            { 3, "EPHYSICSOBJECTTYPE_STATIC" }
        };

        (*enum_map)["eParticleEmitterMeshEntity_SpawnModes"] = std::map<uint32_t, std::string>{
            { 0, "MESH_SPAWNMODE_VERTEX" },
            { 1, "MESH_SPAWNMODE_EDGE" },
            { 2, "MESH_SPAWNMODE_FACE" }
        };

        (*enum_map)["eWeaponType"] = std::map<uint32_t, std::string>{
            { 0, "WT_HANDGUN" },
            { 1, "WT_SLOWGUN" },
            { 2, "WT_ASSAULTRIFLE" },
            { 3, "WT_SMG" },
            { 4, "WT_SNIPER" },
            { 5, "WT_RPG" },
            { 6, "WT_KNIFE" },
            { 7, "WT_SHOTGUN" },
            { 8, "WT_SPOTTER" }
        };

        (*enum_map)["ERatingTitle"] = std::map<uint32_t, std::string>{
            { 0, "ERatingTitle_SilentAssassin" },
            { 1, "ERatingTitle_PerfectAssassin" },
            { 2, "ERatingTitle_Ninja" },
            { 3, "ERatingTitle_GloryBlazer" },
            { 4, "ERatingTitle_Eraser" },
            { 5, "ERatingTitle_Exhibitionist" },
            { 6, "ERatingTitle_Trickster" },
            { 7, "ERatingTitle_Chameleon" },
            { 8, "ERatingTitle_Spider" },
            { 9, "ERatingTitle_Angel" },
            { 10, "ERatingTitle_COUNT" }
        };

        (*enum_map)["ECameraControls"] = std::map<uint32_t, std::string>{
            { 0, "eCameraControlsNormal" },
            { 1, "eCameraControlsOTS" }
        };

        (*enum_map)["ECollidableShape"] = std::map<uint32_t, std::string>{
            { 0, "ECOLLIDABLESHAPE_SPHERE" },
            { 1, "ECOLLIDABLESHAPE_CAPSULE" },
            { 2, "ECOLLIDABLESHAPE_BOX" }
        };

        (*enum_map)["EHM5SoundRicochetType"] = std::map<uint32_t, std::string>{
            { 0, "ESRT_VARIATION1" },
            { 1, "ESRT_VARIATION2" }
        };

        (*enum_map)["ZUISplashHintDataProviderEntity.ESplashHintType"] = std::map<uint32_t, std::string>{
            { 0, "SHT_GlobalHint" },
            { 1, "SHT_TutorialHint" },
            { 2, "SHT_ControlHint" }
        };

        (*enum_map)["ZHM5GameTimeMultiplierEntity.eTMLDReason"] = std::map<uint32_t, std::string>{
            { 0, "eTMLDR_HintMessages" },
            { 1, "eTMLDR_Sequence" },
            { 2, "eTMLDR_ActionKillHeadShot" },
            { 3, "eTMLDR_ActionKillCCProp" },
            { 4, "eTMLDR_ActionKillExplosion" },
            { 5, "eTMLDR_ActionKillLastEnemyInEncounter" },
            { 6, "eTMLDR_ActionKillLastEnemyInCheckPoint" },
            { 7, "eTMLDR_NOTSET" }
        };

        (*enum_map)["ZInteractionEventConsumer.EEvent"] = std::map<uint32_t, std::string>{
            { 0, "eActivate" },
            { 1, "eRH_Place" },
            { 2, "eRH_Retrieve" },
            { 3, "eRH_Swap" },
            { 4, "eRH_Show" },
            { 5, "eRH_Hide" },
            { 6, "eLH_Place" },
            { 7, "eLH_Retrieve" },
            { 8, "eLH_Swap" },
            { 9, "eLH_Show" },
            { 10, "eLH_Hide" },
            { 11, "eObjectEvent01" },
            { 12, "eObjectEvent02" },
            { 13, "eObjectEvent03" },
            { 14, "eObjectEvent04" },
            { 15, "eSoundEvent01" },
            { 16, "eSoundEvent02" },
            { 17, "eSoundEvent03" },
            { 18, "eSoundEvent04" }
        };

        (*enum_map)["ZHM5IndicatorManager.EIndicatorType"] = std::map<uint32_t, std::string>{
            { 0, "eActorAmbient" },
            { 1, "eActorAlertedLow" },
            { 2, "eActorAlertedHigh" },
            { 3, "eActorArrest" },
            { 4, "eActorCombat" },
            { 5, "eExplosion" },
            { 6, "eObjective" },
            { 7, "ePointOfInterest" },
            { 8, "eContractExit" },
            { 9, "eEasterActor" }
        };

        (*enum_map)["BoneId.Enum"] = std::map<uint32_t, std::string>{
            { 0, "GROUND" },
            { 1, "PELVIS" },
            { 2, "SPINE" },
            { 3, "SPINE_1" },
            { 4, "SPINE_2" },
            { 5, "NECK" },
            { 6, "NECK1" },
            { 7, "HEAD" },
            { 8, "LEFT_THIGH" },
            { 9, "LEFT_THIGH_TWIST" },
            { 10, "LEFT_THIGH_TWIST1" },
            { 11, "LEFT_THIGH_TWIST2" },
            { 12, "LEFT_CALF" },
            { 13, "LEFT_FOOT" },
            { 14, "LEFT_TOE" },
            { 15, "LEFT_TOENUB" },
            { 16, "RIGHT_THIGH" },
            { 17, "RIGHT_THIGH_TWIST" },
            { 18, "RIGHT_THIGH_TWIST1" },
            { 19, "RIGHT_THIGH_TWIST2" },
            { 20, "RIGHT_CALF" },
            { 21, "RIGHT_FOOT" },
            { 22, "RIGHT_TOE" },
            { 23, "RIGHT_TOENUB" },
            { 24, "LEFT_CLAVICLE" },
            { 25, "LEFT_UPPER_ARM" },
            { 26, "LEFT_UPPER_ARM_TWIST" },
            { 27, "LEFT_UPPER_ARM_TWIST1" },
            { 28, "LEFT_UPPER_ARM_TWIST2" },
            { 29, "LEFT_FOREARM" },
            { 30, "LEFT_FORETWIST" },
            { 31, "LEFT_FORETWIST1" },
            { 32, "LEFT_FORETWIST2" },
            { 33, "LEFT_HAND" },
            { 34, "LEFT_FINGER_0" },
            { 35, "LEFT_FINGER_01" },
            { 36, "LEFT_FINGER_02" },
            { 37, "LEFT_FINGER_1" },
            { 38, "LEFT_FINGER_11" },
            { 39, "LEFT_FINGER_12" },
            { 40, "LEFT_FINGER_2" },
            { 41, "LEFT_FINGER_21" },
            { 42, "LEFT_FINGER_22" },
            { 43, "LEFT_FINGER_3" },
            { 44, "LEFT_FINGER_31" },
            { 45, "LEFT_FINGER_32" },
            { 46, "LEFT_FINGER_4" },
            { 47, "LEFT_FINGER_41" },
            { 48, "LEFT_FINGER_42" },
            { 49, "RIGHT_CLAVICLE" },
            { 50, "RIGHT_UPPER_ARM" },
            { 51, "RIGHT_UPPER_ARM_TWIST" },
            { 52, "RIGHT_UPPER_ARM_TWIST1" },
            { 53, "RIGHT_UPPER_ARM_TWIST2" },
            { 54, "RIGHT_FOREARM" },
            { 55, "RIGHT_FORETWIST" },
            { 56, "RIGHT_FORETWIST1" },
            { 57, "RIGHT_FORETWIST2" },
            { 58, "RIGHT_HAND" },
            { 59, "RIGHT_FINGER_0" },
            { 60, "RIGHT_FINGER_01" },
            { 61, "RIGHT_FINGER_02" },
            { 62, "RIGHT_FINGER_1" },
            { 63, "RIGHT_FINGER_11" },
            { 64, "RIGHT_FINGER_12" },
            { 65, "RIGHT_FINGER_2" },
            { 66, "RIGHT_FINGER_21" },
            { 67, "RIGHT_FINGER_22" },
            { 68, "RIGHT_FINGER_3" },
            { 69, "RIGHT_FINGER_31" },
            { 70, "RIGHT_FINGER_32" },
            { 71, "RIGHT_FINGER_4" },
            { 72, "RIGHT_FINGER_41" },
            { 73, "RIGHT_FINGER_42" },
            { 74, "XTRA_MUS_R_HIP" },
            { 75, "XTRA_MUS_L_HIP" },
            { 76, "RIGHT_HAND_ATTACHER" },
            { 77, "LEFT_HAND_ATTACHER" },
            { 78, "HIP_ATTACHER" },
            { 79, "BACK_ATTACHER" },
            { 80, "FREE_ATTACHER" },
            { 81, "CAMERA_ATTACHER_01" },
            { 82, "CAMERA_ATTACHER_02" },
            { 83, "FREE_ATTACHER_PROP_01" },
            { 84, "FREE_ATTACHER_PROP_02" },
            { 85, "LEFT_EYE" },
            { 86, "LEFT_EYE_LID" },
            { 87, "RIGHT_EYE" },
            { 88, "RIGHT_EYE_LID" },
            { 89, "LOWER_LIP" },
            { 90, "JAW" },
            { 91, "HOLSTER_ATTACHER" },
            { 92, "LEFT_WRIST_EFFECTOR" },
            { 93, "LEFT_FINGER_0_EFFECTOR" },
            { 94, "LEFT_FINGER_1_EFFECTOR" },
            { 95, "LEFT_FINGER_2_EFFECTOR" },
            { 96, "LEFT_FINGER_3_EFFECTOR" },
            { 97, "LEFT_FINGER_4_EFFECTOR" },
            { 98, "RIGHT_WRIST_EFFECTOR" },
            { 99, "RIGHT_FINGER_0_EFFECTOR" },
            { 100, "RIGHT_FINGER_1_EFFECTOR" },
            { 101, "RIGHT_FINGER_2_EFFECTOR" },
            { 102, "RIGHT_FINGER_3_EFFECTOR" },
            { 103, "RIGHT_FINGER_4_EFFECTOR" },
            { 104, "XTRA_MUS_L_PEC" },
            { 105, "XTRA_MUS_R_PEC" },
            { 106, "XTRA_MUS_NECK" },
            { 107, "XTRA_MUS_L_ELBOW" },
            { 108, "XTRA_MUS_R_ELBOW" },
            { 109, "XTRA_MUS_L_ASS" },
            { 110, "XTRA_MUS_R_ASS" },
            { 111, "XTRA_MUS_L_TOE" },
            { 112, "XTRA_MUS_L_KNEE" },
            { 113, "XTRA_MUS_L_FOOT" },
            { 114, "XTRA_MUS_R_TOE" },
            { 115, "XTRA_MUS_R_KNEE" },
            { 116, "XTRA_MUS_R_FOOT" },
            { 117, "XTRA_TARGET_R_FOOT" },
            { 118, "XTRA_PIVOT_R_HEEL" },
            { 119, "XTRA_TARGET_R_KNEE" },
            { 120, "XTRA_ALIGN_R_KNEE" },
            { 121, "XTRA_TARGET_L_FOOT" },
            { 122, "XTRA_PIVOT_L_HEEL" },
            { 123, "XTRA_TARGET_L_KNEE" },
            { 124, "XTRA_ALIGN_L_KNEE" },
            { 125, "XTRA_TARGET_R_ASS" },
            { 126, "XTRA_TARGET_L_ASS" },
            { 127, "XTRA_ALIGN_L_ASS" },
            { 128, "XTRA_ALIGN_R_ASS" },
            { 129, "XTRA_UP_THIGH" },
            { 130, "XTRA_TARGET_R_PEC" },
            { 131, "XTRA_ALIGN_R_ELBOW" },
            { 132, "XTRA_TARGET_R_ELBOW" },
            { 133, "XTRA_TARGET_L_PEC" },
            { 134, "XTRA_ALIGN_L_ELBOW" },
            { 135, "XTRA_TARGET_L_ELBOW" },
            { 136, "XTRA_ALIGN_L_PEC" },
            { 137, "XTRA_UP_PEC" },
            { 138, "XTRA_ALIGN_R_PEC" },
            { 139, "XTRA_ALIGN_NECK" },
            { 140, "HEAD_ATTACHER" },
            { 141, "RIFLE_HOLSTER_ATTACHER" },
            { 142, "SPINE1_ATTACHER" },
            { 143, "PISTOL_HOLSTER_ATTACHER" },
            { 144, "BONEID_LAST" }
        };

        (*enum_map)["ZVsTargetPicker.ETargetSelectionType"] = std::map<uint32_t, std::string>{
            { 0, "eTST_Random" },
            { 1, "eTST_Fair" },
            { 2, "eTST_Max" }
        };

        (*enum_map)["ZAvoidDangerousAreaGroup.EAvoidDangerousAreaGroupState"] = std::map<uint32_t, std::string>{
            { 0, "IGS_SelectDestination" },
            { 1, "IGS_Move" },
            { 2, "IGS_Jump" },
            { 3, "IGS_Wait" },
            { 4, "IGS_Completed" },
            { 5, "IGS_Max" }
        };

        (*enum_map)["EActorLookAtTargetType"] = std::map<uint32_t, std::string>{
            { 0, "eALAT_Invalid" },
            { 1, "eALAT_PositionTarget" },
            { 2, "eALAT_KnownEntityType" },
            { 3, "eALAT_PointOfInterest" },
            { 4, "eALAT_Hero" },
            { 5, "eALAT_Screenplay" },
            { 6, "eALAPT_Max" }
        };

        (*enum_map)["ECustomSoundDefType"] = std::map<uint32_t, std::string>{
            { 0, "eCSDT_Distraction_InvestigationAck" },
            { 1, "eCSDT_Distraction_InvestigationInvestigate" },
            { 2, "eCSDT_Distraction_InvestigationStnd" }
        };

        (*enum_map)["EWeaponSpecialSituation"] = std::map<uint32_t, std::string>{
            { 0, "WSS_NORMAL" },
            { 1, "WSS_BAREHANDS" },
            { 2, "WSS_EXPLOSION" },
            { 3, "WSS_ACCIDENT" },
            { 4, "WSS_NPC_FRIENDLY_FIRE" },
            { 5, "WSS_EXECUTE_PISTOL" },
            { 6, "WSS_ANY_WEAPON" },
            { 7, "WSS_INVISIBLE" }
        };

        (*enum_map)["EAIModifierScope"] = std::map<uint32_t, std::string>{
            { 0, "AIMS_Volume" },
            { 1, "AIMS_Behavior" },
            { 2, "AIMS_Role" },
            { 3, "AIMS_Item" },
            { 4, "AIMS_Situation" },
            { 5, "AIMS_Outfit" },
            { 6, "AIMS_Override" },
            { 7, "AIMS_Status" }
        };

        (*enum_map)["ZHM5WeaponEventConsumer.EAnimWeapon"] = std::map<uint32_t, std::string>{
            { 0, "eHM5Weapon_HideClip" },
            { 1, "eHM5Weapon_ShowClip" },
            { 2, "eHM5Weapon_SpawnPhysicsClip" },
            { 3, "eHM5Weapon_EjectCartridge" }
        };

        (*enum_map)["EStashpointContainedEntityType"] = std::map<uint32_t, std::string>{
            { 0, "PICKUP_NONE" },
            { 1, "PICKUP_ITEMS" },
            { 2, "PICKUP_OUTFIT" },
            { 3, "PICKUP_PICKEDUP" }
        };

        (*enum_map)["ESoundCollisionType"] = std::map<uint32_t, std::string>{
            { 0, "Impact" },
            { 1, "Rolling" },
            { 2, "Sliding" }
        };

        (*enum_map)["ICloset.EClosetType"] = std::map<uint32_t, std::string>{
            { 0, "eTypeClosetNormal" },
            { 1, "eTypeClosetCake" },
            { 2, "eTypeClosetDumpster" },
            { 3, "eTypeClosetLast" }
        };

        (*enum_map)["EHitmanPermissionFlag"] = std::map<uint32_t, std::string>{
            { 0, "eHPFlag_InventorySelect" },
            { 1, "eHPFlag_CanHolsterItem" },
            { 2, "eHPFlag_CanDropItem" },
            { 3, "eHPFlag_CanDualWield" },
            { 4, "eHPFlag_CameraControl" },
            { 5, "eHPFlag_MovementControl" },
            { 6, "eHPFlag_AimControl" },
            { 7, "eHPFlag_CanOpenNotebook" },
            { 8, "eHPFlag_CanOpenPauseMenu" },
            { 9, "eHPFlag_PermissionsNUM" }
        };

        (*enum_map)["EActionRadialArcIconType"] = std::map<uint32_t, std::string>{
            { 0, "EARAIT_NoIcon" },
            { 1, "EARAIT_Locked" },
            { 2, "EARAIT_NeedTool" },
            { 3, "EARAIT_IsRunning" },
            { 4, "EARAIT_Crowbar" },
            { 5, "EARAIT_Wrench" },
            { 6, "EARAIT_Card" },
            { 7, "EARAIT_Lockpick" },
            { 8, "EARAIT_Screwdriver" },
            { 9, "EARAIT_AmmoBullet" },
            { 10, "EARAIT_Flower" },
            { 11, "EARAIT_ChemicalTube" },
            { 12, "EARAIT_Golfball" },
            { 13, "EARAIT_Keypad" },
            { 14, "EARAIT_Key" },
            { 15, "EARAIT_Coin" },
            { 16, "EARAIT_Poison" },
            { 17, "EARAIT_Exsplosive" }
        };

        (*enum_map)["EParticleDecalSpawnEntity_Constraints"] = std::map<uint32_t, std::string>{
            { 0, "FACTOR_AND_RANDOMIZE" },
            { 1, "SIZE_RANGE" }
        };

        (*enum_map)["ZActBehaviorEntity.ERotationAlignment"] = std::map<uint32_t, std::string>{
            { 0, "RA_NONE" },
            { 1, "RA_LOOSE" },
            { 2, "RA_EXACT" }
        };

        (*enum_map)["ZPatrolBehaviorEntity.ERotationAlignment"] = std::map<uint32_t, std::string>{
            { 0, "RA_NONE" },
            { 1, "RA_LOOSE" },
            { 2, "RA_EXACT" }
        };

        (*enum_map)["EAnimBlendMode"] = std::map<uint32_t, std::string>{
            { 0, "EAnimBlendMode_InterpAttInterpPos" },
            { 1, "EAnimBlendMode_InterpAttAddPos" },
            { 2, "EAnimBlendMode_AddAttLeavePos" },
            { 3, "EAnimBlendMode_AddAttAddPos" }
        };

        (*enum_map)["ETeamModeId"] = std::map<uint32_t, std::string>{
            { 0, "TeamMode_Coop" },
            { 1, "TeamMode_Versus" }
        };

        (*enum_map)["ZUIControlEntity.EScaleMode"] = std::map<uint32_t, std::string>{
            { 0, "Manual" },
            { 1, "ResolutionScale" },
            { 2, "ResolutionScaleAspect" },
            { 3, "ResolutionScaleAspectFill" }
        };

        (*enum_map)["ZInputListenerActorPool.eInputListenerButtons"] = std::map<uint32_t, std::string>{
            { 0, "EILB_UP" },
            { 1, "EILB_LEFT" },
            { 2, "EILB_DOWN" },
            { 3, "EILB_RIGHT" }
        };

        (*enum_map)["ERuntimeMemoryAllocationState"] = std::map<uint32_t, std::string>{
            { 0, "eRMAS_NeverAllocated" },
            { 1, "eRMAS_Allocated" },
            { 2, "eRMAS_Released" }
        };

        (*enum_map)["CrowdRegionType"] = std::map<uint32_t, std::string>{
            { 0, "CROWDSPHERE_NONE" },
            { 1, "CROWDSPHERE_SAFE" },
            { 2, "CROWDSPHERE_POI" },
            { 3, "CROWDSPHERE_AVOID" },
            { 4, "CROWDSPHERE_RELOCATE" },
            { 5, "CROWDSPHERE_STOP" },
            { 6, "CROWDSPHERE_ALERT" },
            { 7, "CROWDSPHERE_SCARE" },
            { 8, "CROWDSPHERE_GETDOWN" },
            { 9, "CROWDSPHERE_DIE" }
        };

        (*enum_map)["EDramaEventAction"] = std::map<uint32_t, std::string>{
            { 0, "eDEA_NONE" },
            { 8, "eDEA_DONT_STOP_SPEAK" },
            { 16, "eDEA_RESET_CASTING" },
            { 32, "eDEA_RESET_STATE" },
            { 1, "eDEA_TERMINATE_DRAMA" },
            { 2, "eDEA_DONE_DRAMA" },
            { 4, "eDEA_STOP_BEHAVIOR" }
        };

        (*enum_map)["ZRecoverUnconsciousGroup.EInvestigateGroupState"] = std::map<uint32_t, std::string>{
            { 0, "IGS_InitialState" },
            { 1, "IGS_WaitingForVictim" },
            { 2, "IGS_Recovering" },
            { 3, "IGS_Relocating" },
            { 4, "IGS_Reporting" },
            { 5, "IGS_Completed" },
            { 6, "IGS_Max" }
        };

        (*enum_map)["ECharacterActionRequests"] = std::map<uint32_t, std::string>{
            { 0, "eSM_AR_None" },
            { 1, "eSM_AR_ReloadR" },
            { 2, "eSM_AR_ReloadL" },
            { 3, "eSM_AR_ShootR" },
            { 4, "eSM_AR_ShootL" },
            { 5, "eSM_AR_SwapHands" },
            { 6, "eSM_AR_HolsterR" },
            { 7, "eSM_AR_HolsterL" },
            { 8, "eSM_AR_UnholsterR" },
            { 9, "eSM_AR_UnholsterL" },
            { 10, "eSM_AR_PickupItemR" },
            { 11, "eSM_AR_PickupItemL" },
            { 12, "eSM_AR_InteractionR" },
            { 13, "eSM_AR_InteractionL" },
            { 14, "eSM_AR_InteractionSwipe" },
            { 15, "eSM_AR_InteractionSwipeR" },
            { 16, "eSM_AR_InteractionSwipeL" },
            { 17, "eSM_AR_OpenDoor" },
            { 18, "eSM_AR_OpenDoorR" },
            { 19, "eSM_AR_OpenDoorL" },
            { 20, "eSM_AR_CloseCombat" },
            { 21, "eSM_AR_Movement" },
            { 22, "eSM_AR_Pretend" },
            { 23, "eSM_AR_Sniping" },
            { 24, "eSM_AR_EndSniping" },
            { 25, "eSM_AR_RetrieveFromSuitcase" },
            { 26, "eSM_AR_Marking" },
            { 27, "eSM_AR_ChangeAmmo" },
            { 28, "eSM_AR_Assemble" },
            { 29, "eSM_AR_Assemble_UnequippedContainer" },
            { 30, "eSM_AR_Disassemble" },
            { 31, "eSM_AR_Disassemble_PickingUp" },
            { 32, "eSM_AR_AssembleUB" },
            { 33, "eSM_AR_DisassembleUB" },
            { 34, "eSM_AR_Cancel" },
            { 35, "eSM_AR_Sprint" },
            { 36, "eSM_AR_CloseHandR" },
            { 37, "eSM_AR_CloseHandL" }
        };

        (*enum_map)["ZHM5HIKEventConsumer.EBlend"] = std::map<uint32_t, std::string>{
            { 0, "eBlendIn" },
            { 1, "eBlendOut" },
            { 2, "eInstantOn" },
            { 3, "eInstantOff" }
        };

        (*enum_map)["EWeaponUpgradeIcon"] = std::map<uint32_t, std::string>{
            { 0, "WEAPON_UPGRADE_ICON_NONE" },
            { 1, "WEAPON_UPGRADE_ICON_SILENCER" },
            { 2, "WEAPON_UPGRADE_ICON_RED_DOT_SIGHT" },
            { 3, "WEAPON_UPGRADE_ICON_AMMUNITION" },
            { 4, "WEAPON_UPGRADE_ICON_MAGAZINE" },
            { 5, "WEAPON_UPGRADE_ICON_EXTCLIP" },
            { 6, "WEAPON_UPGRADE_ICON_SHELLS" },
            { 7, "WEAPON_UPGRADE_ICON_SLIDE" },
            { 8, "WEAPON_UPGRADE_ICON_BOLT" },
            { 9, "WEAPON_UPGRADE_ICON_BARREL" },
            { 10, "WEAPON_UPGRADE_ICON_HAMMER" },
            { 11, "WEAPON_UPGRADE_ICON_CHUTE" },
            { 12, "WEAPON_UPGRADE_ICON_DUALWIELD" },
            { 13, "WEAPON_UPGRADE_ICON_MAGNUM" },
            { 14, "WEAPON_UPGRADE_ICON_STOCK" }
        };

        (*enum_map)["ECollisionResponse"] = std::map<uint32_t, std::string>{
            { 0, "REFLECT_VELOCITY" },
            { 1, "SLIDE_ON" },
            { 2, "STAY_AT_COLLISION_POINT" },
            { 3, "CUSTOM" }
        };

        (*enum_map)["ZDramaSituationEntity.EReentryBehavior"] = std::map<uint32_t, std::string>{
            { 0, "RB_CONTINUE" },
            { 1, "RB_TERMINATE" },
            { 2, "RB_RESTART" },
            { 3, "RB_RECASTANDRESTART" },
            { 4, "RB_RECASTANDCONTINUE" }
        };

        (*enum_map)["IScatterContainerEntity.EResizeMode"] = std::map<uint32_t, std::string>{
            { 0, "MODE_CLEAR" },
            { 1, "MODE_KEEPASCENTER" },
            { 2, "MODE_SCALE" }
        };

        (*enum_map)["ZBoneWeightRotationEntity.eRotationAxises"] = std::map<uint32_t, std::string>{
            { 0, "AXIS_X" },
            { 1, "AXIS_Y" },
            { 2, "AXIS_Z" }
        };

        (*enum_map)["EGameTension"] = std::map<uint32_t, std::string>{
            { 0, "EGT_Undefined" },
            { 1, "EGT_Ambient" },
            { 2, "EGT_Agitated" },
            { 3, "EGT_Searching" },
            { 4, "EGT_AlertedLow" },
            { 5, "EGT_AlertedHigh" },
            { 6, "EGT_Hunting" },
            { 7, "EGT_Arrest" },
            { 8, "EGT_Combat" }
        };

        (*enum_map)["ERegionMask"] = std::map<uint32_t, std::string>{
            { 1, "eRM_None" },
            { 2, "eRM_LowCover" },
            { 4, "eRM_HighCover" },
            { 128, "eRM_User_3" },
            { 64, "eRM_User_2" },
            { 32, "eRM_User_1" },
            { 16, "eRM_Separator" },
            { 4096, "eRM_User_8" },
            { 8, "eRM_Stairs" },
            { 256, "eRM_User_4" },
            { 512, "eRM_User_5" },
            { 1024, "eRM_User_6" },
            { 2048, "eRM_User_7" }
        };

        (*enum_map)["ECharacterAnimEvent"] = std::map<uint32_t, std::string>{
            { 699, "eCAE_ReloadStarted" },
            { 700, "eCAE_ReloadedClip" },
            { 9051, "eCAE_OpenDoorActivate" },
            { 701, "eCAE_ReloadCompleted" },
            { 703, "eCAE_ReloadSwapRHandAttacher" },
            { 9040, "eCAE_SwapHandsRtoL" },
            { 711, "eCAE_ReloadedOneBullet" },
            { 702, "eCAE_ReloadUpdate" },
            { 712, "eCAE_ChangeAmmoCompleted" },
            { 704, "eCAE_ReloadResetRHandSwap" },
            { 9071, "eCAE_AssembleAttach" },
            { 9010, "eCAE_UnholsterAttachL" },
            { 9074, "eCAE_AssembleContainerAttach" },
            { 9011, "eCAE_UnholsterCompletedL" },
            { 9075, "eCAE_AssembleEarlyOut" },
            { 9012, "eCAE_UnholsterAttachR" },
            { 9013, "eCAE_UnholsterCompletedR" },
            { 9020, "eCAE_HolsterDetachL" },
            { 9021, "eCAE_HolsterCompletedL" },
            { 9022, "eCAE_HolsterDetachR" },
            { 9023, "eCAE_HolsterCompletedR" },
            { 9030, "eCAE_SwipeActivate" },
            { 9031, "eCAE_SwipeCompleted" },
            { 10003, "eCAE_HandIKDisableRight" },
            { 5001, "eCAE_InteractionActivate" },
            { 5000, "eCAE_InteractionCompleted" },
            { 9041, "eCAE_SwapHandsRtoLCompleted" },
            { 9042, "eCAE_SwapHandsLtoR" },
            { 9043, "eCAE_SwapHandsLtoRCompleted" },
            { 9050, "eCAE_OpenDoorCompleted" },
            { 9060, "eCAE_FlavorIdleCompleted" },
            { 9070, "eCAE_AssemblePlaceAlignCompleted" },
            { 10002, "eCAE_HandIKEnableRight" },
            { 9073, "eCAE_AssembleToSneak" },
            { 9072, "eCAE_AssembleCompleted" },
            { 10000, "eCAE_HandIKEnableLeft" },
            { 10001, "eCAE_HandIKDisableLeft" },
            { 50, "eCAE_EarlyExit" }
        };

        (*enum_map)["EMatchOverCondition"] = std::map<uint32_t, std::string>{
            { 0, "CompletedNormally" },
            { 1, "OpponentsDisconnected" },
            { 2, "OpponentsAbandoned" }
        };

        (*enum_map)["CrowdUtil.ECrowdStandingPush"] = std::map<uint32_t, std::string>{
            { 0, "PUSH_FRONT" },
            { 1, "PUSH_FRONT_LEFT" },
            { 2, "PUSH_LEFT" },
            { 3, "PUSH_BACK_LEFT" },
            { 4, "PUSH_BACK" },
            { 5, "PUSH_BACK_RIGHT" },
            { 6, "PUSH_RIGHT" },
            { 7, "PUSH_FRONT_RIGHT" }
        };

        (*enum_map)["EDialogueLine"] = std::map<uint32_t, std::string>{
            { 0, "Hello" },
            { 1, "MoveAlong" },
            { 2, "WhatsGoingOn" },
            { 3, "DropWeapon01" },
            { 4, "DropWeapon02" },
            { 5, "DropWeapon03" },
            { 6, "DropWeapon04" },
            { 7, "DropWeaponSecondWarning" },
            { 8, "Comply01" },
            { 9, "Comply02" },
            { 10, "YouAskedForIt" },
            { 11, "DropWeapon_Single01" },
            { 12, "DropWeapon_Double01" },
            { 13, "DropWeapon_Multiple01" },
            { 14, "DropWeapon_Comply_Single01" },
            { 15, "DropWeapon_Comply_Double01" },
            { 16, "DropWeapon_Comply_Multiple01" },
            { 17, "DropWeapon_RunAway01" },
            { 18, "DropWeapon_RunAway_Comply01" },
            { 19, "DropWeapon_Escalate_Single01" },
            { 20, "DropWeapon_Escalate_Double01" },
            { 21, "DropWeapon_Escalate_Multiple01" }
        };

        (*enum_map)["EPostProcessorComponentType"] = std::map<uint32_t, std::string>{
            { 1, "MRP_LOOKAT" },
            { 2, "MRP_AIM" },
            { 16, "MRP_LEDGEFEETLOCK" },
            { 32, "MRP_LEDGEHANG" },
            { 2048, "MRP_BLINDFIRE" },
            { 1024, "MRP_IMPACT" }
        };

        (*enum_map)["WebSocketUtils.ECloseStatus"] = std::map<uint32_t, std::string>{
            { 1000, "eCS_NORMAL" },
            { 1001, "eCS_GOINGAWAY" },
            { 1002, "eCS_PROTOCOLERROR" },
            { 1003, "eCS_INVALIDDATA" },
            { 1004, "eCS_1004" },
            { 1005, "eCS_NOSTATUSRCVD" },
            { 1006, "eCS_ABNORMALCLOSURE" },
            { 1007, "eCS_INVALIDPAYLOAD" },
            { 1008, "eCS_POLICYVIOLATION" },
            { 1009, "eCS_MSGTOOBIG" },
            { 1010, "eCS_MANDATORYEXT" },
            { 1011, "eCS_INTERNALSRVERR" },
            { 1015, "eCS_TLSHANDSHAKE" }
        };

        (*enum_map)["EControlButtonName"] = std::map<uint32_t, std::string>{
            { 0, "eCN_ABORT" },
            { 1, "eCN_ACTION" },
            { 2, "eCN_ACTIVATE_PROP" },
            { 3, "eCN_AGILITY_DOWN" },
            { 4, "eCN_AGILITY_ENTERWINDOW" },
            { 5, "eCN_AGILITY_SNEAKPASTWINDOW" },
            { 6, "eCN_AGILITY_THROWOVERRAIL" },
            { 7, "eCN_AGILITY_UP" },
            { 8, "eCN_AIM" },
            { 9, "eCN_COVER_ENTER" },
            { 10, "eCN_COVER_TAKEDOWN" },
            { 11, "eCN_COVER_TO_COVER" },
            { 12, "eCN_CROUCH" },
            { 13, "eCN_DRAGBODY" },
            { 14, "eCN_DUMPBODY" },
            { 15, "eCN_FIBERWIRE" },
            { 16, "eCN_INSTINCT" },
            { 17, "eCN_INVENTORY_HOLSTER" },
            { 18, "eCN_INVENTORY_LONGRANGE" },
            { 19, "eCN_MARK_TARGET" },
            { 20, "eCN_CHANGE_AMMO_NEXT" },
            { 21, "eCN_CHANGE_AMMO_PREVIOUS" },
            { 22, "eCN_INVENTORY_PROP" },
            { 23, "eCN_INVENTORY_SHORTRANGE" },
            { 24, "eCN_ITEM_DROP" },
            { 25, "eCN_ITEM_THROW" },
            { 26, "eCN_MELEE_HIT" },
            { 27, "eCN_MELEE_TAKEDOWN" },
            { 28, "eCN_PICKUP" },
            { 29, "eCN_RUN" },
            { 30, "eCN_WALK_SLOW" },
            { 31, "eCN_CONCEAL_RETRIEVE" },
            { 32, "eCN_SB_ACTIVATE" },
            { 33, "eCN_SB_CANCEL" },
            { 34, "eCN_SB_EXECUTE" },
            { 35, "eCN_SB_REMOVETAG" },
            { 36, "eCN_SHOOT" },
            { 37, "eCN_NOTEBOOK" },
            { 38, "eCN_PAUSE" },
            { 39, "eCN_NO_ICON" }
        };

        (*enum_map)["ZInvestigateDisguiseGroup.EState"] = std::map<uint32_t, std::string>{
            { 0, "eInit" },
            { 1, "eGuardBanter" },
            { 2, "eAcknowledge" },
            { 3, "eMain" },
            { 4, "eSearch" },
            { 5, "eMoveback" },
            { 6, "eStandDown" },
            { 7, "eEscalate" },
            { 8, "eDone" }
        };

        (*enum_map)["ECOMUsage"] = std::map<uint32_t, std::string>{
            { 0, "ECOMUSAGE_AUTOCOMPUTE" },
            { 1, "ECOMUSAGE_PIVOT" }
        };

        (*enum_map)["EAIEventType"] = std::map<uint32_t, std::string>{
            { 0, "AIET_None" },
            { 1, "AIET_Ignore" },
            { 2, "AIET_PreventAutoPurge" },
            { 3, "AIET_ShootTarget" },
            { 4, "AIET_Hunting" },
            { 5, "AIET_Order_Target" },
            { 6, "AIET_END_BOOLEAN_EVENTS" },
            { 7, "AIET_LookedAt" },
            { 8, "AIET_Killer" },
            { 9, "AIET_Strangler" },
            { 10, "AIET_Suspicious" },
            { 11, "AIET_KnownBody" },
            { 12, "AIET_KnownBodyIsFoundOutsideNavmeshAndIgnored" },
            { 13, "AIET_KnownBodyIsHandled" },
            { 14, "AIET_KnownBodybag" },
            { 15, "AIET_KnownBodybagIsHandled" },
            { 16, "AIET_Dead" },
            { 17, "AIET_DisguiseSuspicious" },
            { 18, "AIET_DamagingMe" },
            { 19, "AIET_KnownInCloset" },
            { 20, "AIET_KnownInNpcUnreachableArea" },
            { 21, "AIET_Sense" },
            { 22, "AIET_HasBeenInCombat" },
            { 23, "AIET_ReportedByCamera" },
            { 24, "AIET_SOUNDEVENTS_LOW_LOUDNESS_BEGIN" },
            { 25, "AIET_SoundFootsteps" },
            { 26, "AIET_SoundThrownItemCollision" },
            { 27, "AIET_SoundGunSilenced" },
            { 28, "AIET_SoundHitmanGunSilenced" },
            { 29, "AIET_SoundLegalGunSilenced" },
            { 30, "AIET_SoundLegalHitmanGunSilenced" },
            { 31, "AIET_SoundEmptyGun" },
            { 32, "AIET_SoundCCBreakNeck" },
            { 33, "AIET_SoundCCChoke" },
            { 34, "AIET_SoundCCFiberwire" },
            { 35, "AIET_SoundBulletImpact" },
            { 36, "AIET_SoundLegalBulletImpact" },
            { 37, "AIET_SoundSpeakWarning" },
            { 38, "AIET_SoundSpeakAngry" },
            { 39, "AIET_SOUNDEVENTS_NORMAL_LOUDNESS_BEGIN" },
            { 40, "AIET_SoundRadio" },
            { 41, "AIET_SoundAlarm" },
            { 42, "AIET_SoundSpeakPainBehind" },
            { 43, "AIET_SoundCloseCombat" },
            { 44, "AIET_SoundSpeakPain" },
            { 45, "AIET_SoundSetpiece" },
            { 46, "AIET_SOUNDEVENTS_LOUD_LOUDNESS_BEGIN" },
            { 47, "AIET_SoundSpeakHelp" },
            { 48, "AIET_SoundSpeakHelpLoud" },
            { 49, "AIET_SoundGunShot" },
            { 50, "AIET_SoundHitmanGunShot" },
            { 51, "AIET_SoundLegalGunShot" },
            { 52, "AIET_SoundLegalHitmanGunShot" },
            { 53, "AIET_SoundExplosion" },
            { 54, "AIET_SoundAccident" },
            { 55, "AIET_SoundCurious" },
            { 56, "AIET_SoundCuriousItem" },
            { 57, "AIET_SoundInteresting" },
            { 58, "AIET_SoundCrowdCurious" },
            { 59, "AIET_SoundCrowdAlerted" },
            { 60, "AIET_SoundCrowdWantsArrest" },
            { 61, "AIET_SoundCrowdWantsArrestKiller" },
            { 62, "AIET_SOUNDEVENTS_END" },
            { 63, "AIET_SightReaction" },
            { 64, "AIET_SightInvestigation" },
            { 65, "AIET_PerceptibleEntityAware" },
            { 66, "AIET_InSight" },
            { 67, "AIET_SlowMovementInVegetationInSight" },
            { 68, "AIET_MediumMovementInVegetationInSight" },
            { 69, "AIET_FastMovementInVegetationInSight" },
            { 70, "AIET_VisualSetpiece" },
            { 71, "AIET_DirectSetpiece" },
            { 72, "AIET_Sick" },
            { 73, "AIET_MyFlashGrenadeExploded" },
            { 74, "AIET_StunnedByFlashGrenade" },
            { 75, "AIET_WasSlapped" },
            { 76, "AIET_Attention_Stage_1" },
            { 77, "AIET_Attention_Stage_2" },
            { 78, "AIET_AttentionFading" },
            { 79, "AIET_FullAttention" },
            { 80, "AIET_FullDisguiseAttention" },
            { 81, "AIET_ReactedTo" },
            { 82, "AIET_ReactTarget" },
            { 83, "AIET_ReactSuppressed" },
            { 84, "AIET_StanddownHolster" },
            { 85, "AIET_ForcedIllegal" },
            { 86, "AIET_HitByItem" },
            { 87, "AIET_HitByCoin" },
            { 88, "AIET_LTHitByItemOrCoin" },
            { 89, "AIET_HitByItemOrCoinTwice" },
            { 90, "AIET_HitByThis" },
            { 91, "AIET_SeenInAccident" },
            { 92, "AIET_Trespassing_Strike_1" },
            { 93, "AIET_Trespassing_Strike_2" },
            { 94, "AIET_Trespassing_Strike_3" },
            { 95, "AIET_DistractedByMovementInVegetation_Once" },
            { 96, "AIET_DistractedByMovementInVegetation_Twice" },
            { 97, "AIET_Investigate_Strike_1" },
            { 98, "AIET_Investigate_Strike_2" },
            { 99, "AIET_DisguiseEnforcer" },
            { 100, "AIET_Suspect" },
            { 101, "AIET_InSentryZone" },
            { 102, "AIET_MySentryZone" },
            { 103, "AIET_TriggerAlarm" },
            { 104, "AIET_LockdownIntruder" },
            { 105, "AIET_AccuseUnconscious" },
            { 106, "AIET_HasKnockMeDown" },
            { 107, "AIET_HasKnockSomeoneDown" },
            { 108, "AIET_InMyPrivateArea" },
            { 109, "AIET_KnownNaked" },
            { 110, "AIET_KnownDraggingBodybag" },
            { 111, "AIET_InvestigateOrder" },
            { 112, "AIET_ReactedSurprised" },
            { 113, "AIET_ReportGotShot" },
            { 114, "AIET_HasReportedDeadBodySituation" },
            { 115, "AIET_Social_TooClose" },
            { 116, "AIET_Social_Privacy" },
            { 117, "AIET_Social_Silly" },
            { 118, "AIET_ReactedToSituation" },
            { 119, "AIET_SeeAttached" },
            { 120, "AIET_WasInvisible" },
            { 121, "AIET_BlameHitman" },
            { 122, "AIET_BlamedByUnconscious" },
            { 123, "AIET_DontCareAboutBlaming" },
            { 124, "AIET_Combat_PropagatedBy" },
            { 125, "AIET_Combat_WithinPropagationField" },
            { 126, "AIET_Combat_MarkedAsDiscardable" },
            { 127, "AIET_Combat_AttackWitness" },
            { 128, "AIET_Combat_HomingAttackOrigin" },
            { 129, "AIET_Combat_VIPWasAttackedFromPosition" },
            { 130, "AIET_ReactedToSniperKnowledge" },
            { 131, "AIET_SniperCombatTarget" },
            { 132, "AIET_SniperCombatAimTarget" },
            { 133, "AIET_CantReachTarget" },
            { 134, "AIET_HuntingSniper" },
            { 135, "AIET_NeedCover" },
            { 136, "AIET_WaitingForSniper" },
            { 137, "AIET_HeardSniperShooting" },
            { 138, "AIET_KnownHidden" },
            { 139, "AIET_SituationTarget" },
            { 140, "AIET_TalkingToHitman" },
            { 141, "AIET_SuspiciousAction" },
            { 142, "AIET_RadioCallHelpingActor" },
            { 143, "AIET_WeaponContextKnown" },
            { 144, "AIET_IdleStandDown" },
            { 145, "AIET_IgnoreInvestigation" },
            { 146, "AIET_NewDisguiseTarget" },
            { 147, "AIET_SocialTarget" },
            { 148, "AIET_SecurityCamBroken" },
            { 149, "AIET_HeWoundedMeLongDistance" },
            { 150, "AIET_HeWoundedMeShortDistance" },
            { 151, "AIET_HeWoundedMeCC" },
            { 152, "AIET_HeAimedAtMe" },
            { 153, "AIET_BumpedIntoMe" },
            { 154, "AIET_ReactToDistraction" },
            { 155, "AIET_MovingToTarget" },
            { 156, "AIET_ReachedTarget" },
            { 157, "AIET_DistractionChainPart" },
            { 158, "AIET_NewDistractionChainPart" },
            { 159, "AIET_ChainFixed" },
            { 160, "AIET_SurprisePlayed" },
            { 161, "AIET_NewDistraction" },
            { 162, "AIET_WasSilly" },
            { 163, "AIET_Distraction_My_Leader" },
            { 164, "AIET_Distraction_My_Assistant" },
            { 165, "AIET_Distraction_Was_My_Assistant" },
            { 166, "AIET_AssitingWithSuitcase" },
            { 167, "AIET_SuitcaseAssistanceFaceToFace" },
            { 168, "AIET_SuitcaseAssistanceRadio" },
            { 169, "AIET_SC_CombatPosition" },
            { 170, "AIET_SC_CombatPositionMove" },
            { 171, "AIET_SC_CombatPositionFight" },
            { 172, "AIET_SC_PreventMovingThere" },
            { 173, "AIET_SC_JumpyReaction" },
            { 174, "AIET_DISTRACTION_TYPES_START" },
            { 175, "AIET_SeeInCoverDistraction" },
            { 176, "AIET_SeeSneakingDistraction" },
            { 177, "AIET_SeeStunnedDistraction" },
            { 178, "AIET_SeeSickDistraction" },
            { 179, "AIET_LegalItemDroppedDistraction" },
            { 180, "AIET_IllegalItemDroppedDistraction" },
            { 181, "AIET_BumpedDistraction" },
            { 182, "AIET_SightReactionDistraction" },
            { 183, "AIET_SightInvestigationDistraction" },
            { 184, "AIET_HearItemImpactDistraction" },
            { 185, "AIET_SeeCuriousPerceptibleDistraction" },
            { 186, "AIET_SeeCuriousItemDistraction" },
            { 187, "AIET_SeeFlyingItemDistraction" },
            { 188, "AIET_SeeThrowingDistraction" },
            { 189, "AIET_HitBySomethingDistraction" },
            { 190, "AIET_HearFootstepsDistraction" },
            { 191, "AIET_SeeAgility" },
            { 192, "AIET_SeeAgility_Vault" },
            { 193, "AIET_SeeAgility_Window" },
            { 194, "AIET_SeeHidding" },
            { 195, "AIET_HearStrangeSound" },
            { 196, "AIET_HearAlarm" },
            { 197, "AIET_HearRadio" },
            { 198, "AIET_HearAngry" },
            { 199, "AIET_HearHelp" },
            { 200, "AIET_HearAccident" },
            { 201, "AIET_HearCuriousCrowd" },
            { 202, "AIET_HearBulletImpact" },
            { 203, "AIET_HearPain" },
            { 204, "AIET_HearCuriousSound" },
            { 205, "AIET_HearCuriousItemSound" },
            { 206, "AIET_SecurityCameraBroken" },
            { 207, "AIET_SetpieceDistractionDefault" },
            { 208, "AIET_SeeItemTossDistraction" },
            { 209, "AIET_SetpieceDistractionDoor" },
            { 210, "AIET_SetpieceDistractionExperimental1" },
            { 211, "AIET_SetpieceDistractionExperimental2" },
            { 212, "AIET_SeeSuitcaseDistraction" },
            { 213, "AIET_Distraction_Silly" },
            { 214, "AIET_Distraction_TooClose" },
            { 215, "AIET_Distraction_Privacy" },
            { 216, "AIET_Distraction_MovementInVegetationBrief" },
            { 217, "AIET_Distraction_MovementInVegetationCurious" },
            { 218, "AIET_DISTRACTION_TYPES_END" },
            { 219, "AIET_ARREST_REASONS_START" },
            { 220, "AIET_ArrestReason_IllegalItem" },
            { 221, "AIET_ArrestReason_DragBody" },
            { 222, "AIET_ArrestReason_KnockDown" },
            { 223, "AIET_ARREST_REASONS_END" },
            { 224, "AIET_END_NORMAL_EVENTS" },
            { 225, "AIET_DEBUG_EVENTS_START" },
            { 226, "AIET_Debug_ThrowFlashbangHere" },
            { 227, "AIET_DEBUG_EVENTS_END" }
        };

        (*enum_map)["EHM5SoundCloseCombatEvent"] = std::map<uint32_t, std::string>{
            { 0, "ECCE_PUNCH_FACE" },
            { 1, "ECCE_PUNCH_BODY" },
            { 2, "ECCE_ATTACK_ELBOW" },
            { 3, "ECCE_ATTACK_KNEE" },
            { 4, "ECCE_ATTACK_KICK" },
            { 5, "ECCE_SWOOSH_SHORT" },
            { 6, "ECCE_SWOOSH_LONG" },
            { 7, "ECCE_CLOTH_SWOOSH" },
            { 8, "ECCE_CLOTH_RUSTLE" },
            { 9, "ECCE_CLOTH_STRETCH" },
            { 10, "ECCE_GRAB" },
            { 11, "ECCE_BONE_BREAK" },
            { 12, "ECCE_NECK_SNAP" },
            { 13, "ECCE_BODY_FALL" },
            { 14, "ECCE_SKULL_CRACK" },
            { 15, "ECCE_ANY" }
        };

        (*enum_map)["EVirtualPlatformID"] = std::map<uint32_t, std::string>{
            { 769, "XBONE_X" },
            { 0, "DEFAULT" },
            { 513, "PS4_PRO" },
            { 255, "__SUB" },
            { 256, "PC" },
            { 512, "PS4" },
            { 257, "PC_ENHANCED" },
            { 768, "XBONE" },
            { 1024, "STADIA" },
            { 1280, "PS5" },
            { 1536, "XBSCARLETT" },
            { 65792, "VR_PC" },
            { 1537, "XBSCARLETT_ANACONDA" },
            { 65536, "VR" },
            { 66048, "VR_PS4" },
            { 66049, "VR_PS4_PRO" },
            { 66816, "VR_PS5" },
            { 65280, "__BASE" },
            { 16711680, "__SYSTEM" }
        };

        (*enum_map)["eAmmoType"] = std::map<uint32_t, std::string>{
            { 0, "eAmmoGun" },
            { 1, "eAmmoRevolver" },
            { 2, "eAmmoSMG" },
            { 3, "eAmmoRifle" },
            { 4, "eAmmoShotgun" },
            { 5, "eAmmoSniper" },
            { 6, "eAmmoMG" },
            { 7, "eAmmoRPG" },
            { 8, "eAmmoFake" },
            { 9, "eAmmoHarmless" },
            { 10, "eAmmoLightPistol" },
            { 11, "eAmmoDartTranquilizer" },
            { 12, "eAmmoShotgunBeanbag" },
            { 13, "eUnknownAmmoType" }
        };

        (*enum_map)["ZEntityPropertyReplica.EReplicationStrategy"] = std::map<uint32_t, std::string>{
            { 0, "REP_ALL_PROPERTIES" },
            { 1, "REP_ALL_EXCEPT" },
            { 2, "REP_ONLY_SPECIFIC" }
        };

        (*enum_map)["ZApproachOrder.EApproachStyle"] = std::map<uint32_t, std::string>{
            { 0, "AS_AUTO" },
            { 1, "AS_SPRINT" },
            { 2, "AS_JOG" },
            { 3, "AS_WALK" }
        };

        (*enum_map)["ZInvestigateCautiousSituation.EBystanderState"] = std::map<uint32_t, std::string>{
            { 0, "BS_SelectCandidate" },
            { 1, "BS_SelectPoint" },
            { 2, "BS_SearchDangerField" }
        };

        (*enum_map)["ZSmuggleSituationEntity.ESmuggleState"] = std::map<uint32_t, std::string>{
            { 0, "ESS_Idle" },
            { 1, "ESS_Evaluate" },
            { 2, "ESS_FindJob" },
            { 3, "ESS_OnRouteToLocation" },
            { 4, "ESS_PickingUp" },
            { 5, "ESS_PuttingDown" },
            { 6, "ESS_OnABreak" }
        };

        (*enum_map)["ZSniperCombatSituation.ESituationState"] = std::map<uint32_t, std::string>{
            { 0, "SS_Main" },
            { 1, "SS_StandDown" },
            { 2, "SS_InvalidSituation" }
        };

        (*enum_map)["EOnlineEventInvestigationType"] = std::map<uint32_t, std::string>{
            { 0, "OEIT_Generic" },
            { 1, "OEIT_HearBulletImpact" },
            { 2, "OEIT_HearFootsteps" },
            { 3, "OEIT_CarAlarm" },
            { 4, "OEIT_HearBark" },
            { 5, "OEIT_HearPain" },
            { 6, "OEIT_HearRadio" },
            { 7, "OEIT_HearItemToss" },
            { 8, "OEIT_SeeItemToss" },
            { 9, "OEIT_HearAccident" },
            { 10, "OEIT_CuriousSound" },
            { 11, "OEIT_CuriousItemSound" },
            { 12, "OEIT_SeeWeapon" },
            { 13, "OEIT_SeeItem" },
            { 14, "OEIT_Perceptible" },
            { 15, "OEIT_Toss" },
            { 16, "OEIT_CrowdCurious" },
            { 17, "OEIT_CameraDefect" }
        };

        (*enum_map)["IItemWeapon.EDeadlyThrowType"] = std::map<uint32_t, std::string>{
            { 0, "DEADLYTHROW_NONE" },
            { 1, "DEADLYTHROW_LIGHT" },
            { 2, "DEADLYTHROW_HEAVY" }
        };

        (*enum_map)["EValueUpdateStrategy"] = std::map<uint32_t, std::string>{
            { 0, "UPDATE_STRATEGY_REPLACE" },
            { 1, "UPDATE_STRATEGY_ADD_TO" },
            { 2, "UPDATE_STRATEGY_MULTIPLY" }
        };

        (*enum_map)["ZEscortSituationEntity.ETargetState"] = std::map<uint32_t, std::string>{
            { 0, "ETS_Unknown" },
            { 1, "ETS_NoTarget" },
            { 2, "ETS_RunningActBehavior" },
            { 3, "ETS_RunningDummyBehavior" },
            { 4, "ETS_RunningOtherBehavior" },
            { 5, "ETS_Dead" },
            { 6, "ETS_TargetIsHitman" }
        };

        (*enum_map)["IRenderCompositorEntity.EViewportAnchor"] = std::map<uint32_t, std::string>{
            { 0, "eFill" },
            { 1, "eTopLeft" },
            { 2, "eTopRight" },
            { 3, "eBottomLeft" },
            { 4, "eBottomRight" }
        };

        (*enum_map)["ECoverPosition"] = std::map<uint32_t, std::string>{
            { 0, "COVER_POSITION_NONE" },
            { 1, "COVER_POSITION_LEFT" },
            { 2, "COVER_POSITION_RIGHT" },
            { 3, "COVER_POSITION_MIDDLE" }
        };

        (*enum_map)["EAgilityState"] = std::map<uint32_t, std::string>{
            { 0, "eAgState_JumpToHangFromLocomotion" },
            { 1, "eAgState_ClimbOnToLedgeFromLocomotion" },
            { 2, "eAgState_ClimbToHangFromLocomotion" },
            { 3, "eAgState_WalkOnFromLocomotion" },
            { 4, "eAgState_WalkOffToLocomoton" },
            { 5, "eAgState_PullUpToLedgeWalk" },
            { 6, "eAgState_PullUpToLocomotion" },
            { 7, "eAgState_LedgeJumpOffToLocomotion" },
            { 8, "eAgState_VaultOverLedgeFromCover" },
            { 9, "eAgState_ClimbOnToLedgeFromCover" },
            { 10, "eAgState_LedgeHangDefault" },
            { 11, "eAgState_LedgeWalkDefault" },
            { 12, "eAgState_TransLedgeHangDownToWalk" },
            { 13, "eAgState_TransLedgeHangUpToWalk" },
            { 14, "eAgState_TransLedgeWalkDownToHang" },
            { 15, "eAgState_TransLedgeWalkUpToHang" },
            { 16, "eAgState_TransLedgeHangUpToRail" },
            { 17, "eAgState_TransLedgeHangToLocomotion" },
            { 18, "eAgState_TransLedgeWalkToLocomotion" },
            { 19, "eAgState_LedgeHangJumpLeft" },
            { 20, "eAgState_LedgeHangJumpRight" },
            { 21, "eAgState_LedgeWalkJumpLeft" },
            { 22, "eAgState_LedgeWalkJumpRight" },
            { 23, "eAgState_SneakPastWindowLeftToRight" },
            { 24, "eAgState_SneakPastWindowRightToLeft" },
            { 25, "eAgState_ClimbWindowFromLedgeToLocomotion" },
            { 26, "eAgState_ClimbWindowFromLocomotionToLedge" },
            { 27, "eAgState_ClimbWindowFromLocomotionToLocomotion" },
            { 28, "eAgState_ClimbWindowFromCoverToLocomotion" },
            { 29, "eAgState_ClimbWindowFromCoverToLedge" },
            { 30, "eAgState_ClimbOnToLedgeFromDrainPipe" },
            { 31, "eAgState_ClimbToHangFromDrainPipe" },
            { 32, "eAgState_ClimbToWalkFromDrainPipeLeft" },
            { 33, "eAgState_ClimbToWalkFromDrainPipeRight" },
            { 34, "eAgState_Deactivate" },
            { 35, "eAgState_Unknown" }
        };

        (*enum_map)["SUITestData.ETestEnum"] = std::map<uint32_t, std::string>{
            { 1, "ETestEnum_Value_One" },
            { 2, "ETestEnum_Value_Two" },
            { 3, "ETestEnum_Value_Three" }
        };

        (*enum_map)["EVRConfigCinemaMode"] = std::map<uint32_t, std::string>{
            { 0, "EVRCCM_CinemaModeEnabled60FPS" },
            { 1, "EVRCCM_CinemaModeEnabled" },
            { 2, "EVRCCM_CinemaModeDisabled" },
            { 3, "EVRCCM_KeepCurrent" }
        };

        (*enum_map)["EOutfitType"] = std::map<uint32_t, std::string>{
            { 0, "eOT_None" },
            { 1, "eOT_Suit" },
            { 2, "eOT_Guard" },
            { 3, "eOT_Worker" },
            { 4, "eOT_Waiter" },
            { 5, "eOT_LucasGrey" }
        };

        (*enum_map)["ZActorTensionEntity.ETensionCheckMode"] = std::map<uint32_t, std::string>{
            { 0, "ETCM_INSIDE_VOLUME_OR_LIST" },
            { 1, "ETCM_INSIDE_VOLUME_AND_LIST" }
        };

        (*enum_map)["EUbitusRequest"] = std::map<uint32_t, std::string>{
            { 128, "EUR_FRIEND_LIST" },
            { 64, "EUR_ACCOUNT_AUTHORIZATION_CODE" },
            { 0, "EUR_DEVICE_LANGUAGE" },
            { 192, "EUR_FREE_COMMUNICATION_AVAILABLE" },
            { 112, "EUR_NICKNAME" },
            { 48, "EUR_NETWORK_SERVICE_ACCOUNT_ID" },
            { 176, "EUR_ESHOP_INFO" },
            { 96, "EUR_NETWORK_SERVICE_ACCOUNT_TOKEN" },
            { 160, "EUR_PROFILE_LIST" },
            { 32800, "EUR_PAUSE_GAME" },
            { 80, "EUR_ACCOUNT_AUTHORIZATION_TOKEN" },
            { 16, "EUR_DEVICE_MODE" },
            { 144, "EUR_BLOCKED_USER_LIST" },
            { 208, "EUR_DLC_PURCHASE_STATUS" },
            { 32801, "EUR_RESUME_GAME" },
            { 1226, "EUR_ESHOP_CLOSED" }
        };

        (*enum_map)["ZScreenplay.EState"] = std::map<uint32_t, std::string>{
            { 0, "State_Idle" },
            { 1, "State_Running" },
            { 2, "State_Paused" },
            { 3, "State_Failed" },
            { 4, "State_Done" }
        };

        (*enum_map)["EDifficultyParameter"] = std::map<uint32_t, std::string>{
            { 0, "EDP_Invalid" },
            { 1, "EDP_AIAttentionGainMultiplier" },
            { 2, "EDP_AIAudioPerceptionAlwaysEmitFootstepSoundEvents" },
            { 3, "EDP_AICombat_ActiveCombatants_MinimumNumber" },
            { 4, "EDP_AICombat_ActiveCombatants_MinimumNumberWhenAllVIPsAreDead" },
            { 5, "EDP_AICombat_ActiveCombatants_MaximumNumber" },
            { 6, "EDP_AICombat_ActiveCombatants_MinimumAmountForMedium" },
            { 7, "EDP_AICombat_ActiveCombatants_MinimumAmountForMany" },
            { 8, "EDP_AICombat_ShootingAccuracyResetPeriod_Minimum" },
            { 9, "EDP_AICombat_ShootingAccuracyResetPeriod_Maximum_FewCombatants" },
            { 10, "EDP_AICombat_ShootingAccuracyResetPeriod_Maximum_MediumCombatants" },
            { 11, "EDP_AICombat_ShootingAccuracyResetPeriod_Maximum_ManyCombatants" },
            { 12, "EDP_AICombat_Leaders_NumberOfActiveCombatantsNeededForOneLeader" },
            { 13, "EDP_AICombat_Leaders_NumberOfActiveCombatantsNeededForTwoLeaders" },
            { 14, "EDP_AICombat_MaximumInterestingCombatLifetime" },
            { 15, "EDP_AICombat_MaximumInterestingTimeSinceLastCombat" },
            { 16, "EDP_AICombat_ShootingAccuracyInitialBuildUp_MinimumDuration" },
            { 17, "EDP_AICombat_ShootingAccuracyInitialBuildUp_MaximumDuration" },
            { 18, "EDP_AICombat_ShootingAccuracy_MinimumDistance" },
            { 19, "EDP_AICombat_FlashGrenadeThrow_GlobalCooldown" },
            { 20, "EDP_AICombat_FlashGrenadeThrow_AggressionTriggerCooldown" },
            { 21, "EDP_AICombat_FlashGrenadeThrow_TargetCampingTriggerCooldown" },
            { 22, "EDP_AICombat_FlashGrenadeThrow_LargeRelocationTriggerCooldown" },
            { 23, "EDP_AIDisguise_FollowWarningsDelay" },
            { 24, "EDP_AIDisguise_BreakOnVeryCloseDistance" },
            { 25, "EDP_AIEscortOut_MaxForbiddenMovement" },
            { 26, "EDP_AIEscortOut_EscortEscalateDistance" },
            { 27, "EDP_AIEscortOut_MaxTimeToHonorWarning" },
            { 28, "EDP_AIEscortOut_EscortHardWarningDistance" },
            { 29, "EDP_AIIllegalActionAttentionModifier" },
            { 30, "EDP_AIInvestigateCautious_Disturbance_Radius" },
            { 31, "EDP_AIInvestigateCautious_Search_ClearDisturbanceBackRadius" },
            { 32, "EDP_AIInvestigateCautious_Search_ClearDisturbanceFrontRadius" },
            { 33, "EDP_AIInvestigateCautious_Search_ClearDisturbanceRespectSoftReservationThreshold" },
            { 34, "EDP_AIInvestigateCautiousAttentionToPersonEnabled" },
            { 35, "EDP_AIInvestigateDisguiseMembersFollowDistance" },
            { 36, "EDP_AILongTermMemory_DisableArrest" },
            { 37, "EDP_AIRunningAttentionModifier" },
            { 38, "EDP_AISentry_WarningDelay" },
            { 39, "EDP_AISuspiciousMovementDisguiseAttentionModifier" },
            { 40, "EDP_AISuspiciousMovementSensorEnabled" },
            { 41, "EDP_AISuspiciousLostTargetTime" },
            { 42, "EDP_AllowInstinctGlow" },
            { 43, "EDP_ArrestEscalateIllegalWeapon" },
            { 44, "EDP_ArrestEscalateMaximum" },
            { 45, "EDP_ArrestEscalateMoving" },
            { 46, "EDP_ArrestEscalateRunning" },
            { 47, "EDP_ArrestTargetLostTime" },
            { 48, "EDP_CloseCombatChainFailDamage" },
            { 49, "EDP_CloseCombatChoiceWindowLength" },
            { 50, "EDP_CloseCombatChokePressCount_Civilian" },
            { 51, "EDP_CloseCombatChokePressCount_Elite" },
            { 52, "EDP_CloseCombatChokePressCount_Guard" },
            { 53, "EDP_CloseCombatCounterEndLength" },
            { 54, "EDP_CloseCombatCounterFailDamage" },
            { 55, "EDP_CloseCombatShowSnapNeckPressCount_Civilian" },
            { 56, "EDP_CloseCombatShowSnapNeckPressCount_Elite" },
            { 57, "EDP_CloseCombatShowSnapNeckPressCount_Guard" },
            { 58, "EDP_DamageMultiplierHandgun" },
            { 59, "EDP_DamageMultiplierSlowgun" },
            { 60, "EDP_DamageMultiplierAssaultRifle" },
            { 61, "EDP_DamageMultiplierSMG" },
            { 62, "EDP_DamageMultiplierSniper" },
            { 63, "EDP_DamageMultiplierRPG" },
            { 64, "EDP_DamageMultiplierKnife" },
            { 65, "EDP_DamageMultiplierShotgun" },
            { 66, "EDP_DamageMultiplierSpotter" },
            { 67, "EDP_DamageMultiplierHandgun_NPC" },
            { 68, "EDP_DamageMultiplierSlowgun_NPC" },
            { 69, "EDP_DamageMultiplierAssaultRifle_NPC" },
            { 70, "EDP_DamageMultiplierSMG_NPC" },
            { 71, "EDP_DamageMultiplierSniper_NPC" },
            { 72, "EDP_DamageMultiplierRPG_NPC" },
            { 73, "EDP_DamageMultiplierKnife_NPC" },
            { 74, "EDP_DamageMultiplierShotgun_NPC" },
            { 75, "EDP_DamageMultiplierSpotter_NPC" },
            { 76, "EDP_DisguiseRuiningEnabled" },
            { 77, "EDP_GameMissionSaveLimit" },
            { 78, "EDP_GameOpportunitiesEnabled" },
            { 79, "EDP_HearRangeBulletImpact" },
            { 80, "EDP_HearRangeBulletImpactOnBody" },
            { 81, "EDP_HearRangeCloseCombatBreakNeck" },
            { 82, "EDP_HearRangeCloseCombatChoke" },
            { 83, "EDP_HearRangeCloseCombatFiberWire" },
            { 84, "EDP_HearRangeCloseCombatHitFromBehind" },
            { 85, "EDP_HearRangeCloseCombatL1" },
            { 86, "EDP_HearRangeCloseCombatL2" },
            { 87, "EDP_HearRangeCloseCombatL3" },
            { 88, "EDP_HearRangeEventAccident" },
            { 89, "EDP_HearRangeEventAlarm" },
            { 90, "EDP_HearRangeEventExplosion" },
            { 91, "EDP_HearRangeEventRadio" },
            { 92, "EDP_HearRangeEventStrange" },
            { 93, "EDP_HearRangeEventThrownItem" },
            { 94, "EDP_HearRangeFootstepWalkSlow" },
            { 95, "EDP_HearRangeFootstepWalk" },
            { 96, "EDP_HearRangeFootstepRun" },
            { 97, "EDP_HearRangeFootstepCrouchWalkSlow" },
            { 98, "EDP_HearRangeFootstepCrouchWalk" },
            { 99, "EDP_HearRangeFootstepCrouchRun" },
            { 100, "EDP_HearRangeFootstepVegetationLVAWalkSlow" },
            { 101, "EDP_HearRangeFootstepVegetationLVAWalk" },
            { 102, "EDP_HearRangeFootstepVegetationLVARun" },
            { 103, "EDP_HearRangeFootstepVegetationLVACrouchWalkSlow" },
            { 104, "EDP_HearRangeFootstepVegetationLVACrouchWalk" },
            { 105, "EDP_HearRangeFootstepVegetationLVACrouchRun" },
            { 106, "EDP_HearRangeGunEmpty" },
            { 107, "EDP_HearRangeGunShot" },
            { 108, "EDP_HearRangeGunSilenced" },
            { 109, "EDP_HearRangeGunSuperSilenced" },
            { 110, "EDP_HearRangeSpeakAngry" },
            { 111, "EDP_HearRangeSpeakHelp" },
            { 112, "EDP_HearRangeSpeakHelpLoud" },
            { 113, "EDP_HearRangeSpeakPain" },
            { 114, "EDP_HearRangeSpeakPainLow" },
            { 115, "EDP_HearRangeSpeakWarning" },
            { 116, "EDP_HitmanDamageReceivedMultiplier" },
            { 117, "EDP_InstinctModeBurnRate" },
            { 118, "EDP_InstinctRegenCap" },
            { 119, "EDP_InstinctRegenRate" },
            { 120, "EDP_ManhuntGroupMaxSearchTime" },
            { 121, "EDP_ManhuntGroupSearchAreaHackMaxDistance" },
            { 122, "EDP_ManhuntGroupSearchAreaRadius" },
            { 123, "EDP_MaxCoverShootActorCountMultiplier" },
            { 124, "EDP_MinAttentionToForceLookAt" },
            { 125, "EDP_MinAttentionToForceLookAtIfIncreasing" },
            { 126, "EDP_NPCDamageReceivedMultiplier" },
            { 127, "EDP_PlayerDamagePerSecondDistance" },
            { 128, "EDP_PlayerDamagePerSecondLimitFar" },
            { 129, "EDP_PlayerDamagePerSecondLimitNear" },
            { 130, "EDP_PlayerDamagePerSecondThreshold" },
            { 131, "EDP_PlayerHitPointsMax" },
            { 132, "EDP_PlayerHitPointsRegenerationDelay" },
            { 133, "EDP_PlayerHitPointsRegenerationPerSecond" },
            { 134, "EDP_SecurityCameras" },
            { 135, "EDP_SightReactionMinAttention" },
            { 136, "EDP_SightInvestigationMinAttention" },
            { 137, "EDP_ShootSpreadMax" },
            { 138, "EDP_ShootSpreadMin" },
            { 139, "EDP_ShootSpreadRange" },
            { 140, "EDP_SocialGreetingAngle" },
            { 141, "EDP_SocialGreetingCooldown" },
            { 142, "EDP_SocialGreetingCooldownAlertLevel" },
            { 143, "EDP_SocialGreetingCooldownLastSpeak" },
            { 144, "EDP_SocialGreetingCooldownPlayer" },
            { 145, "EDP_SocialGreetingCooldownSequence" },
            { 146, "EDP_SocialGreetingDistance" },
            { 147, "EDP_SocialLookAtTimeMax" },
            { 148, "EDP_SocialLookAtTimeMin" },
            { 149, "EDP_SocialSillyCooldown" },
            { 150, "EDP_SocialSillyDistance" },
            { 151, "EDP_SocialSillyTriggerTime" },
            { 152, "EDP_SocialStandingCooldown" },
            { 153, "EDP_SocialStandingDistance" },
            { 154, "EDP_SocialStandingDistanceImmediate" },
            { 155, "EDP_SocialStandingTriggerTime" },
            { 156, "EDP_SpotHitmanShootingDistance" },
            { 157, "EDP_StrictItemRules" },
            { 158, "EDP_COUNT" }
        };

        (*enum_map)["ZInputListenerButtonEntity.eInputListenerButtons"] = std::map<uint32_t, std::string>{
            { 0, "EILB_UP" },
            { 1, "EILB_LEFT" },
            { 2, "EILB_DOWN" },
            { 3, "EILB_RIGHT" },
            { 4, "EILB_AIM" },
            { 5, "EILB_TRIGGER" }
        };

        (*enum_map)["EEquipAbility"] = std::map<uint32_t, std::string>{
            { 0, "EA_EQUIP_IN_HANDS" },
            { 1, "EA_CANNOT_BE_EQUIPPED" }
        };

        (*enum_map)["EAISituationEvent"] = std::map<uint32_t, std::string>{
            { 0, "AISE_Any" },
            { 1, "AISE_ActorJoined" },
            { 2, "AISE_ActorLeft" },
            { 3, "AISE_Data" }
        };

        (*enum_map)["ZLeadEscortSituationEntity.EEscortState"] = std::map<uint32_t, std::string>{
            { 0, "EES_Idle" },
            { 1, "EES_Evaluate" },
            { 2, "EES_Escorting" },
            { 3, "EES_Intermediate" }
        };

        (*enum_map)["ZSniperCombatGroup.EGroupState"] = std::map<uint32_t, std::string>{
            { 0, "IGS_WaitingForActors" },
            { 1, "IGS_Move" },
            { 2, "IGS_Siege" },
            { 3, "IGS_Completed" },
            { 4, "IGS_Max" }
        };

        (*enum_map)["EVolumeTriggerEntityTypeFlags"] = std::map<uint32_t, std::string>{
            { 1, "VTET_Hitman" },
            { 2, "VTET_ActorAlive" },
            { 4, "VTET_ActorDead" },
            { 128, "VTET_ExplodeableItem" },
            { 64, "VTET_SoundSweetener" },
            { 32, "VTET_Spatial" },
            { 16, "VTET_ThrownItem" },
            { 8, "VTET_ActorPacified" },
            { 256, "VTET_Item" },
            { 512, "VTET_SpatialVisible" }
        };

        (*enum_map)["ZSetUIControlDisplayInfoEntity.EVisibilityOp"] = std::map<uint32_t, std::string>{
            { 0, "NoOp" },
            { 1, "SetTrue" },
            { 2, "SetFalse" }
        };

        (*enum_map)["EActionPromptState"] = std::map<uint32_t, std::string>{
            { 0, "eActionPromptState_Disabled" },
            { 1, "eActionPromptState_Enabled" },
            { 2, "eActionPromptState_Activated" },
            { 3, "eActionPromptState_Held" }
        };

        (*enum_map)["ZMoveToPositionBehaviorEntity.ERotationAlignment"] = std::map<uint32_t, std::string>{
            { 0, "RA_NONE" },
            { 1, "RA_LOOSE" },
            { 2, "RA_EXACT" }
        };

        (*enum_map)["ESaveType"] = std::map<uint32_t, std::string>{
            { 0, "ESaveType_AutoSave" },
            { 1, "ESaveType_QuickSave" },
            { 2, "ESaveType_SystemData" },
            { 3, "ESaveType_LocalProfile" }
        };

        (*enum_map)["ZHM5WeaponBasicConfigEntity.EWeaponBasicConfigAudioFireType"] = std::map<uint32_t, std::string>{
            { 0, "eWBC_AudioFireType_Full_Automatic" },
            { 1, "eWBC_AudioFireType_Single" }
        };

        (*enum_map)["EButtonPressType"] = std::map<uint32_t, std::string>{
            { 0, "BUTTON_PRESS" },
            { 1, "BUTTON_HOLD" },
            { 2, "BUTTON_REPEAT" },
            { 3, "BUTTON_TAP" },
            { 4, "BUTTON_ROTATE_CCW" },
            { 5, "BUTTON_PRESS_TYPE_MAX" }
        };

        (*enum_map)["EImpactEffectsOptions"] = std::map<uint32_t, std::string>{
            { 0, "eIE_None" },
            { 8, "eIE_AmmoImpactEffect" },
            { 16, "eIE_All" },
            { 1, "eIE_BloodSplatter" },
            { 2, "eIE_Decals" },
            { 4, "eIE_MaterialImpactEffects" }
        };

        (*enum_map)["EBooleanOption"] = std::map<uint32_t, std::string>{
            { 0, "BO_Off" },
            { 1, "BO_On" },
            { 2, "BO_Default" }
        };

        (*enum_map)["EStandRepositionStrategy"] = std::map<uint32_t, std::string>{
            { 0, "SRS_InPlaceRepositioning" },
            { 1, "SRS_NoRepositioning" }
        };

        (*enum_map)["ZLookAtLogic.EAxisSelect"] = std::map<uint32_t, std::string>{
            { 0, "eX" },
            { 1, "eX_NEG" },
            { 2, "eY" },
            { 3, "eY_NEG" },
            { 4, "eZ" },
            { 5, "eZ_NEG" }
        };

        (*enum_map)["ESituationStateChangeReason"] = std::map<uint32_t, std::string>{
            { 128, "eSSCR_C_CLOSE_COMBAT" },
            { 64, "eSSCR_C_CONTROLLED" },
            { 0, "eSSCR_NONE" },
            { 16384, "eSSCR_S_DONE" },
            { 32768, "eSSCR_S_TERMINATED" },
            { 32, "eSSCR_C_DEACTIVATED" },
            { 8192, "eSSCR_S_DISABLED" },
            { 2097152, "eSSCR_PAUSED_FROM_RESUMING" },
            { 16, "eSSCR_C_DIED" },
            { 4096, "eSSCR_CL_SYSTEMIC" },
            { 1048576, "eSSCR_PAUSED_FROM_PLAYING" },
            { 256, "eSSCR_C_HERO_ACTION" },
            { 512, "eSSCR_C_PACIFIED" },
            { 1024, "eSSCR_CL_CHILD_DRAMA" },
            { 2048, "eSSCR_CL_OTHER_DRAMA" },
            { 65536, "eSSCR_S_STARTED" },
            { 131072, "eSSCR_S_RESUMING" },
            { 262144, "eSSCR_S_UNPAUSE" },
            { 524288, "eSSCR_R_RESOURCE_UNAVAILABLE" }
        };

        (*enum_map)["EMaterialRegistrationState"] = std::map<uint32_t, std::string>{
            { 0, "eMRS_None" },
            { 1, "eMRS_Pending" },
            { 2, "eMRS_Success" },
            { 3, "eMRS_Failed" }
        };

        (*enum_map)["ZRenderPostfilterParametersEntity.EDOFBlurType"] = std::map<uint32_t, std::string>{
            { 0, "eFastest" },
            { 1, "eLowRezLensBlur" },
            { 2, "eLowRezLensBlurSoft" },
            { 3, "eHighRezLensBlur" }
        };

        (*enum_map)["CrowdReactionAIEventType"] = std::map<uint32_t, std::string>{
            { 0, "CROWDAIEVENT_NONE" },
            { 1, "CROWDAIEVENT_CURIOUS" },
            { 2, "CROWDAIEVENT_ALERTED" },
            { 3, "CROWDAIEVENT_BLAME_FOR_WEAPON" },
            { 4, "CROWDAIEVENT_BLAME_FOR_KILL" }
        };

        (*enum_map)["ZHeroEscortSituationEntity.ETargetState"] = std::map<uint32_t, std::string>{
            { 0, "ETS_Unknown" },
            { 1, "ETS_NoTarget" },
            { 2, "ETS_RunningActBehavior" },
            { 3, "ETS_RunningDummyBehavior" },
            { 4, "ETS_RunningOtherBehavior" },
            { 5, "ETS_Dead" },
            { 6, "ETS_TargetIsHitman" }
        };

        (*enum_map)["ZHitmanLocomotionQuery.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "ANY" }
        };

        (*enum_map)["CrowdUtil.EDefaultStateTypes"] = std::map<uint32_t, std::string>{
            { 0, "STATE_IDLE" },
            { 1, "STATE_WALK" },
            { 2, "STATE_PENDINGWALK" },
            { 3, "STATE_DEAD" },
            { 4, "STATE_SCARED" },
            { 5, "STATE_PENDINGSCARED" },
            { 6, "STATE_POSSESSED" },
            { 7, "STATE_ALERT" },
            { 8, "STATE_PRONE" },
            { 9, "STATE_RELOCATE" },
            { 10, "STATE_PENDINGRELOCATE" },
            { 11, "NUM_DEFAULT_STATES" }
        };

        (*enum_map)["ZAIPerceptibleEntity.EReactionBehaviorMode"] = std::map<uint32_t, std::string>{
            { 0, "FullBehavior" },
            { 1, "StopOnInvestigate" },
            { 2, "StopOnReacted" }
        };

        (*enum_map)["EGameEventArgType"] = std::map<uint32_t, std::string>{
            { 0, "GE_ARGS_KILL" },
            { 1, "GE_ARGS_PRIORITYKILL" },
            { 2, "GE_ARGS_SITUATION" },
            { 3, "GE_ARGS_INVENTORY" },
            { 4, "GE_ARGS_EXPLODINGPROP" },
            { 5, "GE_ARGS_EVENT" },
            { 6, "GE_ARGS_CHECKPOINTEVENT" },
            { 7, "GE_ARGS_AI_SITUATION" }
        };

        (*enum_map)["ZCautiousSearchGroup.ESearchGroupState"] = std::map<uint32_t, std::string>{
            { 0, "SGS_Acknowledge" },
            { 1, "SGS_Approach" },
            { 2, "SGS_Approaching" },
            { 3, "SGS_Waiting" },
            { 4, "SGS_Completed" }
        };

        (*enum_map)["EVRConfigRotationType"] = std::map<uint32_t, std::string>{
            { 0, "EVRCRT_None" },
            { 1, "EVRCRT_Lock" },
            { 2, "EVRCRT_Offset" }
        };

        (*enum_map)["IRoomEntity.EReasoningGridImportance"] = std::map<uint32_t, std::string>{
            { 0, "RGI_NoGrid" },
            { 1, "RGI_Low" },
            { 2, "RGI_Normal" },
            { 3, "RGI_High" },
            { 4, "RGI_Extreme" }
        };

        (*enum_map)["EFSMInternalEvent"] = std::map<uint32_t, std::string>{
            { 0, "eFSMEvent_Completed" },
            { 1, "eFSMEvent_Failed" },
            { 2, "eFSMEvent_Choice" },
            { 3, "eFSMEvent_Max" }
        };

        (*enum_map)["ZOnlineManager.EState"] = std::map<uint32_t, std::string>{
            { 1, "eTRIGGER_FLOW" },
            { 2, "eOFFLINE" },
            { 3, "eSUSPEND" },
            { 4, "eDISCONNECTED" },
            { 5, "eBEGIN_CONNECTION_FLOW" },
            { 6, "ePREAUTHENTICATE" },
            { 7, "eFETCH_API_VERSION" },
            { 8, "eFETCHING_API_VERSION" },
            { 9, "eAPI_VERSION_RECEIVED" },
            { 10, "eFETCHING_CONFIGURATION" },
            { 11, "eCONFIGURATION_RECEIVED" },
            { 12, "eONLINE_CONSENT_CONFIRMATION" },
            { 13, "ePREAUTHENTICATION_ENTITLEMENTS_SYNCHRONIZE_INPROGRESS" },
            { 14, "ePREAUTHENTICATION_ENTITLEMENTS_SYNCHRONIZE_DONE" },
            { 15, "eAUTHENTICATING" },
            { 16, "eAUTHENTICATION_RECEIVED" },
            { 17, "eENTITLEMENTS_SYNCHRONIZE_INPROGRESS" },
            { 18, "eENTITLEMENTS_SYNCHRONIZE_DONE" },
            { 19, "eAUTHENTICATING_GAMESERVICE" },
            { 20, "eAUTHENTICATION_GAMESERVICE_RECEIVED" },
            { 21, "eFETCHING_OFFLINE_CACHE_DB_DIFF" },
            { 22, "eFETCHING_OFFLINE_CACHE_DB_DIFF_RECEIVED" },
            { 23, "eFETCHING_DYNAMIC_RESOURCES" },
            { 24, "eDYNAMIC_RESOURCES_MOUNTED" },
            { 25, "eCHECK_FOR_DLC_UPDATES" },
            { 26, "eFETCHING_PLATFORM_USERINFO" },
            { 27, "ePLATFORM_USERINFO_RECEIVED" },
            { 28, "eFETCHING_USER_CONFIGURATION" },
            { 29, "eUSER_CONFIGURATION_RECEIEVED" },
            { 30, "eFETCHING_PROFILE" },
            { 31, "ePROFILE_RECEIVED" },
            { 32, "eSYNCHRONIZING_PROFILE" },
            { 33, "ePROFILE_SYNCHRONIZED" },
            { 34, "eRETRIEVING_EVENTS" },
            { 35, "eEVENTS_RETRIEVED" },
            { 36, "eWAITING_FOR_SYNCHRONIZING_EVENTS" },
            { 37, "eCONNECTED" },
            { 38, "eCONNECT_TO_GAME_SESSION" },
            { 39, "eCONNECTING_TO_GAME_SESSION" },
            { 40, "eRETRY_SAVE_EVENTS" },
            { 41, "eRETRY_SAVE_EVENTS_INTERNAL" },
            { 42, "eREAUTHENTICATE" },
            { 43, "ePLATFORM_SESSION_RECONNECT" },
            { 44, "eSTATE_MAX" }
        };

        (*enum_map)["ZDebugHM5GameTimeMultiplierEnt.eTMLDReason"] = std::map<uint32_t, std::string>{
            { 0, "eTMLDR_HintMessages" },
            { 1, "eTMLDR_Sequence" },
            { 2, "eTMLDR_ActionKillHeadShot" },
            { 3, "eTMLDR_ActionKillCCProp" },
            { 4, "eTMLDR_ActionKillExplosion" },
            { 5, "eTMLDR_ActionKillLastEnemyInEncounter" },
            { 6, "eTMLDR_ActionKillLastEnemyInCheckPoint" },
            { 7, "eTMLDR_NOTSET" }
        };

        (*enum_map)["ECautiousDisturbanceState"] = std::map<uint32_t, std::string>{
            { 0, "eCDS_Pending" },
            { 1, "eCDS_Expired" },
            { 2, "eCDS_Handled" },
            { 3, "eCDS_GetHelpGroup" },
            { 4, "eCDS_InvestigationGroup" },
            { 5, "eCDS_InvestigateAfterExplosion" },
            { 6, "eCDS_Ignored" },
            { 7, "eCDS_NoInvestigator" },
            { 8, "eCDS_Similar" },
            { 9, "eCDS_ManHunt" },
            { 10, "eCDS_CombatSuppressGunshots" }
        };

        (*enum_map)["ZValueBool_Operation.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" },
            { 3, "NOT_ALL" },
            { 4, "ALL_EQUAL" },
            { 5, "ONE_TRUE" }
        };

        (*enum_map)["IContractObjective.SCounterData.ECounterType"] = std::map<uint32_t, std::string>{
            { 0, "eDEFAULT" },
            { 1, "ePERCENTAGE" }
        };

        (*enum_map)["ECCNodeType"] = std::map<uint32_t, std::string>{
            { 0, "eCCNodeType_Counter" },
            { 1, "eCCNodeType_ExecutePistol" },
            { 2, "eCCNodeType_React" },
            { 3, "eCCNodeType_SilentTakeDownEnd" },
            { 4, "eCCNodeType_SilentKill" },
            { 5, "eCCNodeType_SlitThroat1H" },
            { 6, "eCCNodeType_Swing1H" },
            { 7, "eCCNodeType_Bash1H" },
            { 8, "eCCNodeType_Stab1H" },
            { 9, "eCCNodeType_Syringe1H" },
            { 10, "eCCNodeType_Strangle1H" },
            { 11, "eCCNodeType_Smash1H" },
            { 12, "eCCNodeType_Swing2H" },
            { 13, "eCCNodeType_Stab2H" },
            { 14, "eCCNodeType_Bash2H" },
            { 15, "eCCNodeType_Strangle2H" },
            { 16, "eCCNodeType_Axe" },
            { 17, "eCCNodeType_Sword1H" },
            { 18, "eCCNodeType_AttackChain" },
            { 19, "eCCNodeType_AttackChainCivilian" },
            { 20, "eCCNodeType_AttackChainHeavy" },
            { 21, "eCCNodeType_FailChain" },
            { 22, "eCCNodeType_FinishChainHigh" },
            { 23, "eCCNodeType_FinishChainLow" },
            { 24, "eCCNodeType_FinishChainKill" },
            { 25, "eCCNodeType_StairsChain" },
            { 26, "eCCNodeType_CounterChain" },
            { 27, "eCCNodeType_AttackIdle" },
            { 28, "eCCNodeType_AttackPassify" },
            { 29, "eCCNodeType_FailChainPush" },
            { 30, "eCCNodeType_Count" }
        };

        (*enum_map)["ZHM5CrowdGenericEventConsumer.EEvent"] = std::map<uint32_t, std::string>{
            { 0, "eFootstep" },
            { 1, "eClothRustle" },
            { 2, "ePushReaction" },
            { 3, "ePanic" },
            { 4, "eGeneric00" },
            { 5, "eGeneric01" },
            { 6, "eGeneric02" },
            { 7, "eGeneric03" }
        };

        (*enum_map)["EFontFlags"] = std::map<uint32_t, std::string>{
            { 8, "FV_FauxBold" },
            { 0, "FV_Normal" },
            { 32, "FV_NoAutoFit" },
            { 16, "FV_Original" },
            { 1, "FV_Italic" },
            { 2, "FV_Bold" },
            { 3, "FV_BoldItalic" },
            { 4, "FV_FauxItalic" },
            { 12, "FV_FauxBoldItalic" }
        };

        (*enum_map)["EDeathBehavior"] = std::map<uint32_t, std::string>{
            { 0, "eDB_IMPACT_ANIM" },
            { 1, "eDB_NO_IMPACT_ANIM" },
            { 2, "eDB_NO_VELOCITY" },
            { 3, "eDB_NO_RAGDOLL" }
        };

        (*enum_map)["CrowdMapImpl.CellFlags"] = std::map<uint32_t, std::string>{
            { 1, "CELLFLAG_RESTRICTED_A" },
            { 2, "CELLFLAG_RESTRICTED_B" },
            { 4, "CELLFLAG_RESTRICTED_C" },
            { 8, "CELLFLAG_WALKABLE" },
            { 16, "CELLFLAG_TELEPORT_IN" },
            { 32, "CELLFLAG_TELEPORT_OUT" },
            { 64, "CELLFLAG_UNUSED" },
            { 128, "CELLFLAG_PANIC_ONLY" }
        };

        (*enum_map)["ZBoneAttachEntity.EResetMode"] = std::map<uint32_t, std::string>{
            { 0, "eAtBoneOrigin" },
            { 1, "eKeepOffset" }
        };

        (*enum_map)["EAIModifiers"] = std::map<uint32_t, std::string>{
            { 32, "AIM_PreferredInvestigator" },
            { 8192, "AIM_IgnoreWeapons" },
            { 2097152, "AIM_SuppressSocialGreeting" },
            { 16, "AIM_IgnoreAgileHitman" },
            { 4096, "AIM_IgnoreTrespassing" },
            { 1048576, "AIM_BlockDeadlyThrow" },
            { 8, "AIM_IgnoreSneakyHitman" },
            { 0, "AIM_Invalid" },
            { 64, "AIM_AccidentShy" },
            { 128, "AIM_PreferredAccidentInvestigator" },
            { 16384, "AIM_IgnoreLockdown" },
            { 32768, "AIM_DisableHelpCivilian" },
            { 4194304, "AIM_NeverInvestigateAccidents" },
            { 8388608, "AIM_BlockDeath" },
            { 1, "AIM_IgnoreLowNoise" },
            { 2, "AIM_IgnoreHitmanPropToss" },
            { 4, "AIM_IgnoreAnnoyingHitman" },
            { 30, "AIM_IgnoreSillyHitman" },
            { 256, "AIM_BlockFiberWireInteraction" },
            { 512, "AIM_BlockCloseCombatInteraction" },
            { 1024, "AIM_BlockDragBodyInteraction" },
            { 1792, "AIM_BlockAllInteractions" },
            { 2048, "AIM_IgnoreDistractions" },
            { 65536, "AIM_WantsPrivacy" },
            { 131072, "AIM_ConversationHelper" },
            { 262144, "AIM_ConversationHelperFast" },
            { 524288, "AIM_OneHitpoint" },
            { 16777216, "AIM_IgnoreDeadBody" },
            { 33554432, "AIM_NeverSpectate" },
            { 67108864, "AIM_DisableDeadBodySensor" },
            { 134217728, "AIM_DeafAndBlind" }
        };

        (*enum_map)["ESoundGateType"] = std::map<uint32_t, std::string>{
            { 0, "SOUNDGATE_TYPE_ROUND" },
            { 1, "SOUNDGATE_TYPE_SHARPCORNERS" }
        };

        (*enum_map)["ZVRCameraEntity.ETurnMode"] = std::map<uint32_t, std::string>{
            { 0, "eSmooth" },
            { 1, "eSnap" },
            { 2, "eSmoothSnap" }
        };

        (*enum_map)["ZChannelKeywordCondition.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" },
            { 3, "ANY_TRUE_IF_NO_REQS" }
        };

        (*enum_map)["ZUIFlowLayoutEntity.EFlowType"] = std::map<uint32_t, std::string>{
            { 0, "E_FLOW_TYPE_HORIZONTAL" },
            { 1, "E_FLOW_TYPE_VERTICAL" }
        };

        (*enum_map)["ZTrackDollyControllerQueryEntity.ETrackPointQueryType"] = std::map<uint32_t, std::string>{
            { 0, "Closest" },
            { 1, "ClosestNext" },
            { 2, "ClosestPrevious" }
        };

        (*enum_map)["ESubcontrollerInventorySlot"] = std::map<uint32_t, std::string>{
            { 0, "eSIS_Invalid" },
            { 1, "eSIS_LeftHand" },
            { 2, "eSIS_RightHand" }
        };

        (*enum_map)["IHM5Door.EInitialState"] = std::map<uint32_t, std::string>{
            { 0, "IS_CLOSED" },
            { 1, "IS_OPEN" },
            { 2, "IS_OPEN_IN" },
            { 3, "IS_OPEN_OUT" }
        };

        (*enum_map)["EActionType"] = std::map<uint32_t, std::string>{
            { 64, "AT_CLOTHBUNDLE" },
            { 0, "AT_INVALID" },
            { 128, "AT_DRAGBODY" },
            { 16384, "AT_INTERACTION_GROUP" },
            { 32768, "AT_USE_NORMAL" },
            { 4194304, "AT_CONTAINERFLUSHBODY" },
            { 1073741824, "AT_USE_QUICK" },
            { -2147483648, "AT_ITEM_INTERACTION" },
            { 32, "AT_OUTFIT" },
            { 8192, "AT_COUP_DE_GRACE" },
            { 2097152, "AT_CANCEL" },
            { 536870912, "AT_ITEMCONTAINER" },
            { 16, "AT_REMOTE" },
            { 4096, "AT_DUMPBODY" },
            { 1048576, "AT_EXITSAFEZONE" },
            { 268435456, "AT_INTERRUPTIBLE_TAP" },
            { 8, "AT_GENERIC" },
            { 1, "AT_OPENDOOR" },
            { 2, "AT_CLOSEDOOR" },
            { 4, "AT_PICKUP" },
            { 256, "AT_RETRIEVE_ITEM_FROM_CONTAINER" },
            { 1024, "AT_HERO_MOVEMENT" },
            { 2048, "AT_SWAPITEM" },
            { 65536, "AT_STASHPOINT_PICKUP" },
            { 131072, "AT_ENTERCLOSET" },
            { 262144, "AT_EXITCLOSET" },
            { 524288, "AT_ENTERSAFEZONE" },
            { 16777216, "AT_PLACE_ITEM_IN_CONTAINER" },
            { 33554432, "AT_USE_DOWN" },
            { 67108864, "AT_USE_HOLD" },
            { 134217728, "AT_CONTEXTACTION" }
        };

        (*enum_map)["ERANDOM_DISTRIBUTION"] = std::map<uint32_t, std::string>{
            { 0, "RND_UNIFORM" },
            { 1, "RND_SAWTOOTH" }
        };

        (*enum_map)["InputControlNamesp.eHM5InputActionType"] = std::map<uint32_t, std::string>{
            { 0, "eTypeGet" },
            { 1, "eTypeHold" },
            { 2, "eTypeRepeat" },
            { 3, "eTypeTap" },
            { 4, "eTypeRelease" },
            { 5, "eTypeDownedge" },
            { 6, "eTypeFastTap" },
            { 7, "eTypeHoldDown" },
            { 8, "eTypeFireOnceHoldDown" },
            { 9, "eTypeClickHold" },
            { 10, "eTypePress" },
            { 11, "eTypeANALOG" },
            { 12, "eTypeANALOGRAW" },
            { 13, "eTypeRELATIVE" },
            { 14, "eTYPE_INVALID" }
        };

        (*enum_map)["ERatingCategory"] = std::map<uint32_t, std::string>{
            { 0, "ERatingCategory_Invalid" },
            { 1, "ERatingCategory_Flawless" },
            { 2, "ERatingCategory_Violence" },
            { 3, "ERatingCategory_Cunning" },
            { 4, "ERatingCategory_Noise" },
            { 5, "ERatingCategory_COUNT" }
        };

        (*enum_map)["EDebugSpatialInfoVerbosity"] = std::map<uint32_t, std::string>{
            { 0, "EDSIV_Overview" },
            { 1, "EDSIV_HierachicalView" },
            { 2, "EDSIV_Full" }
        };

        (*enum_map)["EPlayMode"] = std::map<uint32_t, std::string>{
            { 1, "PLAYMODE_STOPPED" },
            { 2, "PLAYMODE_PAUSED" },
            { 3, "PLAYMODE_PLAYING" }
        };

        (*enum_map)["ZHM5FaceFXSpecificEventConsumer.EEvent"] = std::map<uint32_t, std::string>{
            { 0, "eNone" },
            { 1, "eGetInCombatCoverExhalation" },
            { 2, "eLeaveCombatCoverExhalation" },
            { 3, "eAgilityStrainedInhaleExhale" },
            { 4, "eAgilityGroan" },
            { 5, "eCloseCombatAttackSnarl" },
            { 6, "eCloseCombatStainedGroan" },
            { 7, "eCloseCombatSilentKillShush" }
        };

        (*enum_map)["EIKEndEffector"] = std::map<uint32_t, std::string>{
            { 0, "BEE_Pelvis" },
            { 1, "BEE_SpineOrigin" },
            { 2, "BEE_SpineEnd" },
            { 3, "BEE_Head" },
            { 4, "BEE_LeftUpperArm" },
            { 5, "BEE_RightUpperArm" },
            { 6, "BEE_LeftForeArm" },
            { 7, "BEE_RightForeArm" },
            { 8, "BEE_LeftHand" },
            { 9, "BEE_LeftHandThumb" },
            { 10, "BEE_LeftHandIndex" },
            { 11, "BEE_LeftHandMiddle" },
            { 12, "BEE_LeftHandRing" },
            { 13, "BEE_LeftHandPinky" },
            { 14, "BEE_RightHand" },
            { 15, "BEE_RightHandThumb" },
            { 16, "BEE_RightHandIndex" },
            { 17, "BEE_RightHandMiddle" },
            { 18, "BEE_RightHandRing" },
            { 19, "BEE_RightHandPinky" },
            { 20, "BEE_LeftFoot" },
            { 21, "BEE_RightFoot" },
            { 22, "BEE_LeftToe" },
            { 23, "BEE_RightToe" },
            { 24, "BEE_Count" }
        };

        (*enum_map)["EHintMessageType"] = std::map<uint32_t, std::string>{
            { 0, "EHintMessageType_Hint" },
            { 1, "EHintMessageType_InstinctHint" },
            { 2, "EHintMessageType_InstinctPrompt" },
            { 3, "EHintMessageType_Tutorial" }
        };

        (*enum_map)["EHUDMessageStatus"] = std::map<uint32_t, std::string>{
            { 0, "HUD_MESSAGE_UNUSED" },
            { 1, "HUD_MESSAGE_ATTACH" },
            { 2, "HUD_MESSAGE_FADEIN" },
            { 3, "HUD_MESSAGE_DISPLAY" },
            { 4, "HUD_MESSAGE_FADEOUT" }
        };

        (*enum_map)["ERequirementId"] = std::map<uint32_t, std::string>{
            { 0, "EREQUIREMENT_INVALID" },
            { 1, "EREQUIREMENT_TOKEN_OUTFIT_LEGACY_HERO_REQUIEMSUIT" },
            { 2, "EREQUIREMENT_FIREARMS_HERO_PISTOL_TACTICAL_015_SU_SKIN05" },
            { 3, "EREQUIREMENT_PROP_DEVICE_SONYPREORDER_WHITE_RUBBERDUCK_REMOTE_EXPLOSIVE" },
            { 4, "EREQUIREMENT_GOTY_PATIENT_ZERO" },
            { 5, "EREQUIREMENT_GOTY_TOKEN_OUTFIT_PARIS_CLOWN" },
            { 6, "EREQUIREMENT_GOTY_TOKEN_OUTFIT_HOKKAIDO_COWBOY" },
            { 7, "EREQUIREMENT_GOTY_TOKEN_OUTFIT_MARRAKESH_DARK_SNIPER" },
            { 8, "EREQUIREMENT_ANNIVERSARY_OUTFITS" },
            { 9, "EREQUIREMENT_LOCATION_NEWZEALAND" },
            { 10, "EREQUIREMENT_S2_EXECUTIVE_PACK" },
            { 11, "EREQUIREMENT_S2_COLLECTORS_PACK" },
            { 12, "EREQUIREMENT_S2_EXPANSION_VANITY_ITEM1" },
            { 13, "EREQUIREMENT_S2_EXPANSION_VANITY_ITEM2" },
            { 14, "EREQUIREMENT_PROP_CONTAINER_SUITCASE_ICA_STA_STADIA" },
            { 15, "EREQUIREMENT_PROP_DEVICE_ICA_RUBBERDUCK_REMOTE_EXPLOSIVE_STA_STADIA" },
            { 16, "EREQUIREMENT_H1_LEGACY_STANDARD" },
            { 17, "EREQUIREMENT_H1_LEGACY_EXPANSION" },
            { 18, "EREQUIREMENT_H2_LEGACY_STANDARD" },
            { 19, "EREQUIREMENT_H2_LEGACY_EXPANSION" },
            { 20, "EREQUIREMENT_H3_EXPANSION" },
            { 21, "EREQUIREMENT_LOCATION_GOLDEN" },
            { 22, "EREQUIREMENT_LOCATION_ANCESTRAL" },
            { 23, "EREQUIREMENT_LOCATION_EDGY" },
            { 24, "EREQUIREMENT_LOCATION_WET" },
            { 25, "EREQUIREMENT_LOCATION_ELEGANT" },
            { 26, "EREQUIREMENT_LOCATION_TRAPPED" },
            { 27, "EREQUIREMENT_PLATFORM_ORBIS" },
            { 28, "EREQUIREMENT_PLATFORM_PS5" },
            { 29, "EREQUIREMENT_PLATFORM_GDK" },
            { 30, "EREQUIREMENT_PLATFORM_EPIC" },
            { 31, "EREQUIREMENT_PLATFORM_STEAM" },
            { 32, "EREQUIREMENT_PLATFORM_GGP" },
            { 33, "EREQUIREMENT_H3_PREORDER" },
            { 34, "EREQUIREMENT_PLATFORM_IZUMO" }
        };

        (*enum_map)["ZSecuritySystemCameraConfiguration.ECameraEscalationSituations"] = std::map<uint32_t, std::string>{
            { 0, "eCES_Arrest" },
            { 1, "eCES_Combat" }
        };

        (*enum_map)["EConstraintType"] = std::map<uint32_t, std::string>{
            { 0, "ECONSTRAINTTYPE_UNKNOWN" },
            { 1, "ECONSTRAINTTYPE_BALL_AND_SOCKET" },
            { 2, "ECONSTRAINTTYPE_HINGE" },
            { 3, "ECONSTRAINTTYPE_FIXED" },
            { 4, "ECONSTRAINTTYPE_DISTANCE" },
            { 5, "ECONSTRAINTTYPE_D6" }
        };

        (*enum_map)["EVRIKElementMode"] = std::map<uint32_t, std::string>{
            { 0, "EVRIKEM_Enabled" },
            { 1, "EVRIKEM_Disabled" },
            { 2, "EVRIKEM_KeepCurrent" }
        };

        (*enum_map)["EObjectiveType"] = std::map<uint32_t, std::string>{
            { 0, "OBJECTIVE_PRIMARY" },
            { 1, "OBJECTIVE_SECONDARY" },
            { 2, "OBJECTIVE_TERTIARY" }
        };

        (*enum_map)["EWeaponUpgradeUse"] = std::map<uint32_t, std::string>{
            { 0, "eWUU_PrimaryOnly" },
            { 1, "eWUU_SecondaryOnly" },
            { 2, "eWUU_AllFireModes" }
        };

        (*enum_map)["EActorSoundDefs"] = std::map<uint32_t, std::string>{
            { 0, "_NoSound" },
            { 399, "InCa_XplnLOS" },
            { 1, "Dth_BrkNck" },
            { 2, "Dth_Fll" },
            { 393, "Gen_PhnPckUP" },
            { 3, "Dth_GnSht" },
            { 4, "Dth_HdSht" },
            { 387, "VIP_MssgnD_Rsp" },
            { 5, "Dth_Mpct" },
            { 6, "Dth_SltThrt" },
            { 397, "InCa_FrskHeadsUpLdr" },
            { 7, "Dth_Strngl" },
            { 8, "Dth_Xplo" },
            { 407, "Exp_Cough" },
            { 9, "Dth_PrpF" },
            { 10, "Dth_Electro" },
            { 401, "InDedBdy_CivCmntPhone" },
            { 11, "Dth_Burn" },
            { 12, "Dth_Crush" },
            { 395, "Cmbt_FlushOutLdr" },
            { 13, "Dth_Scrm" },
            { 14, "Dth_Hrt" },
            { 405, "Exp_Carry" },
            { 15, "Dth_SrpsGrab" },
            { 16, "Dth_HumShldStrain" },
            { 415, "Exp_Think" },
            { 17, "Dth_Snore" },
            { 18, "Dth_Groan" },
            { 409, "Exp_Exhale" },
            { 19, "Dth_Dump" },
            { 20, "Dth_PrpTssFrntAck" },
            { 403, "InDsg_FllwWrn1Nkd" },
            { 21, "Dth_Headlock" },
            { 22, "Dth_Blinded" },
            { 413, "Exp_Sniff" },
            { 23, "Dth_BeeSting" },
            { 24, "Dth_Grab" },
            { 25, "Gen_Grt47" },
            { 26, "Gen_GrtGrd47WGun" },
            { 27, "Gen_GrtTrgt" },
            { 28, "Gen_GrtTrgtRsp" },
            { 411, "Exp_Inhale" },
            { 29, "Gen_NPC2NPCGrt" },
            { 30, "Gen_NPC2NPCRsp" },
            { 31, "Gen_GtHlp" },
            { 32, "Gen_GtHlpLd" },
            { 33, "Gen_GtHlp47Knwn" },
            { 34, "Gen_Mssng" },
            { 35, "Gen_HMHere" },
            { 36, "Gen_HMThere" },
            { 419, "Exp_InPain" },
            { 37, "Gen_SrpsLow" },
            { 38, "Gen_SrpsLowShort" },
            { 39, "Gen_Srps" },
            { 40, "Gen_SrpsLd" },
            { 41, "Gen_StndRsp" },
            { 42, "Gen_Stop" },
            { 43, "Gen_StopLd" },
            { 44, "Gen_Reveal" },
            { 45, "Gen_ThumbsUp" },
            { 46, "Gen_BrknAck" },
            { 47, "Gen_Ack" },
            { 48, "Gen_AckLd" },
            { 49, "Gen_AckNtnse" },
            { 50, "Gen_BumpAck" },
            { 51, "Gen_Curse" },
            { 52, "Gen_CurseLow" },
            { 53, "Gen_DrpGun" },
            { 54, "Gen_DrpCase" },
            { 55, "Gen_CoinCurse" },
            { 56, "Gen_TransportGreet" },
            { 391, "Gen_Avoid" },
            { 57, "Gen_Thanks" },
            { 58, "Gen_ReturnItem2Guard" },
            { 385, "VIP_MssgnB_Rsp" },
            { 59, "Gen_NoWay1" },
            { 60, "Gen_NoWay2Kidding" },
            { 61, "Gen_NoWay3Joke" },
            { 62, "Gen_NoWay44Real" },
            { 389, "Dth_Sick" },
            { 63, "Gen_NoWay5DntBeliv" },
            { 64, "Gen_NoWay6Serious" },
            { 65, "Gen_NoWay7Horrible" },
            { 66, "Gen_Way1" },
            { 67, "Gen_Way2Kidding" },
            { 68, "Gen_Way3Joke" },
            { 69, "Gen_Way44Real" },
            { 70, "Gen_Way5DntBeliv" },
            { 71, "Gen_Way6Serious" },
            { 72, "Gen_Way7Horrible" },
            { 73, "Gen_NkdRunAck" },
            { 74, "Gen_Grasp" },
            { 75, "Gen_Amused" },
            { 76, "Gen_Annoyed" },
            { 77, "Gen_BdygrdArrive" },
            { 78, "Gen_BdygrdMovOut" },
            { 79, "Gen_GiveUp" },
            { 80, "Gen_Off" },
            { 81, "Gen_On" },
            { 82, "Gen_PanicLow" },
            { 83, "Gen_Sick" },
            { 84, "Gen_SmellAck" },
            { 85, "Gen_SmrtPhnAct" },
            { 86, "Gen_PhoneAct" },
            { 87, "Gen_OutbreakInfect" },
            { 88, "Gen_OutbreakSick" },
            { 89, "Gen_OutbreakWhine" },
            { 90, "Gtag" },
            { 91, "ClsCmbt_Ack" },
            { 92, "ClsCmbt_Tnt" },
            { 93, "Cmbt_BackupCll" },
            { 94, "Cmbt_BadDsg" },
            { 95, "Cmbt_Beg" },
            { 96, "Cmbt_ClsAck" },
            { 97, "Cmbt_Fire" },
            { 98, "Cmbt_FireLdr" },
            { 99, "Cmbt_GtHit" },
            { 100, "Cmbt_HitHM" },
            { 101, "Cmbt_HMClsCmbtAck" },
            { 102, "Cmbt_HMCvr" },
            { 103, "Cmbt_HMFire" },
            { 104, "Cmbt_HMFlnk" },
            { 105, "Cmbt_HMHeadPopr" },
            { 106, "Cmbt_HMKll" },
            { 107, "Cmbt_HMKllCiv" },
            { 108, "Cmbt_HMKllName" },
            { 109, "Cmbt_HMKllPrpTss" },
            { 110, "Cmbt_HMMssTnt" },
            { 111, "Cmbt_HMShrpShtr" },
            { 112, "Cmbt_HMSpttd" },
            { 113, "Cmbt_HMVnshd" },
            { 114, "Cmbt_Hold" },
            { 115, "Cmbt_HoldLdr" },
            { 116, "Cmbt_HumShldRls1" },
            { 117, "Cmbt_HumShldRls2" },
            { 118, "Cmbt_HumShldRls3" },
            { 119, "Cmbt_HumShldRlsFem1" },
            { 120, "Cmbt_HumShldRlsFem2" },
            { 121, "Cmbt_HumShldRlsFem3" },
            { 122, "Cmbt_HumShldVctm" },
            { 123, "Cmbt_HumShldLdr" },
            { 124, "Cmbt_LngLst" },
            { 125, "Cmbt_LngLstRsp" },
            { 126, "Cmbt_LstMnStn" },
            { 127, "Cmbt_LstSght" },
            { 128, "Cmbt_LstSghtRsp" },
            { 129, "Cmbt_NdrAttck" },
            { 314, "Trspss_Wrn3" },
            { 130, "Cmbt_Relod" },
            { 131, "Cmbt_Scrm" },
            { 260, "InCa_XplnDsg" },
            { 132, "Cmbt_ThrowFlash" },
            { 133, "Cmbt_ThrowFlashMiss" },
            { 318, "Trspss_EscortRequest" },
            { 134, "Cmbt_ThrowFlashMiss2" },
            { 135, "Cmbt_ThrowFlashWin" },
            { 312, "Trspss_Wrn1" },
            { 136, "Cmbt_ThrowFlashWin2" },
            { 137, "Cmbt_TkDwnLdr" },
            { 258, "InCa_XplnX" },
            { 138, "Cmbt_VntAck" },
            { 139, "Cmbt_Whmp" },
            { 268, "InCa_XplnSeeStrngl" },
            { 140, "Cmbt_StalemateHold" },
            { 141, "Cmbt_StalemateTnt" },
            { 262, "InCa_XplnRecurSvr" },
            { 142, "Cmbt_TriggerTheAlarm" },
            { 143, "Cmbt_47Mpty" },
            { 256, "InCa_XplnSeeDth" },
            { 144, "Cmbt_47SuperSize" },
            { 145, "Evac_PrtTrgtSolo" },
            { 266, "InCa_XplnKnckDwnVctm" },
            { 146, "Evac_PrtTrgtAck" },
            { 147, "Evac_PrtTrgtAckLdr" },
            { 276, "InDedBdy_NkdAck" },
            { 148, "Evac_PrtTrgtEscrt" },
            { 149, "Evac_PrtTrgtStop" },
            { 270, "InCa_XplnHuntTargetFail" },
            { 150, "Evac_PrtTrgtStnd" },
            { 151, "Evac_PrtTrgtStndRsp" },
            { 264, "InCa_XplnAckRdo" },
            { 152, "Evac_Cornered" },
            { 153, "Evac_MovOut" },
            { 274, "InDedBdy_BloodPllAck" },
            { 154, "Evac_PathChange" },
            { 155, "Evac_PeelOff" },
            { 284, "InDedBdy_CivCmnt" },
            { 156, "Evac_LastPeelOff" },
            { 157, "Evac_ShltrArrv" },
            { 278, "InDedBdy_BllPllRpt" },
            { 158, "Evac_ShltrBad" },
            { 159, "Evac_ShltrLdr" },
            { 272, "InCa_VIPKillAck" },
            { 160, "Evac_ShltrRsp" },
            { 161, "Evac_TrgtHitRsp" },
            { 162, "AvoidXplo_Ack" },
            { 163, "AvoidXplo_Stnd" },
            { 292, "InDedBdy_WakeNkdLdr" },
            { 164, "Ar_47BadAction" },
            { 165, "Ar_47X" },
            { 166, "Ar_BadDsg" },
            { 167, "Ar_BlmeKll" },
            { 168, "Ar_BlameKnckDwn" },
            { 169, "Ar_BlameKnckDwnPT" },
            { 290, "InDedBdy_WakerWake" },
            { 170, "Ar_BlameKllPT" },
            { 171, "Ar_47BadActionPT" },
            { 300, "InDsg_Pzzl" },
            { 172, "Ar_DrgBody" },
            { 173, "Ar_FkeSrrdrTnt" },
            { 294, "Rcvr_Xpln47" },
            { 174, "Ar_HMDoor" },
            { 175, "Ar_Strangle" },
            { 288, "InDedBdy_BodyGone" },
            { 176, "Ar_Trspss" },
            { 177, "Ar_WeapWrn1" },
            { 298, "InDsg_FllwWrn2" },
            { 178, "Ar_WeapWrn2" },
            { 179, "Ar_Wrn1" },
            { 308, "InDsg_FllwWrn1BadSound" },
            { 180, "Ar_Wrn2" },
            { 181, "Ar_Wrn3" },
            { 302, "InDsg_StndDistance" },
            { 182, "Ar_VictimAck" },
            { 183, "Ar_Thief" },
            { 296, "Rcvr_XplnKnckDwn" },
            { 184, "Ar_Rsp" },
            { 185, "Sniper_Ack" },
            { 306, "InDsg_FllwWrn1BadAction" },
            { 186, "InCa_BackupCll" },
            { 187, "InCa_ChckCvr" },
            { 316, "Trspss_SrchAckLegal47" },
            { 188, "InCa_CivRptFail" },
            { 189, "InCa_CivUpset" },
            { 310, "InDsg_FllwWrn1ShadyItem" },
            { 190, "InCa_ClstTnt" },
            { 191, "InCa_HMTnt" },
            { 304, "InDsg_HdNPlnSght" },
            { 192, "InCa_Idle" },
            { 193, "InCa_NitiateHMKnwn" },
            { 378, "Sentry_Accepted" },
            { 194, "InCa_SrchLdr" },
            { 195, "InCa_Stnd" },
            { 324, "Trspss_EscortExit" },
            { 196, "InCa_StndAgtd" },
            { 197, "InCa_StndAgtdLdr" },
            { 382, "Sentry_PostCommentLdr" },
            { 198, "InCa_StndAgtdHMKnwn" },
            { 199, "InCa_StndAgtdHMKnwnLdr" },
            { 376, "Sentry_FrskRequest" },
            { 200, "InCa_StndHMKnwn" },
            { 201, "InCa_StndHMKnwnLdr" },
            { 322, "Trspss_EscortStnd" },
            { 202, "InCa_StndLdr" },
            { 203, "InCa_StndRsp" },
            { 332, "InCu_CrAlrmLdr" },
            { 204, "InCa_StndLckDwnFlsAlrm" },
            { 205, "InCa_VntTnt" },
            { 326, "InCu_Brk2Rdo" },
            { 206, "InCa_Brk2Civ" },
            { 207, "InCa_Brk2Grd" },
            { 320, "Trspss_EscortStayClose" },
            { 208, "InCa_Brk2Rdo" },
            { 209, "InCa_BrkAsk" },
            { 330, "InCu_BackupRqst" },
            { 210, "InCa_GhostAsk" },
            { 211, "InCa_TriggerTheAlarm" },
            { 340, "InCu_PrpTssSeeAck" },
            { 212, "InCa_Xpln47Thief" },
            { 213, "InCa_DstrssInv" },
            { 334, "InCu_FtStpsAck" },
            { 214, "InCa_DstrssLdr" },
            { 215, "InCa_DstrssInvLdr" },
            { 328, "InCu_Stnd" },
            { 216, "InCa_WakeAsk" },
            { 217, "InCa_47Rcall" },
            { 338, "InCu_PrpTssHearLdr" },
            { 218, "InCa_WakerStnd" },
            { 219, "InCa_ClsCmbtAck" },
            { 348, "InCu_WpnInv" },
            { 220, "InCa_SeeDthInv" },
            { 221, "InCa_SeeDthInvLdr" },
            { 342, "InCu_PrpTssSeeLdr" },
            { 222, "InCa_SeeDthLdr" },
            { 223, "InCa_XploInv" },
            { 336, "InCu_PrpTssHearAck" },
            { 224, "InCa_XploInvLdr" },
            { 225, "InCa_XploLdr" },
            { 282, "InDedBdy_Stnd" },
            { 226, "InCa_AlarmAck" },
            { 227, "InCa_GnShtInv" },
            { 356, "InCu_EscrtTrgtGreenLight" },
            { 228, "InCa_GnShtInvLdr" },
            { 229, "InCa_GnShtLdr" },
            { 286, "InDedBdy_PrmtrBrchWrn2" },
            { 230, "InCa_RecurSvrInv" },
            { 231, "InCa_RecurSvrInvLdr" },
            { 280, "InDedBdy_PcfdInv" },
            { 232, "InCa_RecurSvrInvRsp" },
            { 233, "InCa_RecurSvrLdr" },
            { 354, "InCu_CrAlrmStndStndRsp" },
            { 234, "InCa_RecurSvrRsp" },
            { 235, "InCa_LckDwnGtOutLdr" },
            { 364, "InSt_Stnd" },
            { 236, "InCa_LckDwnGtOutRsp" },
            { 237, "InCa_LckDwnWrn1" },
            { 358, "InSt_HMBz" },
            { 238, "InCa_LckDwnWrn2" },
            { 239, "InCa_LckDwnWrn3" },
            { 352, "InCu_RecurRsp" },
            { 240, "InCa_LckDwnCivCmnt" },
            { 241, "InCa_FrskAck" },
            { 362, "InSt_HMSnkng" },
            { 242, "InCa_Frsk" },
            { 243, "InCa_FrskCln" },
            { 372, "FseBx_GoFix" },
            { 244, "InCa_FrskWpn" },
            { 245, "InCa_Xpln47Wpn" },
            { 366, "InSt_HM2Cls" },
            { 246, "InCa_XplnAccdnt" },
            { 247, "InCa_XplnDedBdy" },
            { 360, "InSt_HMEntXit" },
            { 248, "InCa_XplnDedBdyMassive" },
            { 249, "InCa_XplnDrgBdy" },
            { 370, "FseBx_Fixed" },
            { 250, "InCa_XplnDstrss" },
            { 251, "InCa_XplnExplo" },
            { 380, "Sentry_47LoiterAck" },
            { 252, "InCa_XplnGhost" },
            { 253, "InCa_XplnGnsht" },
            { 374, "Sentry_DenyEntry" },
            { 254, "InCa_XplnNkdBdy" },
            { 255, "InCa_XplnPcfdBdy" },
            { 368, "InSt_AdiosRequest" },
            { 257, "InCa_XplnTrspss" },
            { 259, "InCa_XplnWpn" },
            { 261, "InCa_XplnImposter" },
            { 263, "InCa_XplnRsp" },
            { 265, "InCa_XplnKnckDwn" },
            { 267, "InCa_XplnKnckDwnGhost" },
            { 269, "InCa_XplnHuntTargetWin" },
            { 271, "InCa_VIPDownAck" },
            { 273, "Accdnt_Inv" },
            { 275, "InDedBdy_Ack" },
            { 277, "InDedBdy_Inv" },
            { 279, "InDedBdy_Massive" },
            { 281, "InDedBdy_CntnAck" },
            { 283, "InDedBdy_CircleBdy" },
            { 285, "InDedBdy_PrmtrBrchWrn1" },
            { 287, "InDedBdy_47AsGrdAck" },
            { 289, "InDedBdy_VctmRcvr" },
            { 291, "InDedBdy_WakeRsp" },
            { 293, "InDedBdy_WakeNkdRsp" },
            { 295, "Rcvr_XplnDsg" },
            { 297, "InDsg_FllwWrn1" },
            { 299, "InDsg_FllwWrn3" },
            { 301, "InDsg_Stnd" },
            { 303, "InDsg_StndHidden" },
            { 305, "InDsg_FllwWrn1Ack" },
            { 307, "InDsg_FllwWrn1Wpn" },
            { 309, "InDsg_FllwWrnJoinr" },
            { 311, "Trspss_Stnd" },
            { 313, "Trspss_Wrn2" },
            { 315, "Trspss_Rsp" },
            { 317, "Trspss_EscortAck" },
            { 319, "Trspss_EscortRequestRepeat" },
            { 321, "Trspss_EscortOk" },
            { 323, "Trspss_EscortArrest" },
            { 325, "Trspss_EscortStayRequest" },
            { 327, "InCu_CivCmnd" },
            { 329, "InCu_CivRsp" },
            { 331, "InCu_CrAlrmAck" },
            { 333, "InCu_CrAlrmStndRsp" },
            { 335, "InCu_FtStpsStnd" },
            { 337, "InCu_PrpTssHearInv" },
            { 339, "InCu_PrpTssHearStndRsp" },
            { 341, "InCu_PrpTssSeeInv" },
            { 343, "InCu_PrpTssSeeStndRsp" },
            { 344, "InCu_RdoAck" },
            { 345, "InCu_RdoInv" },
            { 346, "InCu_RdoLdr" },
            { 347, "InCu_RdoStndRsp" },
            { 349, "InCu_RecurAck" },
            { 350, "InCu_RecurInv" },
            { 351, "InCu_RecurLdr" },
            { 353, "InCu_ItemAckLdr" },
            { 355, "InCu_EscrtTrgtRedLight" },
            { 357, "InSt_HMAglty" },
            { 359, "InSt_HMBzStnd" },
            { 361, "InSt_HMInCvr" },
            { 363, "InSt_PrpTssSee" },
            { 365, "InSt_Wrn" },
            { 367, "InSt_SickAck" },
            { 369, "InSt_PQ" },
            { 371, "FseBx_Fixing" },
            { 373, "FseBx_SabAck" },
            { 375, "Sentry_Frsk" },
            { 377, "Sentry_ItemRequest" },
            { 379, "Sentry_FrskWpnAck" },
            { 381, "Sentry_DenyDsg" },
            { 383, "Sentry_PostCommentRsp" },
            { 384, "VIP_MssgnA_Ldr" },
            { 386, "VIP_MssgnC_Ldr" },
            { 388, "VIP_MssngCallOut" },
            { 390, "Dth_Poison" },
            { 392, "Gen_CloseCall" },
            { 394, "Gen_PhoneActLockdown" },
            { 396, "Cmbt_HMPrptssKnckOut" },
            { 398, "InCa_FrskHeadsUpRdo" },
            { 400, "InCa_XplnGotShot" },
            { 402, "InDedBdy_NoFaulVctmXpln" },
            { 404, "Ar_BlameKnckDwnMelee" },
            { 406, "Exp_ClearThroat" },
            { 408, "Exp_Drink" },
            { 410, "Exp_Idle" },
            { 412, "Exp_InhaleFast" },
            { 414, "Exp_Swallow" },
            { 416, "Exp_Scared" },
            { 417, "Exp_Gld" },
            { 418, "Exp_Dsppntd" },
            { 420, "InCa_AckBdy" },
            { 421, "InCa_AckBdyLdr" },
            { 422, "InDedBdy_CivCmntPcfd" },
            { 423, "InDedBdy_CivCmntPhonePcfd" },
            { 424, "Gen_SocialAck" }
        };

        (*enum_map)["Network.OrderingChannel"] = std::map<uint32_t, std::string>{
            { 0, "SYSTEM_INTERNAL" },
            { 1, "PLAYER_INPUT" },
            { 2, "SYNCH_POINT" },
            { 3, "CAMERA" },
            { 4, "PROJECTILE" },
            { 5, "PIN_SIGNAL" },
            { 6, "GAME_STATE" },
            { 7, "HERO_STATE" },
            { 8, "NPC_STATE" },
            { 9, "WEAPONS" },
            { 10, "INTERACTIONS" },
            { 11, "ACTS" },
            { 12, "ANIMATION" },
            { 13, "MISC" },
            { 16, "MAX_CHANNELS" }
        };

        (*enum_map)["ZRenderPostfilterParametersEntity.EHDRAdaptationType"] = std::map<uint32_t, std::string>{
            { 0, "eMedian" },
            { 1, "eGeometricMean" }
        };

        (*enum_map)["ECheatGroup"] = std::map<uint32_t, std::string>{
            { 0, "eCGNone" },
            { 1, "eCGPistols" },
            { 2, "eCGSMGs" },
            { 3, "eCGAssaultRifles" },
            { 4, "eCGShotguns" },
            { 5, "eCGSniper" },
            { 6, "eCGExotics" },
            { 7, "eCGDevices" }
        };

        (*enum_map)["EReplicaOperation"] = std::map<uint32_t, std::string>{
            { 0, "E_Created" },
            { 1, "E_Destroyed" }
        };

        (*enum_map)["ECCEmitterEffect"] = std::map<uint32_t, std::string>{
            { 0, "eCCEmitterEffect_None" },
            { 1, "eCCEmitterEffect_Stab" },
            { 2, "eCCEmitterEffect_Blunt1H" },
            { 3, "eCCEmitterEffect_Blunt2H" },
            { 4, "eCCEmitterEffect_Slash1H" },
            { 5, "eCCEmitterEffect_Shatter" },
            { 6, "eCCEmitterEffect_AxeCleave" },
            { 7, "eCCEmitterEffect_AxePull" },
            { 8, "eCCEmitterEffect_AxeSlitThroat" },
            { 9, "eCCEmitterEffect_SlitThroat" },
            { 10, "eCCEmitterEffect_FacePunch" },
            { 11, "eCCEmitterEffect_Blood" }
        };

        (*enum_map)["ECommunicationBarState"] = std::map<uint32_t, std::string>{
            { 0, "COMMUNICATION_BAR_NONE" },
            { 1, "COMMUNICATION_BAR_CLEAR" },
            { 2, "COMMUNICATION_BAR_SEARCHING" },
            { 3, "COMMUNICATION_BAR_SUSPICIOUS" },
            { 4, "COMMUNICATION_BAR_HUNTING" },
            { 5, "COMMUNICATION_BAR_HOSTILE" },
            { 6, "COMMUNICATION_BAR_BLOOD_FOUND" },
            { 7, "COMMUNICATION_BAR_BODY_FOUND" },
            { 8, "COMMUNICATION_BAR_GUARDS_ALERTED" },
            { 9, "COMMUNICATION_BAR_BACKUP_ARRIVED" }
        };

        (*enum_map)["EButtonDisplay"] = std::map<uint32_t, std::string>{
            { 0, "BUTTON_DISPLAY_AT_OPENDOOR" },
            { 1, "BUTTON_DISPLAY_AT_PICKUP" },
            { 2, "BUTTON_DISPLAY_AT_STARTDIALOG" },
            { 3, "BUTTON_DISPLAY_AT_RESET" },
            { 4, "BUTTON_DISPLAY_AT_OUTFIT" },
            { 5, "BUTTON_DISPLAY_AT_CLOTHBUNDLE" },
            { 6, "BUTTON_DISPLAY_AT_DRAGBODY" },
            { 7, "BUTTON_DISPLAY_AT_SWITCHBOX" },
            { 8, "BUTTON_DISPLAY_AT_SWAPITEM" },
            { 9, "BUTTON_DISPLAY_AT_DUMPBODY" },
            { 10, "BUTTON_DISPLAY_AT_OPENLID" },
            { 11, "BUTTON_DISPLAY_AT_CHECKPOINTDOOR" },
            { 12, "BUTTON_DISPLAY_AT_SIMPLE" },
            { 13, "BUTTON_DISPLAY_AT_ENTERCLOSET" },
            { 14, "BUTTON_DISPLAY_AT_EXITCLOSET" },
            { 15, "BUTTON_DISPLAY_AT_ENTERSAFEZONE" },
            { 16, "BUTTON_DISPLAY_AT_EXITSAFEZONE" },
            { 17, "BUTTON_DISPLAY_AT_DISABLEFUSEBOX" },
            { 18, "BUTTON_DISPLAY_AT_CONTAINERFLUSHBODY" },
            { 19, "BUTTON_DISPLAY_AT_CONTEXTACTION" },
            { 20, "BUTTON_DISPLAY_AT_HEALTHSTATION" },
            { 21, "BUTTON_DISPLAY_AT_KEYCARDREADER" },
            { 22, "BUTTON_DISPLAY_AT_ITEMCONTAINER" },
            { 23, "BUTTON_DISPLAY_AT_USE_QUICK" },
            { 24, "BUTTON_DISPLAY_AT_USE" },
            { 25, "BUTTON_DISPLAY_RELOAD" },
            { 26, "BUTTON_DISPLAY_HOLSTER" },
            { 27, "BUTTON_DISPLAY_CHANGE_WEAPON_MODE" },
            { 28, "BUTTON_DISPLAY_REMOTE_DETONATE" },
            { 29, "BUTTON_DISPLAY_INVENTORY_ACCEPT" },
            { 30, "BUTTON_DISPLAY_INVENTORY_CANCEL" },
            { 31, "BUTTON_DISPLAY_HINTMESSAGE_CONTINUE" },
            { 32, "BUTTON_DISPLAY_CLOSECOMBAT_TAKEDOWN" },
            { 33, "BUTTON_DISPLAY_CLOSECOMBAT_COUNTERATTACK" },
            { 34, "BUTTON_DISPLAY_CLOSECOMBAT_SILENT" },
            { 35, "BUTTON_DISPLAY_CLOSECOMBAT_SNAPNECK" },
            { 36, "BUTTON_DISPLAY_CLOSECOMBAT_CHOKE" },
            { 37, "BUTTON_DISPLAY_CLOSECOMBAT_CHOKE_TARGET" },
            { 38, "BUTTON_DISPLAY_CLOSECOMBAT_CHAIN_HIT" },
            { 39, "BUTTON_DISPLAY_PISTOL_FINISHER" },
            { 40, "BUTTON_DISPLAY_PEEK_VENT" },
            { 41, "BUTTON_DISPLAY_PEEK_CLOSET" },
            { 42, "BUTTON_DISPLAY_CLIMB_LADDER" },
            { 43, "BUTTON_DISPLAY_SLIDE_LADDER" },
            { 44, "BUTTON_DISPLAY_LEDGE" },
            { 45, "BUTTON_DISPLAY_LEDGE_STEPON" },
            { 46, "BUTTON_DISPLAY_LEDGEJUMP" },
            { 47, "BUTTON_DISPLAY_LEDGE_PULL_UP" },
            { 48, "BUTTON_DISPLAY_LEDGE_CLIMB_DOWN" },
            { 49, "BUTTON_DISPLAY_LEDGE_DROP_DOWN" },
            { 50, "BUTTON_DISPLAY_WINDOW" },
            { 51, "BUTTON_DISPLAY_WINDOWSNEAK" },
            { 52, "BUTTON_DISPLAY_PULLVICTIM" },
            { 53, "BUTTON_DISPLAY_PUSHVICTIM" },
            { 54, "BUTTON_DISPLAY_SURRENDER" },
            { 55, "BUTTON_DISPLAY_COVERTOCOVER" },
            { 56, "BUTTON_DISPLAY_COVERCORNER" },
            { 57, "BUTTON_DISPLAY_COVEREXITFORWARD" },
            { 58, "BUTTON_DISPLAY_COVERSCALEEXIT" },
            { 59, "BUTTON_DISPLAY_TAKEDISGUISE" },
            { 60, "BUTTON_DISPLAY_DROPBODY" },
            { 61, "BUTTON_DISPLAY_ABORT_CHECKPOINTDOOR" },
            { 62, "BUTTON_DISPLAY_QUICKSWAP" },
            { 63, "BUTTON_DISPLAY_OPERATE_LEVER" },
            { 64, "BUTTON_DISPLAY_CLOSECOMBAT_CHAIN_HIGH" },
            { 65, "BUTTON_DISPLAY_CLOSECOMBAT_CHAIN_LOW" },
            { 66, "BUTTON_DISPLAY_CLOSECOMBAT_CHAIN_COUNTER" },
            { 67, "BUTTON_DISPLAY_FIBERWIRE_KILL" },
            { 68, "BUTTON_DISPLAY_DROP_ITEM" },
            { 69, "BUTTON_DISPLAY_ABORT_MINIGAME" },
            { 70, "BUTTON_DISPLAY_CONTRACT_MARK" },
            { 71, "BUTTON_DISPLAY_CONTRACT_UNMARK" },
            { 72, "BUTTON_DISPLAY_COMPLY" },
            { 73, "BUTTON_DISPLAY_MAX" }
        };

        (*enum_map)["ZValueBool_OperationRecalc.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" },
            { 3, "NOT_ALL" },
            { 4, "ALL_EQUAL" },
            { 5, "ONE_TRUE" }
        };

        (*enum_map)["EHM5SoundBulletType"] = std::map<uint32_t, std::string>{
            { 0, "ESBT_SMALL" },
            { 1, "ESBT_MEDIUM" },
            { 2, "ESBT_LARGE" },
            { 3, "ESBT_GORGEOUS" },
            { 4, "ESBT_ANY" }
        };

        (*enum_map)["EContinuity"] = std::map<uint32_t, std::string>{
            { 0, "C0" },
            { 1, "C1" },
            { 2, "C2" }
        };

        (*enum_map)["EVRRenderingMode"] = std::map<uint32_t, std::string>{
            { 0, "VR_RENDER_MODE_2D_SCREEN" },
            { 1, "VR_RENDER_MODE_STEREO_3D" }
        };

        (*enum_map)["ZHM5WeaponBasicConfigEntity.EWeaponBasicConfigAudioHeadTailType"] = std::map<uint32_t, std::string>{
            { 0, "eWBC_AudioHeadTailType_DryFire" },
            { 1, "eWBC_AudioHeadTailType_Normal" },
            { 2, "eWBC_AudioHeadTailType_NormalSweetener" },
            { 3, "eWBC_AudioHeadTailType_Silenced" },
            { 4, "eWBC_AudioHeadTailType_SilencedSweetener" }
        };

        (*enum_map)["ECharacterFullBodyStateType"] = std::map<uint32_t, std::string>{
            { 0, "eSM_FB_OldMovementPlaceholder" },
            { 1, "eSM_FB_Slave" },
            { 2, "eSM_FB_Locomotion" },
            { 3, "eSM_FB_CloseCombat" },
            { 4, "eSM_FB_FlavorIdle" },
            { 5, "eSM_FB_Sniping" },
            { 6, "eSM_FB_AssemblePutOnTheFloor" },
            { 7, "eSM_FB_AssembleAlignContainer" },
            { 8, "eSM_FB_AssembleRetrieve" },
            { 11, "eSM_FB_AssembleStore" }
        };

        (*enum_map)["EControllerButton"] = std::map<uint32_t, std::string>{
            { 0, "BUTTON_NONE" },
            { 1, "BUTTON_CROSS" },
            { 2, "BUTTON_TRIANGLE" },
            { 3, "BUTTON_SQUARE" },
            { 4, "BUTTON_CIRCLE" },
            { 5, "BUTTON_UP" },
            { 6, "BUTTON_RIGHT" },
            { 7, "BUTTON_DOWN" },
            { 8, "BUTTON_LEFT" },
            { 9, "BUTTON_R1" },
            { 10, "BUTTON_R2" },
            { 11, "BUTTON_R3" },
            { 12, "BUTTON_R_STICK" },
            { 13, "BUTTON_L1" },
            { 14, "BUTTON_L2" },
            { 15, "BUTTON_L3" },
            { 16, "BUTTON_L_STICK" },
            { 17, "BUTTON_START" },
            { 18, "BUTTON_SELECT" },
            { 19, "BUTTON_UP_DOWN" },
            { 20, "BUTTON_LEFT_RIGHT" },
            { 21, "BUTTON_LEFT_RIGHT_UP_DOWN" },
            { 22, "BUTTON_L1_R1" },
            { 23, "BUTTON_L2_R2" },
            { 24, "BUTTON_KEYBOARD" },
            { 25, "BUTTON_ESCAPE" }
        };

        (*enum_map)["ZCautiousBackupGroup.EGroupState"] = std::map<uint32_t, std::string>{
            { 0, "GS_DistanceField" },
            { 1, "GS_SendBackup" },
            { 2, "GS_Waiting" },
            { 3, "GS_Completed" }
        };

        (*enum_map)["ZHM5HitmanHealthModifier.EHealthDrainType"] = std::map<uint32_t, std::string>{
            { 0, "eRemoveHealthInstantly" },
            { 1, "eDecreaseHealthToValue" }
        };

        (*enum_map)["ERayType"] = std::map<uint32_t, std::string>{
            { 0, "ERAY_CLOSESTHIT_SIMPLE" },
            { 1, "ERAY_CLOSESTHIT_DETAILED" }
        };

        (*enum_map)["ZHM5BodyContainer.EBCBodyMode"] = std::map<uint32_t, std::string>{
            { 0, "BC_1_VICTIM" },
            { 1, "BC_2_VICTIMS" },
            { 2, "BC_1_VICTIM_FLUSHABLE" },
            { 3, "BC_1_VICTIM_AUTOFLUSHABLE" }
        };

        (*enum_map)["ESoundMaterialType"] = std::map<uint32_t, std::string>{
            { 0, "eGeneric" },
            { 1, "eFlesh" },
            { 2, "eSilent" }
        };

        (*enum_map)["EScreenAnchor"] = std::map<uint32_t, std::string>{
            { 0, "SCREEN_ANCHOR_TOP_LEFT" },
            { 1, "SCREEN_ANCHOR_TOP_CENTER" },
            { 2, "SCREEN_ANCHOR_TOP_RIGHT" },
            { 3, "SCREEN_ANCHOR_MIDDLE_LEFT" },
            { 4, "SCREEN_ANCHOR_MIDDLE_CENTER" },
            { 5, "SCREEN_ANCHOR_MIDDLE_RIGHT" },
            { 6, "SCREEN_ANCHOR_BOTTOM_LEFT" },
            { 7, "SCREEN_ANCHOR_BOTTOM_CENTER" },
            { 8, "SCREEN_ANCHOR_BOTTOM_RIGHT" }
        };

        (*enum_map)["eHitmanPermissionReason"] = std::map<uint32_t, std::string>{
            { 1, "eHPReason_MovementContext" },
            { 2, "eHPReason_ItemHandlingInProcess" },
            { 4, "eHPReason_SniperMode" },
            { 128, "eHPReason_FocusInteraction" },
            { 64, "eHPReason_InstinctBlendIn" },
            { 32, "eHPReason_PlayerInput" },
            { 16, "eHPReason_LevelDesign" },
            { 8, "eHPReason_CrippleBox" },
            { 7, "eHPReason_NUM" },
            { -1, "eHPReason_ALLReasons" }
        };

        (*enum_map)["EActorAnimationOrder"] = std::map<uint32_t, std::string>{
            { 0, "AAO_None" },
            { 1, "AAO_Stand" },
            { 2, "AAO_Move" },
            { 3, "AAO_React" },
            { 4, "AAO_Act" },
            { 5, "AAO_MoveToAct" },
            { 6, "AAO_MoveToCover" },
            { 7, "AAO_ShootFromCover" },
            { 8, "AAO_PeekFromCover" },
            { 9, "AAO_Death" },
            { 10, "AAO_Impact" },
            { 11, "AAO_Controlled" }
        };

        (*enum_map)["ESpeed"] = std::map<uint32_t, std::string>{
            { 0, "eSpeed_Idle" },
            { 1, "eSpeed_Slow" },
            { 2, "eSpeed_Normal" },
            { 3, "eSpeed_Fast" },
            { 4, "eSpeed_Sprint" }
        };

        (*enum_map)["ESeamFixMode"] = std::map<uint32_t, std::string>{
            { 0, "SEAMFIX_NONE" },
            { 1, "SEAMFIX_X" },
            { 2, "SEAMFIX_Y" },
            { 4, "SEAMFIX_Z" },
            { 5, "SEAMFIX_XZ" },
            { 3, "SEAMFIX_XY" },
            { 7, "SEAMFIX_XYZ" },
            { 6, "SEAMFIX_YZ" }
        };

        (*enum_map)["ESyncEvent"] = std::map<uint32_t, std::string>{
            { 0, "eSyncEvent_None" },
            { 200, "eSyncEvent_RightFoot" },
            { 100, "eSyncEvent_LeftFoot" },
            { 300, "eSyncEvent_BothFeet" }
        };

        (*enum_map)["CrowdUtil.ECrowdDirection"] = std::map<uint32_t, std::string>{
            { 0, "NORTH" },
            { 1, "EAST" },
            { 2, "SOUTH" },
            { 3, "WEST" }
        };

        (*enum_map)["ZPreferenceItemEntity.EBoolOptions"] = std::map<uint32_t, std::string>{
            { 0, "EBO_INVERTVERTICAL" },
            { 1, "EBO_FIXEDMAP" }
        };

        (*enum_map)["ZHM5WeaponBasicConfigEntity.EWeaponBasicConfigAudioFamily"] = std::map<uint32_t, std::string>{
            { 0, "eWBC_AudioFamily_Exotics" },
            { 1, "eWBC_AudioFamily_Heavy" },
            { 2, "eWBC_AudioFamily_Light" },
            { 3, "eWBC_AudioFamily_NPC" },
            { 4, "eWBC_AudioFamily_Standard" }
        };

        (*enum_map)["ZStandOffSituation.EDialogState"] = std::map<uint32_t, std::string>{
            { 0, "eDS_ReportTarget" },
            { 1, "eDS_ArrestReason" },
            { 2, "eDS_ArrestReasonWait" },
            { 3, "eDS_Warning" },
            { 4, "eDS_WarningWait" },
            { 5, "eDS_WeaponWarning" },
            { 6, "eDS_WeaponWarningWait" },
            { 7, "eDS_StopWait" },
            { 8, "eDS_Done" }
        };

        (*enum_map)["ZCameraConeTriggerEntity.EAlignment"] = std::map<uint32_t, std::string>{
            { 0, "X_POSITIVE" },
            { 1, "Y_POSITIVE" },
            { 2, "Z_POSITIVE" },
            { 3, "X_NEGATIVE" },
            { 4, "Y_NEGATIVE" },
            { 5, "Z_NEGATIVE" }
        };

        (*enum_map)["ZHeroInventoryAction.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" }
        };

        (*enum_map)["IContractObjective.Category"] = std::map<uint32_t, std::string>{
            { 0, "PRIMARY" },
            { 1, "SECONDARY" },
            { 2, "CONDITION" }
        };

        (*enum_map)["ZHM5LedgeMount.ELedgeEndState"] = std::map<uint32_t, std::string>{
            { 0, "eHang" },
            { 1, "eStand" }
        };

        (*enum_map)["EHUDElement"] = std::map<uint32_t, std::string>{
            { 64, "HUD_ELEMENT_SPECIAL_BAR" },
            { 0, "HUD_ELEMENT_NONE" },
            { 128, "HUD_ELEMENT_TEXT_MESSAGES" },
            { 16384, "HUD_ELEMENT_ATTENTION_PEAKS" },
            { 32768, "HUD_ELEMENT_RATING_TRACKER" },
            { 32, "HUD_ELEMENT_WEAPON_SELECTOR" },
            { 8192, "HUD_ELEMENT_ACTION_BUTTONS" },
            { 2097152, "HUD_ELEMENT_OBJECTIVES" },
            { 16, "HUD_ELEMENT_RETICULES" },
            { 4096, "HUD_ELEMENT_CUSTOM_TEXTS" },
            { 1048576, "HUD_ELEMENT_HEALTH_BAR" },
            { 8, "HUD_ELEMENT_FOCUS_BAR" },
            { 1, "HUD_ELEMENT_MINIMAP" },
            { 2, "HUD_ELEMENT_DISGUISE" },
            { 4, "HUD_ELEMENT_WEAPON_DISPLAY" },
            { 256, "HUD_ELEMENT_CONTRACT_MARKS" },
            { 512, "HUD_ELEMENT_RATING_UPDATE" },
            { 1024, "HUD_ELEMENT_RANKING" },
            { 2048, "HUD_ELEMENT_CHALLENGES" },
            { 65536, "HUD_ELEMENT_TARGET_TRACKER" },
            { 131072, "HUD_ELEMENT_HINTS" },
            { 262144, "HUD_ELEMENT_CONTRACT_SCORING" },
            { 524288, "HUD_ELEMENT_TUTORIAL" },
            { 8388607, "HUD_ALL_ELEMENTS" }
        };

        (*enum_map)["ZHUDCamera3DControllerEntity.EMode"] = std::map<uint32_t, std::string>{
            { 0, "Auto" },
            { 1, "Mode2D" },
            { 2, "Mode3D" }
        };

        (*enum_map)["ZHUDTimerInstance.ETimeFormatChoice"] = std::map<uint32_t, std::string>{
            { 0, "YES" },
            { 1, "NO" },
            { 2, "AUTO" }
        };

        (*enum_map)["ECollidablesType"] = std::map<uint32_t, std::string>{
            { 0, "ECST_STATIC_AND_DYNAMIC" },
            { 1, "ECST_STATIC_ONLY" },
            { 2, "ECST_DYNAMIC_ONLY" }
        };

        (*enum_map)["EParticleModifierImpulseDirections"] = std::map<uint32_t, std::string>{
            { 0, "TARGET_ZAXIS_DIRECTION" },
            { 1, "TOWARDS_TARGET_PIVOT" },
            { 2, "AWAY_FROM_TARGET_PIVOT" }
        };

        (*enum_map)["EItemPoisonType"] = std::map<uint32_t, std::string>{
            { 0, "POISONTYPE_NONE" },
            { 1, "POISONTYPE_LETHAL" },
            { 2, "POISONTYPE_SEDATIVE" },
            { 3, "POISONTYPE_EMETIC" }
        };

        (*enum_map)["EScreenplayTriggerEvent"] = std::map<uint32_t, std::string>{
            { 0, "STT_ReportCrime" },
            { 1, "STT_ReportCrimeToHitman" },
            { 2, "STT_ReportCrimeMoveBack" }
        };

        (*enum_map)["ETakeDownAnim"] = std::map<uint32_t, std::string>{
            { 0, "eCoverLowOverNarrowCloseFront" },
            { 1, "eCoverLowOverNarrowCloseBack" },
            { 2, "eCoverLowOverNarrowFarFront" },
            { 3, "eCoverLowOverNarrowFarBack" },
            { 4, "eCoverLowOverWideFront" },
            { 5, "eCoverLowOverWideBack" },
            { 6, "eCoverLowCornerFront" },
            { 7, "eCoverLowCornerBack" },
            { 8, "eCoverHighCornerFront" },
            { 9, "eCoverHighCornerBack" },
            { 10, "eLocomotionBack" },
            { 11, "eLocomotionFallback" },
            { 12, "eLocomotionChair" },
            { 13, "eChokeGroundLoop" },
            { 14, "eChokeGroundEndPacify" },
            { 15, "eChokeGroundEndKill" },
            { 16, "eChokeGroundFallBackLoop" },
            { 17, "eChokeGroundFallBackEndPacify" },
            { 18, "eChokeGroundFallBackEndKill" },
            { 19, "eChokeChairLoop" },
            { 20, "eChokeChairEndPacify" },
            { 21, "eChokeChairEndKill" },
            { 22, "eChokeChairEndLeft90" },
            { 23, "eChokeChairEndLeft45" },
            { 24, "eChokeChairEndFront" },
            { 25, "eChokeChairEndRight45" },
            { 26, "eChokeChairEndRight90" },
            { 27, "eTakeDownAnimLast" }
        };

        (*enum_map)["eVRFadeType"] = std::map<uint32_t, std::string>{
            { 0, "FadeToGame" },
            { 1, "FadeToBlack" },
            { 2, "FadeToGame_HighPriority" },
            { 3, "FadeToBlack_HighPriority" },
            { 4, "CutToGame" },
            { 5, "CutToBlack" },
            { 6, "KeepCurrent" }
        };

        (*enum_map)["ZLogicMultipleGate.EGateType"] = std::map<uint32_t, std::string>{
            { 0, "eFireEveryTime" },
            { 1, "eFirePortOnce" },
            { 2, "eFireOnce" }
        };

        (*enum_map)["ZActBehaviorEntity.EMovementType"] = std::map<uint32_t, std::string>{
            { 0, "MT_WALK" },
            { 1, "MT_SNAP" },
            { 2, "MT_IGNORE_POSITION" }
        };

        (*enum_map)["ZPatrolBehaviorEntity.EMovementType"] = std::map<uint32_t, std::string>{
            { 0, "MT_WALK" },
            { 1, "MT_SNAP" },
            { 2, "MT_IGNORE_POSITION" }
        };

        (*enum_map)["EUIActionGroupIcon"] = std::map<uint32_t, std::string>{
            { 0, "EUIAGI_NoIcon" },
            { 1, "EUIAGI_GenericTool" },
            { 2, "EUIAGI_Crowbar" },
            { 3, "EUIAGI_Wrench" },
            { 4, "EUIAGI_Screwdriver" },
            { 5, "EUIAGI_ExplosiveDevice" },
            { 6, "EUIAGI_Poison" },
            { 7, "EUIAGI_Coin" },
            { 8, "EUIAGI_Lockpick" },
            { 9, "EUIAGI_LockpickElectic" },
            { 10, "EUIAGI_Card" },
            { 11, "EUIAGI_Key" },
            { 12, "EUIAGI_Password" },
            { 13, "EUIAGI_SAPIENZA_GolfBall" },
            { 14, "EUIAGI_SAPIENZA_ChemicalTube" },
            { 15, "EUIAGI_SAPIENZA_FlowBouquet" },
            { 16, "EUIAGI_SAPIENZA_Ammunitions" },
            { 17, "EUIAGI_RatFood" },
            { 18, "EUIAGI_Gunpowder" },
            { 19, "EUIAGI_Cannonball" },
            { 20, "EUIAGI_FuguFish" },
            { 21, "EUIAGI_CakeTopper" },
            { 22, "EUIAGI_Knife" },
            { 23, "EUIAGI_SpaghettiCan" },
            { 24, "EUIAGI_MAX" }
        };

        (*enum_map)["ESilenceRating"] = std::map<uint32_t, std::string>{
            { 0, "eSR_NotSilenced" },
            { 1, "eSR_Silenced" },
            { 2, "eSR_SuperSilenced" },
            { 3, "eSR_CompletelySilenced" }
        };

        (*enum_map)["GameLobbyState"] = std::map<uint32_t, std::string>{
            { 0, "GLS_None" },
            { 1, "GLS_InHud" },
            { 2, "GLS_CreatingLobby" },
            { 3, "GLS_JoiningLobby" },
            { 4, "GLS_ConnectToLobby" },
            { 5, "GLS_ConnectingLobby" },
            { 6, "GLS_InLobby" },
            { 7, "GLS_LeavingLobby" },
            { 8, "GLS_InGame" }
        };

        (*enum_map)["EVRConfigHeadAnchorMode"] = std::map<uint32_t, std::string>{
            { 0, "EVRCHAM_HeadBone" },
            { 1, "EVRCHAM_CapsuleBased" },
            { 2, "EVRCHAM_CapsuleGrid" },
            { 3, "EVRCHAM_LockPosition" },
            { 4, "EVRCHAM_KeepCurrent" }
        };

        (*enum_map)["EFilterMaskBit"] = std::map<uint32_t, std::string>{
            { 0, "eFilterMaskBit_ObjectCollision" },
            { 1, "eFilterMaskBit_OpaqueCollision" },
            { 2, "eFilterMaskBit_UNUSED_LAST" }
        };

        (*enum_map)["ECollisionPriority"] = std::map<uint32_t, std::string>{
            { 0, "ECOLLISIONPRIORITY_LOW" },
            { 1, "ECOLLISIONPRIORITY_NORMAL" },
            { 2, "ECOLLISIONPRIORITY_HIGH" },
            { 3, "ECOLLISIONPRIORITY_CRITICAL" }
        };

        (*enum_map)["ZActStateCondition.EState"] = std::map<uint32_t, std::string>{
            { 0, "MOVING" },
            { 1, "ENTERING" },
            { 2, "PLAYING" }
        };

        (*enum_map)["ELedgeDismountBehavior"] = std::map<uint32_t, std::string>{
            { 0, "eLDB_DontCare" },
            { 1, "eLDB_Stand" },
            { 2, "eLDB_Crouch" }
        };

        (*enum_map)["IContractObjective.Type"] = std::map<uint32_t, std::string>{
            { 0, "CONTRACT_OBJ_EVENT_BASED" },
            { 1, "CONTRACT_OBJ_SM_BASED" }
        };

        (*enum_map)["ZValueInt_Evaluation.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "EQUAL" },
            { 1, "NOT_EQUAL" },
            { 2, "LESS" },
            { 3, "LESS_OR_EQUAL" },
            { 4, "HIGHER" },
            { 5, "HIGHER_OR_EQUAL" }
        };

        (*enum_map)["IScatterContainerEntity.ECanvasSize"] = std::map<uint32_t, std::string>{
            { 0, "SIZE_128" },
            { 1, "SIZE_256" },
            { 2, "SIZE_512" },
            { 3, "SIZE_1024" },
            { 4, "SIZE_2048" },
            { 5, "SIZE_4096" }
        };

        (*enum_map)["ZMoveToOrder.EMoveSpeed"] = std::map<uint32_t, std::string>{
            { 0, "MS_AUTO" },
            { 1, "MS_SPRINT" },
            { 2, "MS_JOG" },
            { 3, "MS_WALK" }
        };

        (*enum_map)["ECCDecalEffect"] = std::map<uint32_t, std::string>{
            { 0, "eCCDecalEffect_None" },
            { 1, "eCCDecalEffect_Stab" },
            { 2, "eCCDecalEffect_Blunt1H" },
            { 3, "eCCDecalEffect_Blunt2H" },
            { 4, "eCCDecalEffect_Slash1H" },
            { 5, "eCCDecalEffect_Shatter" },
            { 6, "eCCDecalEffect_AxeCleave" },
            { 7, "eCCDecalEffect_AxePull" },
            { 8, "eCCDecalEffect_AxeSlitThroat" },
            { 9, "eCCDecalEffect_SlitThroat" },
            { 10, "eCCDecalEffect_FacePunch" },
            { 11, "eCCDecalEffect_Bruise" }
        };

        (*enum_map)["ZContractObjectiveHudHintEntity.EObjectiveHintIcon"] = std::map<uint32_t, std::string>{
            { 8, "eExclamationMark" },
            { 0, "eNone" },
            { 1, "eSuitcase" },
            { 3, "eObjective_A" },
            { 4, "eObjective_B" },
            { 5, "eObjective_C" },
            { 6, "eObjective_D" },
            { 7, "eInfoIcon" },
            { 9, "eIntelIcon" },
            { 10, "eDiscoveryIcon" },
            { 11, "eDiscoveryIcon_A" },
            { 12, "eDiscoveryIcon_B" },
            { 13, "eDiscoveryIcon_C" },
            { 14, "eDiscoveryIcon_A_Compleed" },
            { 15, "eDiscoveryIcon_B_Compleed" },
            { 16, "eDiscoveryIcon_C_Compleed" },
            { 17, "eMissionObjective" },
            { 18, "eExitMissionIcon" }
        };

        (*enum_map)["IScatterContainerEntity.ECanvasClearMode"] = std::map<uint32_t, std::string>{
            { 0, "CLEAR_ALL" },
            { 1, "CLEAR_INTENSITY" },
            { 2, "CLEAR_SPECIFICMATERIAL" },
            { 3, "CLEAR_ALLMATERIALS" },
            { 4, "CLEAR_SETINTENSITYVALUECLEARMATERIAL" },
            { 5, "CLEAR_SETINTENSITYVALUEKEEPMATERIAL" },
            { 6, "CLEAR_SETINTENSITYVALUEANDMATERIAL" },
            { 7, "CLEAR_SETMATERIALKEEPINTENSITYVALUE" }
        };

        (*enum_map)["ESpeechPriority"] = std::map<uint32_t, std::string>{
            { 0, "SP_AMBIENT" },
            { 1, "SP_ALERTED" },
            { 2, "SP_PAIN" },
            { 3, "SP_ALERTED_IMPORTANT" },
            { 4, "SP_COMBAT" },
            { 5, "SP_COMBAT_IMPORTANT" },
            { 6, "SP_DEATH" },
            { 7, "SP_MAX" },
            { 8, "SP_COUNT__" }
        };

        (*enum_map)["EActorRole"] = std::map<uint32_t, std::string>{
            { 0, "eActorRole_Default" },
            { 1, "eActorRole_Bodyguard" },
            { 2, "eActorRole_VIP" }
        };

        (*enum_map)["ECCWeaponAnimSet"] = std::map<uint32_t, std::string>{
            { 0, "AS_SLIT_THROAT_1H" },
            { 1, "AS_SWING_1H" },
            { 2, "AS_BASH_1H" },
            { 3, "AS_STAB_1H" },
            { 4, "AS_SYRINGE_1H" },
            { 5, "AS_SMASH_1H" },
            { 6, "AS_STRANGLE" },
            { 7, "AS_SWING_2H" },
            { 8, "AS_BASH_2H" },
            { 9, "AS_STAB_2H" },
            { 10, "AS_STRANGLE_2H" },
            { 11, "AS_SWORD_1H" },
            { 12, "AS_AXE" }
        };

        (*enum_map)["ECompiledBehaviorType"] = std::map<uint32_t, std::string>{
            { 0, "BT_ConditionScope" },
            { 1, "BT_Random" },
            { 2, "BT_Match" },
            { 3, "BT_Sequence" },
            { 4, "BT_Dummy" },
            { 5, "BT_Dummy2" },
            { 6, "BT_Error" },
            { 7, "BT_Wait" },
            { 8, "BT_WaitForStanding" },
            { 9, "BT_WaitBasedOnDistanceToTarget" },
            { 10, "BT_WaitForItemHandled" },
            { 11, "BT_AbandonOrder" },
            { 12, "BT_CompleteOrder" },
            { 13, "BT_PlayAct" },
            { 14, "BT_ConfiguredAct" },
            { 15, "BT_PlayReaction" },
            { 16, "BT_SimpleReaction" },
            { 17, "BT_SituationAct" },
            { 18, "BT_SituationApproach" },
            { 19, "BT_SituationGetHelp" },
            { 20, "BT_SituationFace" },
            { 21, "BT_SituationConversation" },
            { 22, "BT_Holster" },
            { 23, "BT_SpeakWait" },
            { 24, "BT_SpeakWaitWithFallbackIfAlone" },
            { 25, "BT_ConfiguredSpeak" },
            { 26, "BT_ConditionedConfiguredSpeak" },
            { 27, "BT_ConditionedConfiguredAct" },
            { 28, "BT_SpeakCustomOrDefaultDistractionAckSoundDef" },
            { 29, "BT_SpeakCustomOrDefaultDistractionInvestigationSoundDef" },
            { 30, "BT_SpeakCustomOrDefaultDistractionStndSoundDef" },
            { 31, "BT_Pickup" },
            { 32, "BT_Drop" },
            { 33, "BT_PlayConversation" },
            { 34, "BT_PlayAnimation" },
            { 35, "BT_MoveToLocation" },
            { 36, "BT_MoveToTargetKnownPosition" },
            { 37, "BT_MoveToTargetActualPosition" },
            { 38, "BT_MoveToInteraction" },
            { 39, "BT_MoveToNPC" },
            { 40, "BT_FollowTargetKnownPosition" },
            { 41, "BT_FollowTargetActualPosition" },
            { 42, "BT_PickUpItem" },
            { 43, "BT_GrabItem" },
            { 44, "BT_PutDownItem" },
            { 45, "BT_Search" },
            { 46, "BT_LimitedSearch" },
            { 47, "BT_MoveTo" },
            { 48, "BT_Reposition" },
            { 49, "BT_SituationMoveTo" },
            { 50, "BT_FormationMove" },
            { 51, "BT_SituationJumpTo" },
            { 52, "BT_AmbientWalk" },
            { 53, "BT_AmbientStand" },
            { 54, "BT_CrowdAmbientStand" },
            { 55, "BT_AmbientItemUse" },
            { 56, "BT_AmbientLook" },
            { 57, "BT_Act" },
            { 58, "BT_Patrol" },
            { 59, "BT_MoveToPosition" },
            { 60, "BT_AlertedStand" },
            { 61, "BT_AlertedDebug" },
            { 62, "BT_AttentionToPerson" },
            { 63, "BT_StunnedByFlashGrenade" },
            { 64, "BT_CuriousIdle" },
            { 65, "BT_InvestigateWeapon" },
            { 66, "BT_DeliverWeapon" },
            { 67, "BT_RecoverUnconscious" },
            { 68, "BT_GetOutfit" },
            { 69, "BT_RadioCall" },
            { 70, "BT_EscortOut" },
            { 71, "BT_StashItem" },
            { 72, "BT_CautiousSearchPosition" },
            { 73, "BT_LockdownWarning" },
            { 74, "BT_WakeUpUnconscious" },
            { 75, "BT_DeadBodyInvestigate" },
            { 76, "BT_GuardDeadBody" },
            { 77, "BT_DragDeadBody" },
            { 78, "BT_CuriousBystander" },
            { 79, "BT_DeadBodyBystander" },
            { 80, "BT_StandOffArrest" },
            { 81, "BT_StandOffReposition" },
            { 82, "BT_StandAndAim" },
            { 83, "BT_CloseCombat" },
            { 84, "BT_MoveToCloseCombat" },
            { 85, "BT_MoveAwayFromCloseCombat" },
            { 86, "BT_CoverFightSeasonTwo" },
            { 87, "BT_ShootFromPosition" },
            { 88, "BT_StandAndShoot" },
            { 89, "BT_CheckLastPosition" },
            { 90, "BT_ProtoSearchIdle" },
            { 91, "BT_ProtoApproachSearchArea" },
            { 92, "BT_ProtoSearchPosition" },
            { 93, "BT_ShootTarget" },
            { 94, "BT_TriggerAlarm" },
            { 95, "BT_MoveInCover" },
            { 96, "BT_MoveToCover" },
            { 97, "BT_HomeAttackOrigin" },
            { 98, "BT_Shoot" },
            { 99, "BT_Aim" },
            { 100, "BT_MoveToRandomNeighbourNode" },
            { 101, "BT_MoveToRandomNeighbourNodeAiming" },
            { 102, "BT_MoveToAndPlayCombatPositionAct" },
            { 103, "BT_MoveToAimingAndPlayCombatPositionAct" },
            { 104, "BT_PlayJumpyReaction" },
            { 105, "BT_JumpyInvestigation" },
            { 106, "BT_AgitatedPatrol" },
            { 107, "BT_AgitatedGuard" },
            { 108, "BT_HeroEscort" },
            { 109, "BT_Escort" },
            { 110, "BT_ControlledFormationMove" },
            { 111, "BT_EscortSearch" },
            { 112, "BT_LeadEscort" },
            { 113, "BT_LeadEscort2" },
            { 114, "BT_AimReaction" },
            { 115, "BT_FollowHitman" },
            { 116, "BT_RideTheLightning" },
            { 117, "BT_Scared" },
            { 118, "BT_Flee" },
            { 119, "BT_AgitatedBystander" },
            { 120, "BT_SentryFrisk" },
            { 121, "BT_SentryIdle" },
            { 122, "BT_SentryWarning" },
            { 123, "BT_SentryCheckItem" },
            { 124, "BT_VIPScared" },
            { 125, "BT_VIPSafeRoomTrespasser" },
            { 126, "BT_DefendVIP" },
            { 127, "BT_CautiousVIP" },
            { 128, "BT_CautiousGuardVIP" },
            { 129, "BT_InfectedConfused" },
            { 130, "BT_EnterInfected" },
            { 131, "BT_CureInfected" },
            { 132, "BT_SickActInfected" },
            { 133, "BT_Smart" },
            { 134, "BT_Controlled" },
            { 135, "BT_SpeakTest" },
            { 136, "BT_Conversation" },
            { 137, "BT_RunToHelp" },
            { 138, "BT_WaitForDialog" },
            { 139, "BT_WaitForConfiguredAct" },
            { 140, "BT_TestFlashbangGrenadeThrow" },
            { 141, "BT_BEHAVIORS_END" },
            { 142, "BT_RenewEvent" },
            { 143, "BT_ExpireEvent" },
            { 144, "BT_ExpireEvents" },
            { 145, "BT_SetEventHandled" },
            { 146, "BT_RenewSharedEvent" },
            { 147, "BT_ExpireSharedEvent" },
            { 148, "BT_ExpireAllEvents" },
            { 149, "BT_CreateOrJoinSituation" },
            { 150, "BT_JoinSituation" },
            { 151, "BT_ForceActorToJoinSituation" },
            { 152, "BT_JoinSituationWithActor" },
            { 153, "BT_LeaveSituation" },
            { 154, "BT_Escalate" },
            { 155, "BT_GotoPhase" },
            { 156, "BT_RenewGoal" },
            { 157, "BT_ExpireGoal" },
            { 158, "BT_RenewGoalOf" },
            { 159, "BT_ExpireGoalOf" },
            { 160, "BT_SetTension" },
            { 161, "BT_TriggerSpotted" },
            { 162, "BT_CopyKnownLocation" },
            { 163, "BT_UpdateKnownLocation" },
            { 164, "BT_TransferKnownObjectPositions" },
            { 165, "BT_WitnessAttack" },
            { 166, "BT_Speak" },
            { 167, "BT_StartDynamicEnforcer" },
            { 168, "BT_StopDynamicEnforcer" },
            { 169, "BT_StartRangeBasedDynamicEnforcer" },
            { 170, "BT_StopRangeBasedDynamicEnforcerForLocation" },
            { 171, "BT_StopRangeBasedDynamicEnforcer" },
            { 172, "BT_SetDistracted" },
            { 173, "BT_IgnoreAllDistractionsExceptTheNewest" },
            { 174, "BT_IgnoreDistractions" },
            { 175, "BT_PerceptibleEntityNotifyWillReact" },
            { 176, "BT_PerceptibleEntityNotifyReacted" },
            { 177, "BT_PerceptibleEntityNotifyInvestigating" },
            { 178, "BT_PerceptibleEntityNotifyInvestigated" },
            { 179, "BT_PerceptibleEntityNotifyTerminate" },
            { 180, "BT_LeaveDistractionAssistantRole" },
            { 181, "BT_LeaveDistractionAssitingGuardRole" },
            { 182, "BT_RequestSuitcaseAssistanceOverRadio" },
            { 183, "BT_RequestSuitcaseAssistanceFaceToFace" },
            { 184, "BT_ExpireArrestReasons" },
            { 185, "BT_SetDialogSwitch_NPCID" },
            { 186, "BT_InfectedAssignToFollowPlayer" },
            { 187, "BT_InfectedRemoveFromFollowPlayer" },
            { 188, "BT_Log" },
            { 189, "BT_COMMANDS_END" },
            { 190, "BT_Invalid" }
        };

        (*enum_map)["ZWaveformGeneratorEntity.ECurveType"] = std::map<uint32_t, std::string>{
            { 0, "CURVE_TYPE_SINE" },
            { 1, "CURVE_TYPE_SQUARE" },
            { 2, "CURVE_TYPE_TRIANGLE" },
            { 3, "CURVE_TYPE_SAWTOOTH" },
            { 4, "CURVE_TYPE_REVERSE_SAWTOOTH" }
        };

        (*enum_map)["EItemHUDType"] = std::map<uint32_t, std::string>{
            { 0, "EIHT_None" },
            { 1, "EIHT_GhostItem" },
            { 2, "EIHT_OutbreakHealingItem" }
        };

        (*enum_map)["ZDetectedInPrivateGroup.EInvestigateGroupState"] = std::map<uint32_t, std::string>{
            { 0, "IGS_Delay" },
            { 1, "IGS_Talk" },
            { 2, "IGS_Move" },
            { 3, "IGS_Wait" },
            { 4, "IGS_Completed" },
            { 5, "IGS_Max" }
        };

        (*enum_map)["ZActorPickerFilterKeyword.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" }
        };

        (*enum_map)["ZConditionListEntity.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL_TRUE" },
            { 1, "ANY_TRUE" }
        };

        (*enum_map)["ENetworkSystemID"] = std::map<uint32_t, std::string>{
            { 0, "NSID_UNDEFINED" },
            { 1, "NSID_DEBUG_SWAP_PLAYER_RPC" },
            { 2, "NSID_ROUNTTRIPTEST_REQUEST_RPC" },
            { 3, "NSID_ROUNTTRIPTEST_RESOLVE_RPC" },
            { 4, "NSID_CONNECTION_LOCALLY_DEREFERENCE_UPDATE_RPC" },
            { 5, "NSID_CONNECTION_READY_FOR_REPLICATION_RPC" },
            { 6, "NSID_NETPLAYER_LOGIN_RPC" },
            { 7, "NSID_NETPLAYER_LOGIN_COLOR_SELECTION_RPC" },
            { 8, "NSID_NETPLAYER_REPLICA" },
            { 9, "NSID_NETGAME_REPLICA" },
            { 10, "NSID_PLAYERREGISTRY_REPLICA" },
            { 11, "NSID_NETPLAYER_CONTROLLER_REPLICA" },
            { 12, "NSID_SYNCH_POINT_PLAYER_REPLICA" },
            { 13, "NSID_SYNCH_POINT_REPLICA" },
            { 14, "NSID_GAME_CHAT_RPC" },
            { 15, "NSID_NETWORK_CORE_SYSTEMS_END" },
            { 16, "NSID_PLAYER_INPUT_RPC" },
            { 17, "NSID_PLAYER_INPUT_REPLICA" },
            { 18, "NSID_GENERAL_ENTITY_PROPERTY_REPLICA" },
            { 19, "NSID_ANIMATED_ACTOR_RPC" },
            { 20, "NSID_CAMERA_REPLICA" },
            { 21, "NSID_GENERAL_PIN_SIGNAL_RPC" },
            { 22, "NSID_PIN_SIGNAL_RPC" },
            { 23, "NSID_NPC_DIALOGUE_RPC" },
            { 24, "NSID_GAME_STATE_REPLICA" },
            { 25, "NSID_HERO_STATE_REPLICA" },
            { 26, "NSID_NPC_STATE_REPLICA" },
            { 27, "NSID_ANIMATION_REPLICA" },
            { 28, "NSID_DESTRUCTIBLE_INTERACTIONS_RPC" },
            { 29, "NSID_ACT_REQUEST_RPC" },
            { 30, "NSID_CHARACTERSPEAK_REPLICA" },
            { 31, "NSID_ITEM_WEAPON_RPC" },
            { 32, "NSID_ITEM_REPLICA" },
            { 33, "NSID_ACCESSORY_ITEM_REPLICA" },
            { 34, "NSID_BULLET_IMPACT_RPC" },
            { 35, "NSID_NETWORKED_TIME_CONTROL_RPC" },
            { 36, "NSID_REQUEST_ACTION_SYCHRONIZATION_RPC" },
            { 37, "NSID_PHYSICS_SYSTEM_REPLICA" },
            { 38, "NSID_PHYSICS_OBJECT_REPLICA" },
            { 39, "NSID_WATER_SPLASH_GENERATOR_RPC" },
            { 40, "NSID_PROJECTILE_HIT_INFO_RPC" },
            { 41, "NSID_PROJECTILE_HIT_EVENT_RPC" },
            { 42, "NSID_INTERACTION_SUBACTION_EXECUTE_REQUEST" },
            { 43, "NSID_INTERACTION_SUBACTION_EXECUTE_RESOLVE" },
            { 44, "NSID_INTERACTION_SUBACTION_EXECUTE_SIGNAL_RESOLVE" },
            { 45, "NSID_INTERACTION_INPUT_REQUEST_RESOLVE" },
            { 46, "NSID_SUBCONTROLLER_REPLICA" },
            { 47, "NSID_CONTRACT_EVENT_REPLICA" },
            { 48, "NSID_NETWORK_SYNCHRONOUS_MULTIPLAYER_END" },
            { 49, "NSID_SNIPERS_CHALLENGE_SCORING_EVENT_REPLICA" },
            { 50, "NSID_CHARACTER_GHOST_REPLICA" },
            { 51, "NSID_PIP_GHOST_REPLICA" },
            { 52, "NSID_SPATIAL_GHOST_REPLICA" },
            { 53, "NSID_VS_TARGET_PICKER_REPLICA" },
            { 54, "NSID_VS_KILL_RPC" },
            { 55, "NSID_VS_KILL_CONFIRM_RPC" },
            { 56, "NSID_VS_CLIENT_DEAD_RPC" },
            { 57, "NSID_VS_SETUP_SYNC_REPLICA" },
            { 58, "NSID_VS_PIN_SIGNAL_RPC" },
            { 59, "NSID_VS_ENTITY_PROPERTY_REPLICA" },
            { 60, "NSID_VS_GENERIC_EVENT_RPC" },
            { 61, "NSID_VS_PENALTY_KILL_RPC" },
            { 62, "NSID_VS_ITEM_PICKUP_REQUEST_RPC" },
            { 63, "NSID_VS_ITEM_PICKUP_RESPONSE_RPC" },
            { 64, "NSID_VS_OUTFIT_PICK_REQUEST_RPC" },
            { 65, "NSID_VS_OUTFIT_PICK_RESPONSE_RPC" },
            { 66, "NSID_VS_PICKUP_SPAWNER_REPLICA" },
            { 67, "NSID_VS_KILL_EVENT_RPC" },
            { 68, "NSID_VS_PRE_SCORE_TIMER_RPC" },
            { 69, "NSID_VS_TARGET_PACIFY_RPC" },
            { 70, "NSID_VS_CONFIRM_TARGET_PACIFY_RPC" },
            { 71, "NSID_VS_TARGET_PACIFIED_CONFIRMED_RPC" },
            { 72, "NSID_MAX" }
        };

        (*enum_map)["ZHM5FaceFXReactionEventConsumer.EEvent"] = std::map<uint32_t, std::string>{
            { 0, "eHitByBullet" },
            { 1, "eFireRegularWeapon" },
            { 2, "eReloadRegularWeapon" },
            { 3, "eFireHeavyWeapon" },
            { 4, "eReloadHeavyWeapon" },
            { 5, "eCCAttacking" },
            { 6, "eCCGettingHit" },
            { 7, "eCoverDodgebulletLeft" },
            { 8, "eCoverDodgebulletRight" },
            { 9, "eReactToExplosion" }
        };

        (*enum_map)["ZDebugSpatialEntity.EDrawLayer"] = std::map<uint32_t, std::string>{
            { 0, "DL_DEFAULT" },
            { 1, "DL_LIGHT" },
            { 2, "DL_PARTICLES" },
            { 3, "DL_PARTITIONING" },
            { 4, "DL_DECALS" },
            { 5, "DL_CROWD" },
            { 6, "DL_PHYSICS" },
            { 7, "DL_HERO" },
            { 8, "DL_AI" },
            { 9, "DL_AI_GRID" },
            { 10, "DL_AI_SITUATION" },
            { 11, "DL_NPC_LOCOMOTION" },
            { 12, "DL_GAME" },
            { 13, "DL_ALIGNMENT" },
            { 14, "DL_ENGINE" },
            { 15, "DL_SOUND" },
            { 16, "DL_ANIMATION" },
            { 17, "DL_CLOTH" },
            { 18, "DL_SOUND_PARTITIONING" },
            { 19, "DL_UI" }
        };

        (*enum_map)["EIntelTensionLevel"] = std::map<uint32_t, std::string>{
            { 0, "eITL_Undefined" },
            { 1, "eITL_Ambient" },
            { 2, "eITL_Agitated" },
            { 3, "eITL_Searching" },
            { 4, "eITL_AlertedLow" },
            { 5, "eITL_AlertedHigh" },
            { 6, "eITL_Hunting" },
            { 7, "eITL_Arrest" },
            { 8, "eITL_Combat" }
        };

        (*enum_map)["CrowdUtil.ECrowdSide"] = std::map<uint32_t, std::string>{
            { 0, "LEFT" },
            { 1, "RIGHT" }
        };

        (*enum_map)["ESentryActionPrompt"] = std::map<uint32_t, std::string>{
            { 0, "eSAP_None" },
            { 1, "eSAP_Frisk" },
            { 2, "eSAP_ShowItem" },
            { 3, "eSAP_Max" }
        };

        (*enum_map)["EInventoryConfigCustomRule"] = std::map<uint32_t, std::string>{
            { 0, "EICCR_None" },
            { 1, "EICCR_Surrender" },
            { 2, "EICCR_TempDropLeftHandItem" }
        };

        (*enum_map)["ZItemSpawner.EPhysicsMode"] = std::map<uint32_t, std::string>{
            { 0, "EPM_DEFINED_BY_ITEM" },
            { 1, "EPM_DYNAMIC" },
            { 2, "EPM_SLEEPING" },
            { 3, "EPM_KINEMATIC" }
        };

        (*enum_map)["ICameraEntity.EProjectionType"] = std::map<uint32_t, std::string>{
            { 0, "ePerspectiveRH" },
            { 1, "eOrtogonalRH" },
            { 2, "eCustom" }
        };

        (*enum_map)["EBIEventTypes"] = std::map<uint32_t, std::string>{
            { 0, "eBIL_HM_HitNPC" },
            { 1, "eBIL_HM_HitNPCKilled" },
            { 2, "eBIL_HM_HitNPCHeadShot" },
            { 3, "eBIL_HM_HitNPCCloseCombatShot" },
            { 4, "eBIL_NPC_HitHM" },
            { 5, "eBIL_Geometry" }
        };

        (*enum_map)["EInteractionInputType"] = std::map<uint32_t, std::string>{
            { 0, "EIIT_UNKNOWN" },
            { 1, "EIIT_PRESS" },
            { 2, "EIIT_HOLD" },
            { 3, "EIIT_HOLD_DOWN" },
            { 4, "EIIT_REPEAT" },
            { 5, "EIIT_GUIDE" }
        };

        (*enum_map)["ZDeadBodySituation.ESituationFlavor"] = std::map<uint32_t, std::string>{
            { 0, "SF_None" },
            { 1, "SF_Unconscious" },
            { 2, "SF_DeadBody" },
            { 3, "SF_Accident" }
        };

        (*enum_map)["ZSetVisibleEntity.StartBehavior"] = std::map<uint32_t, std::string>{
            { 0, "SB_Nothing" },
            { 1, "SB_MakeVisible" },
            { 2, "SB_MakeInvisible" }
        };

        (*enum_map)["ZBoxReflectionEntity.EBoundsType"] = std::map<uint32_t, std::string>{
            { 0, "eBox" },
            { 1, "eRoom" }
        };

        (*enum_map)["ERatingTitleRequirement"] = std::map<uint32_t, std::string>{
            { 0, "ERatingTitleRequirement_Optional" },
            { 1, "ERatingTitleRequirement_Required" },
            { 2, "ERatingTitleRequirement_Fails" }
        };

        (*enum_map)["EVRIKElement"] = std::map<uint32_t, std::string>{
            { 0, "EVRIKE_LeftHand" },
            { 1, "EVRIKE_RightHand" },
            { 2, "EVRIKE_Pelvis" },
            { 3, "EVRIKE_Spine" }
        };

        (*enum_map)["STestStruct.ETestEnum"] = std::map<uint32_t, std::string>{
            { 3, "ETomato" },
            { 5, "EPotato" }
        };

        (*enum_map)["ZHM5BodySoundEventConsumer.EAnimSoundBody"] = std::map<uint32_t, std::string>{
            { 0, "eHM5AnimSoundBody_Buttocks" },
            { 1, "eHM5AnimSoundBody_Back" },
            { 2, "eHM5AnimSoundBody_Head" },
            { 3, "eHM5AnimSoundBody_Knee_L" },
            { 4, "eHM5AnimSoundBody_Knee_R" },
            { 5, "eHM5AnimSoundBody_Elbow_L" },
            { 6, "eHM5AnimSoundBody_Elbow_R" },
            { 7, "eHM5AnimSoundBody_Hand_L" },
            { 8, "eHM5AnimSoundBody_Hand_R" },
            { 9, "eHM5AnimSoundBody_Foot_L" },
            { 10, "eHM5AnimSoundBody_Foot_R" },
            { 11, "eHM5AnimSoundBody_Shoulder_L" },
            { 12, "eHM5AnimSoundBody_Shoulder_R" },
            { 13, "eHM5AnimSoundBody_RollFwd" },
            { 14, "eHM5AnimSoundBody_RollSide" }
        };

        (*enum_map)["ECCNodeSubtype"] = std::map<uint32_t, std::string>{
            { 0, "eCCNodeSubtype_Left" },
            { 1, "eCCNodeSubtype_Right" },
            { 2, "eCCNodeSubtype_Front" },
            { 3, "eCCNodeSubtype_Back" },
            { 4, "eCCNodeSubtype_StairsAbove" },
            { 5, "eCCNodeSubtype_StairsBelow" },
            { 6, "eCCNodeSubtype_StairsAbove_Back" },
            { 7, "eCCNodeSubtype_StairsBelow_Back" },
            { 8, "eCCNodeSubtype_Front_Back" },
            { 9, "eCCNodeSubtype_Count" }
        };

        (*enum_map)["ZPIPMessageEntity.EIcon"] = std::map<uint32_t, std::string>{
            { 0, "IconStart" },
            { 1, "MagnifyingGlass" },
            { 2, "ArrowRight" },
            { 3, "ExclamationMark" },
            { 4, "Target" },
            { 5, "SurveillanceCamera" },
            { 6, "Concealed" },
            { 7, "QuestionMark" },
            { 8, "IconEnd" }
        };

        (*enum_map)["EWaypointRotationAlignment"] = std::map<uint32_t, std::string>{
            { 0, "RA_NONE" },
            { 1, "RA_LOOSE" },
            { 2, "RA_EXACT" }
        };

        (*enum_map)["EHintMessageSoundType"] = std::map<uint32_t, std::string>{
            { 0, "EHintMessageSound_None" },
            { 1, "EHintMessageSound_GeneralHint" },
            { 2, "EHintMessageSound_UsefulItem" },
            { 3, "EHintMessageSound_NeedsItem" },
            { 4, "EHintMessageSound_ObjectiveExit" },
            { 5, "EHintMessageSound_Target" },
            { 6, "EHintMessageSound_AccidentKill" },
            { 7, "EHintMessageSound_Trespassing" },
            { 8, "EHintMessageSound_CanBeTurnedOn" },
            { 9, "EHintMessageSound_CanBeTurnedOff" },
            { 10, "EHintMessageSound_Agility" }
        };

        (*enum_map)["EAsyncRaycastsGroup"] = std::map<uint32_t, std::string>{
            { 0, "eAsyncRaycasts_Gameplay" },
            { 1, "eAsyncRaycasts_ParticlesSoundCloth" },
            { 2, "eAsyncRaycasts_UNUSED_LAST" }
        };

        (*enum_map)["EKnownEntityType"] = std::map<uint32_t, std::string>{
            { 0, "KET_UNKNOWN" },
            { 1, "KET_HITMAN" },
            { 2, "KET_ACTOR" },
            { 3, "KET_ITEM" },
            { 4, "KET_LOCATION" },
            { 5, "KET_OBJECT" },
            { 6, "KET_COVER" },
            { 7, "KET_PERCEPTIBLE" },
            { 8, "KET_TEMPCROWDBODY" }
        };

        (*enum_map)["ZActorAccessoryItemCondition.EConditionTypes"] = std::map<uint32_t, std::string>{
            { 0, "ECT_HasInPool" },
            { 1, "ECT_HasAttached" }
        };

        (*enum_map)["ZHM5DynamicRayCastEntity.ECollideType"] = std::map<uint32_t, std::string>{
            { 0, "eAll" },
            { 1, "eStaticOnly" },
            { 2, "eDynamicOnly" },
            { 3, "eBaseCharacter" },
            { 4, "eHitman" },
            { 5, "eActor" }
        };

        (*enum_map)["ZCausalNodeEntity.ECauseEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" }
        };

        (*enum_map)["ESoundGateFlags"] = std::map<uint32_t, std::string>{
            { 1, "SOUNDGATE_FLAGS_AMBIENCE" },
            { 2, "SOUNDGATE_FLAGS_OCCLUSION" },
            { 255, "SOUNDGATE_FLAGS_ALL" }
        };

        (*enum_map)["CrowdUtil.EGenderReq"] = std::map<uint32_t, std::string>{
            { 0, "eGender_Any" },
            { 1, "eGender_Male" },
            { 2, "eGender_Female" }
        };

        (*enum_map)["EInteractionIndicatorState"] = std::map<uint32_t, std::string>{
            { 0, "EIIS_AVAILABLE" },
            { 1, "EIIS_COLLAPSED" },
            { 2, "EIIS_ACTIVATING" },
            { 3, "EIIS_NOTAVAILABLE" }
        };

        (*enum_map)["EActorLookAtPriority"] = std::map<uint32_t, std::string>{
            { 0, "eALAPriority_Ambient" },
            { 1, "eALAPriority_AmbientHigh" },
            { 2, "eALAPriority_Alert" },
            { 3, "eALAPriority_AlertHigh" },
            { 4, "eALAPriority_Hunt" },
            { 5, "eALAPriority_HuntHigh" },
            { 6, "eALAPriority_Combat" },
            { 7, "eALAPriority_CombatHigh" }
        };

        (*enum_map)["ZCameraPlaneTriggerEntity.EAlignment"] = std::map<uint32_t, std::string>{
            { 0, "XY" },
            { 1, "XZ" },
            { 2, "YZ" }
        };

        (*enum_map)["ECharacterAnimEventState"] = std::map<uint32_t, std::string>{
            { 0, "eES_None" },
            { 1, "eES_Pending" },
            { 2, "eES_Completed" },
            { 3, "eES_TimedOut" }
        };

        (*enum_map)["ZFriskSuspectGroup.EHitmanGreetState"] = std::map<uint32_t, std::string>{
            { 0, "HGS_NotGreeted" },
            { 1, "HGS_Greeted" },
            { 2, "HGS_ShrugOff" }
        };

        (*enum_map)["SDoorSoundDefs.EDefinition"] = std::map<uint32_t, std::string>{
            { 0, "DoorOpen" },
            { 1, "DoorClose" },
            { 2, "DoorSlam" },
            { 3, "DoorOpenStop" }
        };

        (*enum_map)["ZActorPickerEffectDrama.EEffectPhaseAction"] = std::map<uint32_t, std::string>{
            { 0, "EPA_START" },
            { 1, "EPA_LEAVE" }
        };

        (*enum_map)["ZAudioSequenceTrack.EPlaybackTarget"] = std::map<uint32_t, std::string>{
            { 0, "eNone" },
            { 1, "eTargetEntityAudioPlayer" },
            { 2, "eTargetEntityEmitter" },
            { 3, "ePreviewEmitter" }
        };

        (*enum_map)["EItemModifierType"] = std::map<uint32_t, std::string>{
            { 0, "MODIFIER_NONE" },
            { 1, "MODIFIER_THROW" },
            { 2, "MODIFIER_CARRY" },
            { 3, "MODIFIER_AMMO" },
            { 4, "MODIFIER_PRECISION" },
            { 5, "MODIFIER_DAMAGE" },
            { 6, "MODIFIER_IMPACT" },
            { 7, "MODIFIER_EXPLOSIVE" },
            { 8, "MODIFIER_RANGE" },
            { 9, "MODIFIER_ZOOM" },
            { 10, "MODIFIER_SUPPRESSOR" },
            { 11, "MODIFIER_RECOIL" },
            { 12, "MODIFIER_RATEOFFIRE" },
            { 13, "MODIFIER_SCOPEBOBBING" },
            { 14, "MODIFIER_MUZZLEVELOCITY" },
            { 15, "MODIFIER_KNOCKDOWN" },
            { 16, "MODIFIER_FULLAUTO" },
            { 17, "MODIFIER_PRECISIONSHOT" },
            { 18, "MODIFIER_SCOPETIMESLOWDOWN" },
            { 19, "MODIFIER_STYLE" },
            { 20, "MODIFIER_RELOAD" },
            { 21, "MODIFIER_THRESHOLD" },
            { 22, "MODIFIER_PERK" },
            { 23, "MODIFIER_MAGAZINE" },
            { 24, "MODIFIER_BURST" }
        };

        (*enum_map)["EAISituation"] = std::map<uint32_t, std::string>{
            { 0, "AIS_GENERIC" },
            { 1, "AIS_SPECIAL" },
            { 2, "AIS_SENSOR" },
            { 3, "AIS_TRESPASSING" },
            { 4, "AIS_STANDOFF" },
            { 5, "AIS_SMUGGLE" },
            { 6, "AIS_GET_HELP" },
            { 7, "AIS_CONVERSTION_GROUP" },
            { 8, "AIS_PROTO_COMBAT" },
            { 9, "AIS_SENTRY" },
            { 10, "AIS_LEAD_ESCORT" },
            { 11, "AIS_INVESTIGATE_WEAPON" },
            { 12, "AIS_INVESTIGATE_STANDING" },
            { 13, "AIS_INVESTIGATE_CURIOUS" },
            { 14, "AIS_INVESTIGATE_CAUTIOUS" },
            { 15, "AIS_HERO_ESCORT" },
            { 16, "AIS_EVACUATE" },
            { 17, "AIS_ESCORT" },
            { 18, "AIS_ENTOURAGE" },
            { 19, "AIS_DRAMA" },
            { 20, "AIS_DISGUISE" },
            { 21, "AIS_DEAD_BODY" },
            { 22, "AIS_COMBAT" },
            { 23, "AIS_CLOSE_COMBAT" },
            { 24, "AIS_AVOID_EXPLOSION" },
            { 25, "AIS_ACCIDENT" },
            { 26, "AIS_PRIVATE" },
            { 27, "AIS_GUARD_BODY" },
            { 28, "AIS_RECOVER_UNC" },
            { 29, "AIS_SNIPER" }
        };

        (*enum_map)["EScreenPlayState"] = std::map<uint32_t, std::string>{
            { 0, "State_Stopped" },
            { 1, "State_Running" },
            { 2, "State_Resuming" },
            { 3, "State_Pausing" },
            { 4, "State_Paused" },
            { 5, "State_Done" },
            { 6, "State_Terminated" }
        };

        (*enum_map)["EDramaSituationDescriptors"] = std::map<uint32_t, std::string>{
            { 64, "eDSD_ALERT" },
            { 0, "eDSD_NONE" },
            { 128, "eDSD_PARANOID" },
            { 32, "eDSD_DEATH" },
            { 16, "eDSD_SICK" },
            { 8, "eDSD_URGENT" },
            { 1, "eDSD_HERO" },
            { 2, "eDSD_CONVERSATION" },
            { 4, "eDSD_DISTRACTION" },
            { 256, "eDSD_SCARY" },
            { 512, "eDSD_TRIVIAL" },
            { 1024, "eDSD_PREOCCUPIED" },
            { 2048, "eDSD_PRIVATE" }
        };

        (*enum_map)["ERagdollPart"] = std::map<uint32_t, std::string>{
            { 0, "ERAGDOLLPART_NONE" },
            { 1, "ERAGDOLLPART_BODY" },
            { 2, "ERAGDOLLPART_HEAD" },
            { 3, "ERAGDOLLPART_HAND" },
            { 4, "ERAGDOLLPART_FOOT" }
        };

        (*enum_map)["EOpportunityState"] = std::map<uint32_t, std::string>{
            { 1, "OS_TRACKED" },
            { 2, "OS_ENABLED" },
            { 4, "OS_UNLOCKED" },
            { 8, "OS_REVEAL_PENDING" }
        };

        (*enum_map)["EOrderCompletionStatus"] = std::map<uint32_t, std::string>{
            { 0, "OCS_Undetermined" },
            { 1, "OCS_Succeeded" },
            { 2, "OCS_Interrupted" },
            { 3, "OCS_Blocked" },
            { 4, "OCS_Failed" }
        };

        (*enum_map)["ZHM5ContextActionEntity.EInteraction"] = std::map<uint32_t, std::string>{
            { 0, "eIT_RotateLeftStick" },
            { 1, "eIT_AutoComplete" },
            { 2, "eIT_NoInteraction" }
        };

        (*enum_map)["EOutbreakInfectionStage"] = std::map<uint32_t, std::string>{
            { 0, "eOIS_Stage1" },
            { 1, "eOIS_Stage2" },
            { 2, "eOIS_Stage3" }
        };

        (*enum_map)["eActionRewardType"] = std::map<uint32_t, std::string>{
            { 0, "AR_None" },
            { 1, "AR_QuestItem" },
            { 2, "AR_Keycard" },
            { 3, "AR_Key" }
        };

        (*enum_map)["ZAT2Controller.EFootstepsMovementType"] = std::map<uint32_t, std::string>{
            { 0, "MOVEMENT_WALKING" },
            { 1, "MOVEMENT_WALKING_SLIDING" },
            { 2, "MOVEMENT_RUNNING" },
            { 3, "MOVEMENT_STANDING" }
        };

        (*enum_map)["ZMoveToPositionBehaviorEntity.EMovementType"] = std::map<uint32_t, std::string>{
            { 0, "MT_WALK" },
            { 1, "MT_SNAP" },
            { 2, "MT_IGNORE_POSITION" }
        };

        (*enum_map)["ZHM5ForceCover.EFaceDirection"] = std::map<uint32_t, std::string>{
            { 0, "eFaceLeft" },
            { 1, "eFaceRight" }
        };

        (*enum_map)["AudioCurve"] = std::map<uint32_t, std::string>{
            { 0, "AudioCurve_Log3" },
            { 1, "AudioCurve_Sine" },
            { 2, "AudioCurve_Log1" },
            { 3, "AudioCurve_InvSCurve" },
            { 4, "AudioCurve_Linear" },
            { 5, "AudioCurve_SCurve" },
            { 6, "AudioCurve_Exp1" },
            { 7, "AudioCurve_SineRecip" },
            { 8, "AudioCurve_Exp3" },
            { 9, "AudioCurve_LastFadeCurve" },
            { 10, "AudioCurve_Constant" }
        };

        (*enum_map)["EActivationPriority"] = std::map<uint32_t, std::string>{
            { 0, "eActivatable_First" },
            { 1, "eActivatable_PlayModeAddedPhysics" },
            { 2, "eActivatable_DestructiblePhysics" },
            { 3, "eActivatable_PhysicsWind" },
            { 4, "eActivatable_Physics" },
            { 5, "eActivatable_PhysicsDone" },
            { 6, "eActivatable_Keywords" },
            { 7, "eActivatable_EventChannel" },
            { 8, "eActivatable_Items" },
            { 9, "eActivatable_Actor" },
            { 10, "eActivatable_Hitman" },
            { 11, "eActivatable_AnimPlayer" },
            { 12, "eActivatable_Sequence" },
            { 13, "eActivatable_SpawnPoint" },
            { 14, "eActivatable_CoverPlane" },
            { 15, "eActivatable_GuardPoint" },
            { 16, "eActivatable_Guide" },
            { 17, "eActivatable_CombatAct" },
            { 18, "eActivatable_CombatAttractor" },
            { 19, "eActivatable_SequenceController" },
            { 20, "eActivatable_KnownEntityAspects" },
            { 21, "eActivatable_AIReasoningGrid" },
            { 22, "eActivatable_HM5Zone" },
            { 23, "eActivatable_Crowds" },
            { 24, "eActivatable_ChildNetworkAct" },
            { 25, "eActivatable_Door" },
            { 26, "eActivatable_UI_Setup" },
            { 27, "eActivatable_NormalGameplay" },
            { 28, "eActivatable_NormalGameplay_Condition" },
            { 29, "eActivatable_NormalGameplay_Values" },
            { 30, "eActivatable_NormalGameplay_State" },
            { 31, "eActivatable_HeroSpawns" },
            { 32, "eActivatable_UI" },
            { 33, "eActivatable_Locomotion" },
            { 34, "eActivatable_Timers" },
            { 35, "eActivatable_AreaTriggers" },
            { 36, "eActivatable_Default" },
            { 37, "eActivatable_GameEventListener" },
            { 38, "eLAST_ACTIVATION_PRIORITY" }
        };

        (*enum_map)["ZMenuSliderNavigationEntity.ESliderInputMode"] = std::map<uint32_t, std::string>{
            { 0, "E_HORIZONTAL" },
            { 1, "E_VERTICAL" }
        };

        (*enum_map)["ZActDurationCondition.EState"] = std::map<uint32_t, std::string>{
            { 0, "MOVING" },
            { 1, "ENTERING" },
            { 2, "PLAYING" },
            { 3, "STOPPING" }
        };

        (*enum_map)["ETextAlignment"] = std::map<uint32_t, std::string>{
            { 0, "TEXT_ALIGN_LEFT" },
            { 1, "TEXT_ALIGN_CENTER" },
            { 2, "TEXT_ALIGN_RIGHT" }
        };

        (*enum_map)["eItemSize"] = std::map<uint32_t, std::string>{
            { 0, "ITEMSIZE_SMALL" },
            { 1, "ITEMSIZE_MEDIUM" },
            { 2, "ITEMSIZE_LARGE" }
        };

        (*enum_map)["ZEscortSituation2Entity.EEscortState"] = std::map<uint32_t, std::string>{
            { 0, "EES_Idle" },
            { 1, "EES_Evaluate" },
            { 2, "EES_Escorting" },
            { 3, "EES_Searching" },
            { 4, "EES_Intermediate" }
        };

        (*enum_map)["ZLeadEscortSituationEntity.ETargetState"] = std::map<uint32_t, std::string>{
            { 0, "ETS_Unknown" },
            { 1, "ETS_NoTarget" },
            { 2, "ETS_RunningActBehavior" },
            { 3, "ETS_RunningDummyBehavior" },
            { 4, "ETS_RunningOtherBehavior" },
            { 5, "ETS_Dead" },
            { 6, "ETS_TargetIsHitman" }
        };

        (*enum_map)["ECharacterSubcontrollerType"] = std::map<uint32_t, std::string>{
            { 0, "eSCT_IDGenerator" },
            { 1, "eSCT_Debugger" },
            { 2, "eSCT_Time" },
            { 3, "eSCT_Tags" },
            { 4, "eSCT_Descriptors" },
            { 5, "eSCT_ActionRequest" },
            { 6, "eSCT_Events" },
            { 7, "eSCT_Animator" },
            { 8, "eSCT_Motor" },
            { 9, "eSCT_Inventory" },
            { 10, "eSCT_FlavorIdle" },
            { 11, "eSCT_Lookat" },
            { 12, "eSCT_AimAssistant" },
            { 13, "eSCT_CharacterCollector" },
            { 14, "eSCT_SwipeMechanic" },
            { 15, "eSCT_OpenDoor" },
            { 16, "eSCT_Fullbody" },
            { 17, "eSCT_Aim" },
            { 18, "eSCT_PrecisionShot" },
            { 19, "eSCT_Marking" },
            { 20, "eSCT_Grip" },
            { 21, "eSCT_Suitcase" },
            { 22, "eSCT_VRConfig" },
            { 23, "eSCT_Hands" },
            { 24, "eSCT_StickingItems" },
            { 25, "eSCT_Fiberwire" }
        };

        (*enum_map)["ECrowdFlowCandidates"] = std::map<uint32_t, std::string>{
            { 0, "NONE" },
            { 1, "EVERYONE" },
            { 2, "SPAWNED_ON_FLOW" }
        };

        (*enum_map)["EThrownCollisionSoundLoudness"] = std::map<uint32_t, std::string>{
            { 0, "eLoudness_Default" },
            { 1, "eLoudness_Low" },
            { 2, "eLoudness_Normal" },
            { 3, "eLoudness_Loud" }
        };

        (*enum_map)["EUIBusyOperationId"] = std::map<uint32_t, std::string>{
            { 0, "eOperationId_GameSave" },
            { 1, "eOperationId_MenuTransition" },
            { 2, "eOperationId_ManuallyTriggered" },
            { 3, "eOperationId_TriggerBootFlow" },
            { 4, "eOperationId_SaveContract" },
            { 5, "eOperationId_StartContract" },
            { 6, "eOperationId_SessionStart" },
            { 7, "eOperationId_ReportContract" },
            { 8, "eOperationId_ConnectionFlow" },
            { 9, "eOperationId_LoadingTransitionDelayed" },
            { 10, "eOperationId_SaveSuccess" },
            { 11, "eOperationId_SaveFailed" },
            { 12, "eOperationId_SessionReconnect" },
            { 13, "eOperationId_NetSynchedMenuPause" },
            { 14, "eOperationId_NetSynchedMenuRestart" },
            { 15, "eOperationId_NetSynchedMenuReplan" },
            { 16, "eOperationId_StartingMultiplayerSession" },
            { 17, "eOperationId_HandlingMultiplayerRequest" },
            { 18, "eOperationId_PoorConnectivity" },
            { 19, "eOperationId_DefaultLoadout" },
            { 20, "eOperationId_Max" },
            { 21, "eOperationId_Custom_Begin" },
            { 22, "eOperationId_Custom_02" },
            { 23, "eOperationId_Custom_03" },
            { 24, "eOperationId_Custom_04" },
            { 25, "eOperationId_Custom_05" },
            { 26, "eOperationId_Custom_06" },
            { 27, "eOperationId_Custom_07" },
            { 28, "eOperationId_Custom_08" },
            { 29, "eOperationId_Custom_09" },
            { 30, "eOperationId_Custom_10" },
            { 31, "eOperationId_Custom_11" },
            { 32, "eOperationId_Custom_12" },
            { 33, "eOperationId_Custom_13" },
            { 34, "eOperationId_Custom_14" },
            { 35, "eOperationId_Custom_15" },
            { 36, "eOperationId_Custom_16" },
            { 37, "eOperationId_Custom_17" },
            { 38, "eOperationId_Custom_18" },
            { 39, "eOperationId_Custom_19" },
            { 40, "eOperationId_Custom_20" },
            { 41, "eOperationId_Custom_21" },
            { 42, "eOperationId_Custom_22" },
            { 43, "eOperationId_Custom_23" },
            { 44, "eOperationId_Custom_24" },
            { 45, "eOperationId_Custom_25" },
            { 46, "eOperationId_Custom_End" },
            { 47, "eOperationId_None" }
        };

        (*enum_map)["EAttachLocation"] = std::map<uint32_t, std::string>{
            { 0, "eALRightHand" },
            { 1, "eALLeftHand" },
            { 2, "eALFreeBone" },
            { 3, "eALBack" },
            { 4, "eALRifle" },
            { 5, "eALAttachCount" },
            { 6, "eALUndefined" }
        };

        (*enum_map)["EEngineFrameUpdatePriority"] = std::map<uint32_t, std::string>{
            { 0, "eFUP_AILogger" },
            { 1, "eFUP_GridManager" },
            { 2, "eFrameUpdatePriority_HitmanStart" },
            { 3, "eFUP_ActorManager_Prepare" },
            { 4, "eFrameUpdatePriority_CrowdSyncAI" },
            { 5, "eFrameUpdatePriority_PlayerCommunicationEarly" },
            { 6, "eFrameUpdatePriority_Scatter" },
            { 7, "eFrameUpdatePriority_VolumeTriggerManager" },
            { 8, "eFrameUpdatePriority_DistanceToCamManager" },
            { 9, "eFrameUpdatePriority_Door" },
            { 10, "eFUP_GameEntityManager" },
            { 11, "eFrameUpdatePriority_AreaManager" },
            { 12, "eFrameUpdatePriority_SpeechManager" },
            { 13, "eFUP_SmoothOperator" },
            { 14, "eFUP_LimitedVisionArea" },
            { 15, "eFUP_WindManager" },
            { 16, "eFrameUpdatePriority_KeywordDebug" },
            { 17, "eFUP_DebugUPlot" },
            { 18, "eFUP_IntelManager" },
            { 19, "eFrameUpdatePriority_LocalizationManager" },
            { 20, "eFrameUpdatePriority_SubtitleManager" },
            { 21, "eFrameUpdatePriority_HttpManager" },
            { 22, "eFrameUpdatePriority_WebsocketManager" },
            { 23, "eFrameUpdatePriority_OnlineEventsClient" },
            { 1001, "eFrameUpdatePriority_OutfitStreamingManager" },
            { 24, "eFrameUpdatePriority_OnlineEventManager" },
            { 25, "eFrameUpdatePriority_OnlineManager" },
            { 26, "eFrameUpdatePriority_EntitlementManager" },
            { 27, "eFrameUpdatePriority_MetricsManager" },
            { 28, "eFUP_SoundGateManager" },
            { 29, "eFUP_SoundAmbienceManager" },
            { 30, "eFrameUpdatePriority_UserProfileManager" },
            { 31, "eFrameUpdatePriority_RenderManager" },
            { 32, "eFrameUpdatePriority_TextInputDialog" },
            { 33, "eFrameUpdatePriority_SystemDialog" },
            { 34, "eFrameUpdatePriority_ContractsManager" },
            { 35, "eFUP_ParticleHeirEmitting" },
            { 36, "eFrameUpdatePriority_EditorServer" },
            { 37, "eFrameUpdatePriority_DebugConsole" },
            { 38, "eFrameUpdatePriority_GraphicsSettingsManager" },
            { 39, "eFrameUpdatePriority_ContractsGameManager" },
            { 40, "eFrameUpdatePriority_Weapon" },
            { 41, "eFrameUpdatePriority_CrowdDensityEntity" },
            { 42, "eFrameUpdatePriority_ActBehaviorStateCondition" },
            { 43, "eFrameUpdatePriority_ActorCanSeeCondition" },
            { 44, "eFrameUpdatePriority_DebugCheckKey" },
            { 45, "eFrameUpdatePriority_KeyControl" },
            { 46, "eFUP_LookAtTrigger" },
            { 47, "eFUP_FootstepEventConsumer" },
            { 48, "eFUP_BloodSplatCreator" },
            { 49, "eFrameUpdatePriority_PersistentEntityManager" },
            { 50, "eFUP_ProjectedCrowdRegion" },
            { 51, "eFrameUpdatePriority_Timers" },
            { 52, "eFrameUpdatePriority_ConditionalTimer" },
            { 53, "eFrameUpdatePriority_ValueEntityManager" },
            { 54, "eFrameUpdatePriority_ActorCounter" },
            { 55, "eFrameUpdatePriority_WaveformGeneratorManager" },
            { 56, "eFUP_ItsATrap" },
            { 57, "eFrameUpdatePriority_SecurityCamera" },
            { 58, "eFrameUpdatePriority_QueryingAIOutput" },
            { 59, "eFrameUpdatePriority_Projectile" },
            { 60, "eFrameUpdatePriority_MassImpulseCharacterExploder" },
            { 61, "eFrameUpdatePriority_Hitman" },
            { 62, "eFrameUpdatePriority_AudioManagerWwise" },
            { 63, "eFUP_GridManagerWaitForJobs" },
            { 64, "eFUP_ActorManager_StateUpdate_Pre" },
            { 65, "eFUP_ActorManager_StateUpdate" },
            { 66, "eFrameUpdatePriority_ActorAnimUpdate" },
            { 67, "eFrameUpdatePriority_CrowdSyncAll" },
            { 68, "eFrameUpdatePriority_CrowdCulling" },
            { 69, "eFrameUpdatePriority_PreCrowd" },
            { 70, "eFrameUpdatePriority_Crowd" },
            { 71, "eFrameUpdatePriority_PhysicsStart" },
            { 200, "eFrameUpdateLinkedEntity" },
            { 72, "eFrameUpdatePriority_ActorManager_AIUpdate" },
            { 201, "eFrameUpdatePriority_RayProbeEntity" },
            { 73, "eFUP_SmuggleSituationManager" },
            { 202, "eFrameUpdatePriority_GhostEntity" },
            { 74, "eFrameUpdatePriority_ActorManager3" },
            { 203, "eFrameUpdateLinkedEntityManagerMainThread" },
            { 75, "eFrameUpdatePriority_CharacterTemplateAspect" },
            { 204, "eFUP_syncDestructionEffects" },
            { 76, "eFrameUpdatePriority_Hitman2" },
            { 205, "eFrameUpdatePriority_RaycastsStart" },
            { 77, "eFrameUpdatePriority_PlayerCommunicationLate" },
            { 206, "eFrameUpdatePriority_ActorStartNetworkUpdate" },
            { 78, "eFrameUpdatePriority_ParticleDecalSpawn" },
            { 79, "eFrameUpdatePriority_ParticleColliderEmission" },
            { 80, "eFrameUpdatePriority_Physics" },
            { 81, "eFrameUpdatePriority_EntityManager" },
            { 82, "eFrameUpdatePriority_FreeCameraControlEntity" },
            { 83, "eFrameUpdatePriority_RenderVideoPlayer" },
            { 84, "eFrameUpdatePriority_AnimPlayerEntityManager" },
            { 85, "eFrameUpdatePriority_CameraAlignedBoneAnimator" },
            { 86, "eFrameUpdatePriority_ClothCharacterEntity" },
            { 87, "eFrameUpdatePriority_TextureStreamingCameraControlEntity" },
            { 88, "eFrameUpdatePriority_PostFilter" },
            { 89, "eFrameUpdatePriority_VideoPlayerControl" },
            { 90, "eFrameUpdatePriority_TrackDollyController" },
            { 91, "eFrameUpdatePriority_TestGroup" },
            { 92, "eFrameUpdatePriority_LookAtEntity" },
            { 93, "eFUP_InfoDisplay" },
            { 94, "eFUP_CrowdPossedAct" },
            { 95, "eFUP_SoundCollisionManager" },
            { 96, "eFUP_AudioLevelMeter" },
            { 97, "eFUP_ActorInstanceEntityManager" },
            { 98, "eFUP_WorldInventory" },
            { 99, "eFUP_DestructionSystem" },
            { 100, "eFUP_DestructionSystemPostTick" },
            { 101, "eFUP_DecalSpawnManager" },
            { 102, "eFrameUpdatePriority_DebugHandlers" },
            { 103, "eFrameUpdatePriority_OSD" },
            { 104, "eFrameUpdatePriority_Default" },
            { 105, "eFrameUpdatePriority_SecuritySystemCameraUI" },
            { 106, "eFrameUpdatePriority_ThrownItemUI" },
            { 107, "eFrameUpdatePriority_SequenceManager" },
            { 108, "eFrameUpdatePriority_StartPathfinderUpdate" },
            { 109, "eFrameUpdatePriority_VisibilitySensorWait" },
            { 110, "eFrameUpdatePriority_ActionManagerStart" },
            { 501, "eFrameUpdatePriority_NotificationsController" },
            { 111, "eFrameUpdatePriority_PathFinderJobManager" },
            { 500, "eFrameUpdatePriority_TextureManager" },
            { 502, "eFrameUpdatePriority_WaitForPathfinderUpdate" },
            { 1000, "eFrameUpdatePriority_LevelManager" }
        };

        (*enum_map)["EInformationBarMessage"] = std::map<uint32_t, std::string>{
            { 0, "eIBM_Clear" },
            { 1, "eIBM_LastEnemyKilledCP" },
            { 2, "eIBM_InvestigateStand" },
            { 3, "eIBM_BodyFound" },
            { 4, "eIBM_Suspicious" },
            { 5, "eIBM_DisguiseBlown" },
            { 6, "eIBM_Hunt" },
            { 7, "eIBM_Exposed" },
            { 8, "eIBM_LandMineArmed" },
            { 9, "eIBM_RadioOn" },
            { 10, "eIBM_Trespassing" },
            { 11, "eIBM_NUM" }
        };

        (*enum_map)["ESniperScoreMessageType"] = std::map<uint32_t, std::string>{
            { 0, "ESSMT_STYLE_DEFAULT" },
            { 1, "ESSMT_STYLE_SCORE" },
            { 2, "ESSMT_STYLE_PENALTY" },
            { 3, "ESSMT_STYLE_STREAK" },
            { 4, "ESSMT_STYLE_CIVKILL" }
        };

        (*enum_map)["ZHttpUrl.EVerb"] = std::map<uint32_t, std::string>{
            { 0, "eNONE" },
            { 1, "eGET" },
            { 2, "ePOST" },
            { 3, "ePUT" },
            { 4, "eHEAD" }
        };

        (*enum_map)["ESmoothingMode"] = std::map<uint32_t, std::string>{
            { 0, "ESM_LINEAR" },
            { 1, "ESM_EXPONENTIAL" }
        };

        (*enum_map)["ZActorPickerEffectTemplate.EEffectPhaseAction"] = std::map<uint32_t, std::string>{
            { 0, "EPA_NONE" },
            { 1, "EPA_START_TEMPLATE" },
            { 2, "EPA_STOP_TEMPLATE" }
        };

        (*enum_map)["EActorAIDot"] = std::map<uint32_t, std::string>{
            { 0, "eAAID_None" },
            { 1, "eAAID_Distracted" },
            { 2, "eAAID_PotentialThreat" },
            { 3, "eAAID_PotentialThreatDistracted" },
            { 4, "eAAID_Aggressive" },
            { 5, "eAAID_EscortingOut" },
            { 6, "eAAID_Fleeing" },
            { 7, "eAAID_Unconscious" },
            { 8, "eAAID_Stunned" },
            { 9, "eAAID_Grenade" },
            { 100, "eAAID_PotentialThreatDisabled" }
        };

        (*enum_map)["ZDecalControllerEntity.EScaleType"] = std::map<uint32_t, std::string>{
            { 0, "eScaleDisable" },
            { 1, "eScaleUniform" },
            { 2, "eScaleY" }
        };

        (*enum_map)["ZUIControlLayoutLegacyAspect.ELayoutMode"] = std::map<uint32_t, std::string>{
            { 0, "E_LAYOUT_MODE_Absolute" },
            { 1, "E_LAYOUT_MODE_Proportional" },
            { 2, "E_LAYOUT_MODE_Proportional_MaintainAspect" },
            { 3, "E_LAYOUT_MODE_Proportional_MaintainAspect_Fill" },
            { 4, "E_LAYOUT_MODE_Proportional_Scale_Fit" },
            { 5, "E_LAYOUT_MODE_Proportional_Scale_MaintainAspect" },
            { 6, "E_LAYOUT_MODE_Proportional_Scale_MaintainAspect_Fill" }
        };

        (*enum_map)["ZHM5WeaponBasicConfigEntity.EWeaponBasicConfigAudioClass"] = std::map<uint32_t, std::string>{
            { 0, "eWBC_AudioClass_AssaultRifle" },
            { 1, "eWBC_AudioClass_Pistol" },
            { 2, "eWBC_AudioClass_Shotgun" },
            { 3, "eWBC_AudioClass_SMG" },
            { 4, "eWBC_AudioClass_SniperRifle" }
        };

        (*enum_map)["ZUIControlLayoutLegacyAspect.EAlignmentType"] = std::map<uint32_t, std::string>{
            { 0, "E_ALIGNMENT_TYPE_Center" },
            { 1, "E_ALIGNMENT_TYPE_TopCenter" },
            { 2, "E_ALIGNMENT_TYPE_BottomCenter" },
            { 3, "E_ALIGNMENT_TYPE_CenterLeft" },
            { 4, "E_ALIGNMENT_TYPE_CenterRight" },
            { 5, "E_ALIGNMENT_TYPE_TopLeft" },
            { 6, "E_ALIGNMENT_TYPE_TopRight" },
            { 7, "E_ALIGNMENT_TYPE_BottomLeft" },
            { 8, "E_ALIGNMENT_TYPE_BottomRight" }
        };

        (*enum_map)["ZEscortSituationEntity.EEscortState"] = std::map<uint32_t, std::string>{
            { 0, "EES_Idle" },
            { 1, "EES_Evaluate" },
            { 2, "EES_Escorting" },
            { 3, "EES_Searching" },
            { 4, "EES_Intermediate" }
        };

        (*enum_map)["SniperControllerConditionType"] = std::map<uint32_t, std::string>{
            { 0, "SCCT_Enabled" },
            { 1, "SCCT_PrecisionAim" }
        };

        (*enum_map)["ZActorInstanceEntity.EFFXMode"] = std::map<uint32_t, std::string>{
            { 0, "eFFX_MODE_DISABLE" },
            { 1, "eFFX_MODE_OVERWRITE" }
        };

        (*enum_map)["EMapType"] = std::map<uint32_t, std::string>{
            { 0, "E_MAPTYPE_Minimap" },
            { 1, "E_MAPTYPE_MainMap" },
            { 2, "E_MAPTYPE_MenuMap" }
        };

        (*enum_map)["CrowdUtil.ECrowdFacing"] = std::map<uint32_t, std::string>{
            { 0, "FRONT" },
            { 1, "BACK" }
        };

        (*enum_map)["EActorEmotionState"] = std::map<uint32_t, std::string>{
            { 0, "AES_Ambient" },
            { 1, "AES_Alerted" },
            { 2, "AES_Scared" },
            { 3, "AES_Hunt" },
            { 4, "AES_Combat" },
            { 268435455, "AES_None" }
        };

        (*enum_map)["EKeywordSetBehavior"] = std::map<uint32_t, std::string>{
            { 0, "EKWSB_All" },
            { 1, "EKWSB_None" },
            { 2, "EKWSB_Any" },
            { 3, "EKWSB_No" }
        };

        (*enum_map)["eItemRarity"] = std::map<uint32_t, std::string>{
            { 0, "ITEMRARITY_COMMON" },
            { 1, "ITEMRARITY_UNCOMMON" },
            { 2, "ITEMRARITY_RARE" }
        };

        (*enum_map)["eHolsterAbility"] = std::map<uint32_t, std::string>{
            { 0, "eUndecided" },
            { 1, "eHolsteringAllowed" },
            { 2, "eHolsterTemporarilyOnly" },
            { 3, "eHolsterSecondaryOnly" },
            { 4, "eHolsterQuestStorage" },
            { 5, "eCanNotBeHolstered" }
        };

        (*enum_map)["EMoveEndState"] = std::map<uint32_t, std::string>{
            { 0, "MES_Moving" },
            { 1, "MES_Stopping" },
            { 2, "MES_Standing" }
        };

        (*enum_map)["EPlaceableType"] = std::map<uint32_t, std::string>{
            { 0, "PLACEABLE_NOT" },
            { 1, "PLACEABLE_FULL_PHYSICS" },
            { 2, "PLACEABLE_SLEEP_PHYSICS" },
            { 3, "PLACEABLE_NO_PHYSICS" },
            { 4, "PLACEABLE_ATTACH" }
        };

        (*enum_map)["ELastSoundTension"] = std::map<uint32_t, std::string>{
            { 0, "EST_Unknown" },
            { 1, "EST_Ambient" },
            { 2, "EST_Yellow" },
            { 3, "EST_Orange" },
            { 4, "EST_Red" }
        };

        (*enum_map)["ZSequenceEntity.ELetterBoxAspect"] = std::map<uint32_t, std::string>{
            { 0, "LETTERBOXASPECT_WIDESCREEN" },
            { 1, "LETTERBOXASPECT_CINEMASCOPE" }
        };

        (*enum_map)["ZHM5HIKEventConsumer.EEffector"] = std::map<uint32_t, std::string>{
            { 0, "eLeftHand" },
            { 1, "eRightHand" }
        };

        (*enum_map)["ZWaypointEntity.EMovementType"] = std::map<uint32_t, std::string>{
            { 0, "MT_WALK" },
            { 1, "MT_WALK_IF_NOT_IN_SEQUENCE" },
            { 2, "MT_SNAP" },
            { 3, "MT_IGNORE_POSITION" }
        };

        (*enum_map)["EInventoryStorageType"] = std::map<uint32_t, std::string>{
            { 0, "EIST_None" },
            { 1, "EIST_Bag" },
            { 2, "EIST_RightHand" },
            { 3, "EIST_LeftHand" },
            { 4, "EIST_Back" },
            { 5, "EIST_Support" },
            { 6, "EIST_Quest" },
            { 7, "EIST_Temporary" },
            { 8, "EIST_Debug" }
        };

        (*enum_map)["EDialogEventEndReason"] = std::map<uint32_t, std::string>{
            { 0, "EDialogEvent_Completed" },
            { 1, "EDialogEvent_Stopped" }
        };

        (*enum_map)["EDefaultCollidableLayer"] = std::map<uint32_t, std::string>{
            { 0, "DCL_STATIC" },
            { 1, "DCL_KINEMATIC" },
            { 2, "DCL_KINEMATIC_TRANSPARENT" },
            { 3, "DCL_DYNAMIC" },
            { 4, "DCL_DYNAMIC_TRANSPARENT" },
            { 5, "DCL_COLLIDE_ALL" },
            { 6, "DCL_STATIC_TRANSPARENT" },
            { 7, "DCL_COLLIDE_STATIC_ONLY" },
            { 8, "DCL_DYNAMIC_NO_CHARACTER" },
            { 9, "DCL_UNUSED_LAST" }
        };

        (*enum_map)["eItemHands"] = std::map<uint32_t, std::string>{
            { 0, "IH_NONE" },
            { 1, "IH_ONEHANDED" },
            { 2, "IH_TWOHANDED" }
        };

        (*enum_map)["ZActorProviderFilterKeyword.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" }
        };

        (*enum_map)["ZHUDUIRoot.EHUDVisibility"] = std::map<uint32_t, std::string>{
            { 0, "eHV_INSTANT_OFF" },
            { 1, "eHV_FADE_OUT" },
            { 2, "eHV_FADE_IN" },
            { 3, "eHV_INSTANT_ON" }
        };

        (*enum_map)["EKillType"] = std::map<uint32_t, std::string>{
            { 0, "EKillType_Undefined" },
            { 1, "EKillType_Throw" },
            { 2, "EKillType_Fiberwire" },
            { 3, "EKillType_PistolExecute" },
            { 4, "EKillType_ItemTakeOutFront" },
            { 5, "EKillType_ItemTakeOutBack" },
            { 6, "EKillType_ChokeOut" },
            { 7, "EKillType_SnapNeck" },
            { 8, "EKillType_KnockOut" },
            { 9, "EKillType_Push" },
            { 10, "EKillType_Pull" }
        };

        (*enum_map)["EHUDIconType"] = std::map<uint32_t, std::string>{
            { 0, "HUD_ICON_NONE" },
            { 1, "HUD_ICON_ALARM_TIMER" },
            { 2, "HUD_ICON_CLOSECOMBAT" },
            { 3, "HUD_ICON_BREADCRUMB" },
            { 4, "HUD_ICON_EXIT" },
            { 5, "HUD_ICON_OBJECTIVE" },
            { 6, "HUD_ICON_TARGET" },
            { 7, "HUD_ICON_TUTORIAL_ARROW" }
        };

        (*enum_map)["ECharacterActionSyncRequests"] = std::map<uint32_t, std::string>{
            { 1, "eSM_ASR_Reload" },
            { 2, "eSM_ASR_SwapItemHandL" },
            { 4, "eSM_ASR_SwapItemHandR" }
        };

        (*enum_map)["ZInvestigateCautiousSituation.ESituationState"] = std::map<uint32_t, std::string>{
            { 0, "SS_Main" },
            { 1, "SS_StandDownPending" },
            { 2, "SS_StandDown" }
        };

        (*enum_map)["EActBodyType"] = std::map<uint32_t, std::string>{
            { 0, "ABT_UpperBodyOnly" },
            { 1, "ABT_FullBodyWithLeadIn" },
            { 2, "ABT_FullBodyOnly" }
        };

        (*enum_map)["ZHUDOccluderTriggerEntity.EOccluderTestBit"] = std::map<uint32_t, std::string>{
            { 1, "PhysX_Far" },
            { 2, "Crowd_Far" },
            { 4, "PhysX_Middle" },
            { 128, "Crowd_LowerRight" },
            { 64, "PhysX_LowerRight" },
            { 32, "Crowd_LowerLeft" },
            { 16, "PhysX_LowerLeft" },
            { 8, "Crowd_Middle" },
            { 256, "PhysX_UpperLeft" },
            { 512, "PhysX_UpperRight" },
            { 1024, "LateralShift" }
        };

        (*enum_map)["EOpportunityRevealState"] = std::map<uint32_t, std::string>{
            { 1, "ORS_REVEALING" },
            { 9, "ORS_REVEAL_FLAGS" },
            { 2, "ORS_HINT" },
            { 4, "ORS_DISTANCE" },
            { 6, "ORS_RANGE_FLAGS" },
            { 8, "ORS_REVEALED" },
            { 16, "ORS_BYPASS_MENU" }
        };

        (*enum_map)["EGSBodyPart"] = std::map<uint32_t, std::string>{
            { 0, "GSBODYPART_UNKNOWN" },
            { 1, "GSBODYPART_HEAD" },
            { 2, "GSBODYPART_TORSO" },
            { 3, "GSBODYPART_ARM" },
            { 4, "GSBODYPART_LEG" }
        };

        (*enum_map)["EActorSecondaryIconState"] = std::map<uint32_t, std::string>{
            { 0, "eSIS_Clear" },
            { 1, "eSIS_Infected" },
            { 2, "eSIS_Infected_Stage1" },
            { 3, "eSIS_Infected_Stage2" },
            { 4, "eSIS_Infected_Stage3" }
        };

        (*enum_map)["ZInputListenerAxisEntity.eInputListenerAxes"] = std::map<uint32_t, std::string>{
            { 0, "EILA_HORIZONTAL" },
            { 1, "EILA_VERTICAL" },
            { 2, "EILA_TRIGGER_1" },
            { 3, "EILA_TRIGGER_2" }
        };

        (*enum_map)["EActorEventTypes"] = std::map<uint32_t, std::string>{
            { 0, "eAET_OnAlive" },
            { 1, "eAET_OnPacified" },
            { 2, "eAET_OnMurdered" },
            { 3, "eAET_OnAccidentDeath" },
            { 4, "eAET_OnUnnoticableKill" },
            { 5, "eAET_OnBodyNoticed" },
            { 6, "eAET_OnBodyBagged" },
            { 7, "eAET_OnDying" },
            { 8, "eAET_OnDead" },
            { 9, "eAET_OnBodyHidden" },
            { 10, "eAET_OnBodyFlushed" },
            { 11, "eAET_OnBodyDumped" },
            { 12, "eAET_OnDelete" }
        };

        (*enum_map)["EVRConfigCustomEvent"] = std::map<uint32_t, std::string>{
            { 0, "EVRCCE_ClosetInside" },
            { 1, "EVRCCE_ClosetExiting" },
            { 2, "EVRCCE_DrainPipeMounted" },
            { 3, "EVRCCE_DrainPipeStartedDismounting" },
            { 4, "EVRCCE_LadderMounted" },
            { 5, "EVRCCE_LadderStartedDismounting" },
            { 6, "EVRCCE_LedgeChange" },
            { 7, "EVRCCE_LedgeShimmyStart" },
            { 8, "EVRCCE_LedgeShimmyStop" },
            { 9, "EVRCCE_PeekEntered" },
            { 10, "EVRCCE_PeekStartedExiting" },
            { 11, "EVRCCE_FriskStartedTurning" },
            { 12, "EVRCCE_FriskEndedTurning" },
            { 13, "EVRCCE_ShowItemStartedTurning" },
            { 14, "EVRCCE_ShowItemEndedTurning" },
            { 15, "EVRCCE_SubactionAnimationStarted" },
            { 16, "EVRCCE_SubactionAnimation_Hide" },
            { 17, "EVRCCE_FocussedInteractionEntered" },
            { 18, "EVRCCE_FocussedInteractionStartedExiting" },
            { 19, "EVRCCE_DisguiseSafeZoneEntered" },
            { 20, "EVRCCE_DisguiseSafeZoneStartedExiting" },
            { 21, "EVRCCE_SniperModeEnter" },
            { 22, "EVRCCE_SniperModeEntered" },
            { 23, "EVRCCE_SniperModeExit" },
            { 24, "EVRCCE_SniperModeExited" },
            { 25, "EVRCCE_VictimMovement0" },
            { 26, "EVRCCE_VictimMovement1" },
            { 27, "EVRCCE_VictimMovement2" },
            { 28, "EVRCCE_VictimMovement3" },
            { 29, "EVRCCE_VictimMovementRemoveControl" },
            { 30, "EVRCCE_AgilityLowVault" },
            { 31, "EVRCCE_AgilityHighVault" },
            { 32, "EVRCCE_AgilityRemoveControl" },
            { 33, "EVRCCE_FiberwireStartPriming" },
            { 34, "EVRCCE_FiberwireStopPriming" },
            { 35, "EVRCCE_ToiletDrownEntered" },
            { 36, "EVRCCE_ToiletDrownExited" },
            { 37, "EVRCCE_CloseCombatStartPriming" },
            { 38, "EVRCCE_CloseCombatStopPriming" },
            { 39, "EVRCCE_SilentTakedownEnterActivationArea" },
            { 40, "EVRCCE_SilentTakedownExitActivationArea" },
            { 41, "EVRCCE_SilentTakedownInstaPacification" },
            { 42, "EVRCCE_SnapNeckEnterActivationArea" },
            { 43, "EVRCCE_SnapNeckExitActivationArea" },
            { 44, "EVRCCE_TeleportStart" },
            { 45, "EVRCCE_TeleportEnd" }
        };

        (*enum_map)["EMultiplayerNetworkState"] = std::map<uint32_t, std::string>{
            { 0, "Base" },
            { 1, "Idle" },
            { 2, "Searching" },
            { 3, "Connecting" },
            { 4, "Joining" },
            { 5, "Creating" },
            { 6, "Connected" },
            { 7, "Disconnecting" },
            { 8, "Count" }
        };

        (*enum_map)["EBoolCheckType"] = std::map<uint32_t, std::string>{
            { 0, "eBCT_IGNORE" },
            { 1, "eBCT_TRUE" },
            { 2, "eBCT_FALSE" }
        };

        (*enum_map)["EActorFaction"] = std::map<uint32_t, std::string>{
            { 0, "eActorFaction_Default" },
            { 1, "eActorFaction_VIP_1" },
            { 2, "eActorFaction_VIP_2" },
            { 3, "eActorFaction_VIP_3" },
            { 4, "eActorFaction_VIP_4" },
            { 5, "eActorFaction_VIP_5" },
            { 6, "eActorFaction_VIP_6" },
            { 7, "eActorFaction_VIP_7" }
        };

        (*enum_map)["SoundPlayState"] = std::map<uint32_t, std::string>{
            { 0, "ePlaying" },
            { 1, "eLoopBreaking" },
            { 2, "eStopping" }
        };

        (*enum_map)["ECausalGraphTraversal"] = std::map<uint32_t, std::string>{
            { 0, "eCGT_NONE" },
            { 1, "eCGT_INPUT" },
            { 2, "eCGT_OUTPUT" },
            { 3, "eCGT_BOTH" }
        };

        (*enum_map)["EPushNotificationType"] = std::map<uint32_t, std::string>{
            { 0, "PUSH_NOTIFICATION_OBJECTIVE" },
            { 1, "PUSH_NOTIFICATION_DISGUISE" },
            { 2, "PUSH_NOTIFICATION_CONTRACT" },
            { 3, "PUSH_NOTIFICATION_CHALLENGE" },
            { 4, "PUSH_NOTIFICATION_RATING" },
            { 5, "PUSH_NOTIFICATION_SPECIAL_RATING_UNLOCKED" },
            { 6, "PUSH_NOTIFICATION_CONTRACT_PICKED_UP" },
            { 7, "PUSH_NOTIFICATION_TECHNIQUE_UNLOCKED" },
            { 8, "PUSH_NOTIFICATION_SCORE_COMPARISON" }
        };

        (*enum_map)["ZCharacterSpeakCondition.EState"] = std::map<uint32_t, std::string>{
            { 0, "Started" },
            { 1, "Playing" },
            { 2, "PlayingAndAudible" },
            { 3, "Completed" },
            { 4, "SubsSeenAndCompleted" },
            { 5, "Failed" },
            { 6, "Stopped" }
        };

        (*enum_map)["EVRRenderDeviceType"] = std::map<uint32_t, std::string>{
            { 0, "RENDER_VR_DEVICE_TYPE_DUMMY" },
            { 1, "RENDER_VR_DEVICE_TYPE_OCULUS" },
            { 2, "RENDER_VR_DEVICE_TYPE_PSVR" },
            { 3, "RENDER_VR_DEVICE_TYPE_COUNT" }
        };

        (*enum_map)["IHM5Door.EOpenDir"] = std::map<uint32_t, std::string>{
            { 0, "OD_AWAY" },
            { 1, "OD_TOWARS" },
            { 2, "OD_IN" },
            { 3, "OD_OUT" }
        };

        (*enum_map)["EDamageResponse"] = std::map<uint32_t, std::string>{
            { 0, "eDR_Fractured" },
            { 1, "eDR_Detached" },
            { 2, "eDR_Destroyed" },
            { 3, "eDR_Collided" },
            { 4, "eDR_Count" }
        };

        (*enum_map)["EInventoryConfigFormerEquippedItems"] = std::map<uint32_t, std::string>{
            { 0, "EICFEI_Equip" },
            { 1, "EICFEI_EquipOrPickup" },
            { 2, "EICFEI_Forget" }
        };

        (*enum_map)["ESituationJoinReason"] = std::map<uint32_t, std::string>{
            { 0, "AISJR_Default" },
            { 1, "AISJR_HeardSound" },
            { 2, "AISJR_Alarm" },
            { 3, "AISJR_HitmanStrange" },
            { 4, "AISJR_HitmanIllegal" },
            { 5, "AISJR_Assist" },
            { 6, "AISJR_AssistingGuard" },
            { 7, "AISJR_Propagate" },
            { 8, "AISJR_ResumeSituation" },
            { 9, "AISJR_Spawned" },
            { 10, "AISJR_HelpCivilian" },
            { 11, "AISJR_Escalating" },
            { 12, "AISJR_DeadBody" },
            { 13, "AISJR_Accident" },
            { 14, "AISJR_StandDown" },
            { 15, "AISJR_Report" },
            { 16, "AISJR_ForcedToHold" },
            { 17, "AISJR_Wounded" },
            { 18, "AISJR_SC_HeardBulletImpact" },
            { 19, "AISJR_SC_HeardSetPiece" }
        };

        (*enum_map)["UIMapLayer.EUIMapLayerID"] = std::map<uint32_t, std::string>{
            { 0, "eUIMLI_UNSPECIFIED" },
            { 1, "eUIMLI_STAIRCASE" },
            { 2, "eUIMLI_AREA_UNDISCOVERED" },
            { 3, "eUIMLI_TEXT" },
            { 4, "eUIMLI_DROPPED_ITEMS_AND_DISGUISES" },
            { 5, "eUIMLI_NPC" },
            { 6, "eUIMLI_NORTH_INDICATOR" },
            { 7, "eUIMLI_SECURITY_CAMERA" },
            { 8, "eUIMLI_AGENCY_PICKUP" },
            { 9, "eUIMLI_OPPORTUNITY" },
            { 10, "eUIMLI_EXIT" },
            { 11, "eUIMLI_OBJECTIVE" },
            { 12, "eUIMLI_TARGET" },
            { 13, "eUIMLI_OPPONENT" },
            { 14, "eUIMLI_HERO" }
        };

        (*enum_map)["EScreenplayStateFlag"] = std::map<uint32_t, std::string>{
            { 0, "eSSF_DEFAULT" },
            { 8, "eSSF_RUNNING" },
            { 16, "eSSF_DONE" },
            { 32, "eSSF_TERMINATED" },
            { 1, "eSSF_ENABLED" },
            { 2, "eSSF_CAST" },
            { 4, "eSSF_RESUMING" }
        };

        (*enum_map)["ENetPlayerEvent"] = std::map<uint32_t, std::string>{
            { 0, "Login" },
            { 1, "Logout" },
            { 2, "NewHost" }
        };

        (*enum_map)["ZCoverPlane.ECoverType"] = std::map<uint32_t, std::string>{
            { 0, "eCoverOnly" },
            { 1, "eCoverAndRail" },
            { 2, "eRailOnly" }
        };

        (*enum_map)["ECameraOffset_old"] = std::map<uint32_t, std::string>{
            { 0, "eCameraOffset_Center" },
            { 1, "eCameraOffset_Left" },
            { 2, "eCameraOffset_Right" }
        };

        (*enum_map)["EVRConfigCapsuleGridSize"] = std::map<uint32_t, std::string>{
            { 0, "EVRCCGS_RegularGrid" },
            { 1, "EVRCCGS_SmallGrid" }
        };

        (*enum_map)["ECompiledConditionType"] = std::map<uint32_t, std::string>{
            { 0, "CT_IsCurrent" },
            { 1, "CT_Current" },
            { 2, "CT_IsExpired" },
            { 3, "CT_HasGoal" },
            { 4, "CT_HasGoalOnTarget" },
            { 5, "CT_HasUnhandledGoal" },
            { 6, "CT_MaxActorsWithGoal" },
            { 7, "CT_MinExpired" },
            { 8, "CT_MaxExpired" },
            { 9, "CT_MinAge" },
            { 10, "CT_MaxAge" },
            { 11, "CT_IsSharedOlder" },
            { 12, "CT_HasLongTermMemory" },
            { 13, "CT_IsSharedEventCurrent" },
            { 14, "CT_SharedEventCurrent" },
            { 15, "CT_IsSharedEventExpired" },
            { 16, "CT_MinSharedEventExpired" },
            { 17, "CT_MaxSharedEventExpired" },
            { 18, "CT_MinSharedEventAge" },
            { 19, "CT_MaxSharedEventAge" },
            { 20, "CT_IsNull" },
            { 21, "CT_IsEqual" },
            { 22, "CT_IsOfType" },
            { 23, "CT_IsOfActorType" },
            { 24, "CT_IsOfActorRank" },
            { 25, "CT_IsOfActorRole" },
            { 26, "CT_IsActorRoleBodyguard" },
            { 27, "CT_IsActorRoleVIP" },
            { 28, "CT_IsActorDeafBlind" },
            { 29, "CT_IsActorAlive" },
            { 30, "CT_IsActorConscious" },
            { 31, "CT_HasConfiguredAct" },
            { 32, "CT_HasConfiguredSpeak" },
            { 33, "CT_IsConfiguredConditionTrue" },
            { 34, "CT_HasTension" },
            { 35, "CT_HasTensionOrHigher" },
            { 36, "CT_IsAIModified" },
            { 37, "CT_HasSameOutfit" },
            { 38, "CT_IsLegal" },
            { 39, "CT_IsItemLegalOnHitman" },
            { 40, "CT_IsItemIllegalOnHitman" },
            { 41, "CT_IsItemSuspiciousOnHitman" },
            { 42, "CT_AreVisibleItemsLegal" },
            { 43, "CT_AreVisibleItemsIllegal" },
            { 44, "CT_AreVisibleItemsSuspicious" },
            { 45, "CT_AreVisibleWeaponsLegal" },
            { 46, "CT_AreVisibleWeaponsIllegal" },
            { 47, "CT_AreVisibleWeaponsSuspicious" },
            { 48, "CT_OnlyLegalWeaponsDropped" },
            { 49, "CT_IllegalWeaponDropped" },
            { 50, "CT_SuspiciousWeaponDropped" },
            { 51, "CT_OnlyLegalItemsDropped" },
            { 52, "CT_IllegalItemDropped" },
            { 53, "CT_SuspiciousItemDropped" },
            { 54, "CT_OnlyLegalWeaponsPickedUp" },
            { 55, "CT_IllegalWeaponPickedUp" },
            { 56, "CT_SuspiciousWeaponPickedUp" },
            { 57, "CT_OnlyLegalItemsPickedUp" },
            { 58, "CT_IllegalItemPickedUp" },
            { 59, "CT_SuspiciousItemPickedUp" },
            { 60, "CT_ThrownBy" },
            { 61, "CT_GetItemBeingThrownBy" },
            { 62, "CT_Owner" },
            { 63, "CT_PreviousOwner" },
            { 64, "CT_IsOwner" },
            { 65, "CT_IsPreviousOwner" },
            { 66, "CT_GetItemDroppedBy" },
            { 67, "CT_CausedBy" },
            { 68, "CT_BeingPickedUpBy" },
            { 69, "CT_IsSuitcase" },
            { 70, "CT_IsNotSuitcase" },
            { 71, "CT_IsVisiblyPerceptible" },
            { 72, "CT_HasCustomInvestigationAckSoundDef" },
            { 73, "CT_FindStashPointsForItem" },
            { 74, "CT_MinDistance" },
            { 75, "CT_MaxDistance" },
            { 76, "CT_MinActualDistance" },
            { 77, "CT_MinActualDistance2D" },
            { 78, "CT_MaxActualDistance" },
            { 79, "CT_MaxActualDistance2D" },
            { 80, "CT_ActualInsideSlice" },
            { 81, "CT_MaxDistanceToKnownPosition" },
            { 82, "CT_IsDistanceFromKnownToActualGreaterThan" },
            { 83, "CT_IsDistanceFromKnownToActualLessThan" },
            { 84, "CT_InSituation" },
            { 85, "CT_IsActorInSituation" },
            { 86, "CT_SituationTarget" },
            { 87, "CT_SituationHuntTarget" },
            { 88, "CT_IsSituationTarget" },
            { 89, "CT_SituationFromActors" },
            { 90, "CT_ActorsNotInSituation" },
            { 91, "CT_SituationFromTarget" },
            { 92, "CT_TargetsNotInSituation" },
            { 93, "CT_MaxSituationAge" },
            { 94, "CT_MinSituationAge" },
            { 95, "CT_InPhase" },
            { 96, "CT_MinPhaseAge" },
            { 97, "CT_MaxPhaseAge" },
            { 98, "CT_IsOrderInvalid" },
            { 99, "CT_IsSituationOlderThanSharedEvent" },
            { 100, "CT_HasOrder" },
            { 101, "CT_HasPendingOrder" },
            { 102, "CT_IsCombatDisabled" },
            { 103, "CT_CanJoinSituation" },
            { 104, "CT_InfectedMayFollowPlayer" },
            { 105, "CT_CanDistractionEscalateTo" },
            { 106, "CT_CanReactToDistractionType" },
            { 107, "CT_CanInvestigateDistraction" },
            { 108, "CT_IsCurrentDistractionTarget" },
            { 109, "CT_IsNotCurrentDistractionTarget" },
            { 110, "CT_IsHighestPriorityTypeToInvestigate" },
            { 111, "CT_IsHighestPriorityTypeToInvestigateFor" },
            { 112, "CT_IsHighestPriorityTypeToReact" },
            { 113, "CT_HasBystanderSomethingElseToInvestigate" },
            { 114, "CT_IsDistractionNewerThanCurrentOne" },
            { 115, "CT_ShouldDistractionDiscardNewOcurrences" },
            { 116, "CT_IsDistractionInterruptableByNewOcurrences" },
            { 117, "CT_IsSameDistractionTypeAsTheCurrentOne" },
            { 118, "CT_IsDistracted" },
            { 119, "CT_HasCustomDistractionAckSoundDef" },
            { 120, "CT_HasCustomDistractionStndSoundDef" },
            { 121, "CT_PerceptibleEntityEndAfterReact" },
            { 122, "CT_PerceptibleEntityEndAfterMoveTo" },
            { 123, "CT_FindSuitcaseAssitanceForCivilian" },
            { 124, "CT_FindSuitcaseAssitanceForSentry" },
            { 125, "CT_IsValidForSuitcaseAssistance" },
            { 126, "CT_SuitcaseAssistanceRequesterFaceToFace" },
            { 127, "CT_SuitcaseAssistanceRequesterRadio" },
            { 128, "CT_IsDistractionTargetBeingHandled" },
            { 129, "CT_CanArrestReasonEscalateTo" },
            { 130, "CT_IsHighestSeverityReasonToArrest" },
            { 131, "CT_Breakpoint" },
            { 132, "CT_Cooldown" },
            { 133, "CT_Trigger" },
            { 134, "CT_IsInSniperIsland" },
            { 135, "CT_SituationIsType" },
            { 136, "CT_IntRuntimeParamEqualsTo" },
            { 137, "CT_IsNewArrestEnabled" },
            { 138, "CT_IsDebugBuild" },
            { 139, "CT_GetRandomFightTarget" },
            { 140, "CT_IsCombatPositionActReady" },
            { 141, "CT_CurrentSetpieceVisualDistractions" },
            { 142, "CT_CurrentSetpieceSoundDistractions" },
            { 143, "CT_AreBehaviorsDisabled" },
            { 144, "CT_IsDifficultyEqual" },
            { 145, "CT_IsDifficultyGreaterOrEqual" },
            { 146, "CT_IsDifficultyLessOrEqual" },
            { 147, "CT_IsSeasonTwoCombatEnabled" },
            { 148, "CT_IsRealCombatSituation" },
            { 149, "CT_RemoveSituationsWithDesiredNumberOfCombatants" },
            { 150, "CT_RemoveCombatSituationsStandingDown" },
            { 151, "CT_CombatSituationsWithDesiredNumberOfCombatants" },
            { 152, "CT_CombatSituationsThatCanDiscardCombatants" },
            { 153, "CT_CombatSituationsStandingDown" },
            { 154, "CT_HasCombatFightOrder" },
            { 155, "CT_IsAccidentDeathContext" },
            { 156, "CT_IsAccidentScaleContext" },
            { 157, "CT_IsAccidentVictimDisposable" },
            { 158, "CT_IsAccidentBystandingGuardSearching" }
        };

        (*enum_map)["EItemGripType"] = std::map<uint32_t, std::string>{
            { 0, "IGT_Empty" },
            { 1, "IGT_Suitcase" },
            { 2, "IGT_Suitcase_Big" },
            { 3, "IGT_Firearm_Pistol" },
            { 4, "IGT_Firearm_Pistol_Stealth" },
            { 5, "IGT_Firearm_AssaultRifle_Bullpup" },
            { 6, "IGT_Firearm_AssaultRifle_Carbine" },
            { 7, "IGT_Firearm_Shotgun" },
            { 8, "IGT_Firearm_SMG" },
            { 9, "IGT_Firearm_SMG02" },
            { 10, "IGT_Firearm_SniperRifle" },
            { 11, "IGT_Firearm_SniperRifle02" },
            { 12, "IGT_Firearm_Dartgun" },
            { 13, "IGT_Melee_1H_Baton" },
            { 14, "IGT_Melee_1H_Cleaver" },
            { 15, "IGT_Melee_1H_Hammer" },
            { 16, "IGT_Melee_1H_Knife" },
            { 17, "IGT_Melee_1H_Rock" },
            { 18, "IGT_Melee_1H_Screwdriver" },
            { 19, "IGT_Melee_1H_Stick" },
            { 20, "IGT_Melee_1H_Sword" },
            { 21, "IGT_Melee_1H_FireExtinguisher" },
            { 22, "IGT_Melee_1H_Bust" },
            { 23, "IGT_Melee_1H_Crowbar" },
            { 24, "IGT_Melee_1H_Syringe" },
            { 25, "IGT_Melee_2H_Axe" },
            { 26, "IGT_Melee_2H_Stick" },
            { 27, "IGT_Melee_2H_Sword" },
            { 28, "IGT_Gadget_Fiberwire" },
            { 29, "IGT_Gadget_Coin" },
            { 30, "IGT_Gadget_Vial" },
            { 31, "IGT_Gadget_C4" },
            { 32, "IGT_Gadget_Detonator" },
            { 33, "IGT_Gadget_Grenade_ThickGrip" },
            { 34, "IGT_Gadget_Grenade_ThinGrip" },
            { 35, "IGT_Gadget_Mine" },
            { 36, "IGT_Gadget_Remote" },
            { 37, "IGT_Prop_1H" },
            { 38, "IGT_Prop_1H_Duck" },
            { 39, "IGT_Prop_1h_Phone" },
            { 40, "IGT_None" }
        };

        (*enum_map)["EUIBusyState"] = std::map<uint32_t, std::string>{
            { 0, "eBusyState_Saving" },
            { 1, "eBusyState_Saving_Failed" },
            { 2, "eBusyState_Saving_Success" },
            { 3, "eBusyState_Online_Connecting" },
            { 4, "eBusyState_Loading" },
            { 5, "eBusyState_Fetching" },
            { 6, "eBusyState_None" }
        };

        (*enum_map)["EBulletType"] = std::map<uint32_t, std::string>{
            { 0, "BULLET_TYPE_NONE" },
            { 1, "BULLET_TYPE_GUN" },
            { 2, "BULLET_TYPE_REVOLVER" },
            { 3, "BULLET_TYPE_SMG" },
            { 4, "BULLET_TYPE_MG" },
            { 5, "BULLET_TYPE_RIFLE" },
            { 6, "BULLET_TYPE_SHOTGUN" },
            { 7, "BULLET_TYPE_SNIPER" },
            { 8, "BULLET_TYPE_RPG" }
        };

        (*enum_map)["EPathFinderBoxType"] = std::map<uint32_t, std::string>{
            { 0, "PFBT_INCLUDE_MESH_COLLISION" },
            { 1, "PFBT_EXCLUDE_MESH_COLLISION" },
            { 2, "PFBT_CREATE_MESH_COLLISION" },
            { 3, "PFBT_REGION" },
            { 4, "PFBT_INCLUDE_PORTALS" },
            { 5, "PFBT_EXCLUDE_PORTALS" },
            { 6, "PFBT_IGNORE" }
        };

        (*enum_map)["ZVRHUDWristAlignmentController.EAxis"] = std::map<uint32_t, std::string>{
            { 0, "X_AXIS" },
            { 1, "Y_AXIS" },
            { 2, "Z_AXIS" }
        };

        (*enum_map)["EMotionType"] = std::map<uint32_t, std::string>{
            { 0, "MOTION_LOCKED" },
            { 1, "MOTION_LIMITED" },
            { 2, "MOTION_FREE" }
        };

        (*enum_map)["ECharacterStateTags"] = std::map<uint32_t, std::string>{
            { 1, "eSM_ST_UsingFullBody" },
            { 2, "eSM_ST_UsingRightHand" },
            { 4, "eSM_ST_UsingLeftHand" },
            { 128, "eSM_ST_UpperBodyRequestedControlLeftHand" },
            { 64, "eSM_ST_UpperBodyRequestedControlRightHand" },
            { 16384, "eSM_ST_EmptyStateRightHand" },
            { 32768, "eSM_ST_EnableOldMovement" },
            { 32, "eSM_ST_EnslavingFullBody" },
            { 8396800, "eSM_ST_EmptyStateLeftHand" },
            { 16, "eSM_ST_EnslavingLeftHand" },
            { 4096, "eSM_ST_Reloading" },
            { 8, "eSM_ST_EnslavingRightHand" },
            { 256, "eSM_ST_CanGiveUpControlRightHand" },
            { 512, "eSM_ST_CanGiveUpControlLeftHand" },
            { 1024, "eSM_ST_Pickup" },
            { 2048, "eSM_ST_Sniping" },
            { 262144, "eSM_ST_Assemble" },
            { 65536, "eSM_ST_UsingItemLeft" },
            { 131072, "eSM_ST_UsingItemRight" }
        };

        (*enum_map)["ECCDUsage"] = std::map<uint32_t, std::string>{
            { 0, "ECCDUSAGE_DISABLED" },
            { 1, "ECCDUSAGE_AGAINST_STATIC" },
            { 2, "ECCDUSAGE_AGAINST_STATIC_DYNAMIC" }
        };

        (*enum_map)["ZUIControlEntity.EAlignment"] = std::map<uint32_t, std::string>{
            { 0, "TopLeft" },
            { 1, "TopCenter" },
            { 2, "TopRight" },
            { 3, "CenterLeft" },
            { 4, "Center" },
            { 5, "CenterRight" },
            { 6, "BottomLeft" },
            { 7, "BottomCenter" },
            { 8, "BottomRight" },
            { 9, "StretchCenter" },
            { 10, "StretchHorizontalTop" },
            { 11, "StretchHorizontalCenter" },
            { 12, "StretchHorizontalBottom" },
            { 13, "StretchVerticalLeft" },
            { 14, "StretchVerticalCenter" },
            { 15, "StretchVerticalRight" }
        };

        (*enum_map)["EAmmoBehaviourConfigType"] = std::map<uint32_t, std::string>{
            { 0, "eAB_None" },
            { 1, "eAB_Explosive" },
            { 2, "eAB_Penetration" }
        };

        (*enum_map)["ZHM5BodyContainer.eBCCloseMode"] = std::map<uint32_t, std::string>{
            { 0, "BC_AUTOCLOSE" },
            { 1, "BC_MANUALCLOSE" }
        };

        (*enum_map)["EFSMStateStatus"] = std::map<uint32_t, std::string>{
            { 0, "eInactive" },
            { 1, "eActive" },
            { 2, "eCompleted" },
            { 3, "eFailed" },
            { 4, "eInterrupted" }
        };

        (*enum_map)["EHM5SoundFootstepEvent"] = std::map<uint32_t, std::string>{
            { 0, "EFSE_START" },
            { 1, "EFSE_STOP" },
            { 2, "EFSE_LEFT" },
            { 3, "EFSE_RIGHT" },
            { 4, "EFSE_TURN" },
            { 5, "EFSE_SLIDE" },
            { 6, "EFSE_JUMP" },
            { 7, "EFSE_LAND" }
        };

        (*enum_map)["ZHM5ValueEntity_bool.EForwardRule"] = std::map<uint32_t, std::string>{
            { 0, "eAlways" },
            { 1, "eValueChanged" }
        };

        (*enum_map)["Network.PacketReliability"] = std::map<uint32_t, std::string>{
            { 0, "UNRELIABLE" },
            { 1, "UNRELIABLE_SEQUENCED" },
            { 2, "RELIABLE" },
            { 3, "RELIABLE_ORDERED" },
            { 4, "RELIABLE_SEQUENCED" },
            { 5, "UNRELIABLE_WITH_ACK_RECEIPT" },
            { 6, "RELIABLE_WITH_ACK_RECEIPT" },
            { 7, "RELIABLE_ORDERED_WITH_ACK_RECEIPT" },
            { 8, "NUMBER_OF_RELIABILITIES" }
        };

        (*enum_map)["IContractObjective.State"] = std::map<uint32_t, std::string>{
            { 0, "IN_PROGRESS" },
            { 1, "COMPLETED" },
            { 2, "FAILED" }
        };

        (*enum_map)["ZActorDebugEntity.EActorDebugColor"] = std::map<uint32_t, std::string>{
            { 8323072, "EDC_DARK_BLUE" },
            { 16711680, "EDC_BLUE" },
            { 127, "EDC_DARK_RED" },
            { 255, "EDC_RED" },
            { 32512, "EDC_DARK_GREEN" },
            { 65280, "EDC_GREEN" },
            { 8323199, "EDC_DARK_PINK" },
            { 16711935, "EDC_PINK" },
            { 0, "EDC_BLACK" },
            { 16777215, "EDC_WHITE" }
        };

        (*enum_map)["ERenderVRTrackingID"] = std::map<uint32_t, std::string>{
            { 16, "RENDER_VR_TRACK_HEAD" },
            { 17, "RENDER_VR_TRACK_EYE_LEFT" },
            { 18, "RENDER_VR_TRACK_EYE_RIGHT" },
            { 19, "RENDER_VR_TRACK_HAND_LEFT" },
            { 20, "RENDER_VR_TRACK_HAND_RIGHT" }
        };

        (*enum_map)["EMoveSpeed"] = std::map<uint32_t, std::string>{
            { 0, "MS_Sneaking" },
            { 1, "MS_Walking" },
            { 2, "MS_Jogging" },
            { 3, "MS_Sprinting" },
            { 4, "MS_Flash" }
        };

        (*enum_map)["EDeathContext"] = std::map<uint32_t, std::string>{
            { 0, "eDC_UNDEFINED" },
            { 1, "eDC_NOT_HERO" },
            { 2, "eDC_HIDDEN" },
            { 3, "eDC_ACCIDENT" },
            { 4, "eDC_MURDER" }
        };

        (*enum_map)["ECoordinateSpace"] = std::map<uint32_t, std::string>{
            { 0, "CSPACE_INVALID" },
            { 1, "CSPACE_OBJECT_TO_WORLD" },
            { 2, "CSPACE_OBJECT_TO_PARENT" },
            { 3, "CSPACE_SEQUENCE_ORIGIN" },
            { 4, "CSPACE_CHARACTER_RELATIVE" }
        };

        (*enum_map)["ECameraAssistanceMode"] = std::map<uint32_t, std::string>{
            { 0, "eCAM_None" },
            { 1, "eCAM_TrackAssist" },
            { 2, "eCAM_AutoTrackTarget" }
        };

        (*enum_map)["ZUIListNavigationEntity.ENavigationInputMode"] = std::map<uint32_t, std::string>{
            { 0, "E_MODE_UP_DOWN" },
            { 1, "E_MODE_LEFT_RIGHT" },
            { 2, "E_MODE_PGPREV_PGNEXT" },
            { 3, "E_MODE_SMART_2D" }
        };

        (*enum_map)["EExtendedPropertyType"] = std::map<uint32_t, std::string>{
            { 0, "TYPE_RESOURCEPTR" },
            { 1, "TYPE_INT32" },
            { 2, "TYPE_UINT32" },
            { 3, "TYPE_FLOAT" },
            { 4, "TYPE_STRING" },
            { 5, "TYPE_BOOL" },
            { 6, "TYPE_ENTITYREF" },
            { 7, "TYPE_VARIANT" }
        };

        (*enum_map)["ERegistrationState"] = std::map<uint32_t, std::string>{
            { 0, "eINITIAL" },
            { 1, "eNOP" },
            { 2, "ePENDING" },
            { 3, "eCANCELLED_REMOTELY" },
            { 4, "eCANCELLED_LOCALLY" },
            { 5, "eFOUNDMATCH" }
        };

        (*enum_map)["EDisconnectReason"] = std::map<uint32_t, std::string>{
            { 0, "eNOTIFICATION" },
            { 1, "eCONNECTION_LOST" },
            { 2, "eNETWORK_STATE" }
        };

        (*enum_map)["EIntelStage"] = std::map<uint32_t, std::string>{
            { 0, "eIT_MAIN" },
            { 1, "eIT_STAGE" },
            { 2, "eIT_HINT" }
        };

        (*enum_map)["EActorVoiceVariation"] = std::map<uint32_t, std::string>{
            { 399, "eAVV_JOB_STINGLIFEGRDM06" },
            { 0, "eAVV_Undefined" },
            { 1, "eAVV_ABIATTI" },
            { 393, "eAVV_JOB_SITEWKR07" },
            { 2, "eAVV_ATHENASAVALAS" },
            { 3, "eAVV_BDYGRD01" },
            { 387, "eAVV_JOB_RANGANSECHI03" },
            { 4, "eAVV_BDYGRD02" },
            { 5, "eAVV_BDYGRD03" },
            { 397, "eAVV_JOB_SITEWKRES02" },
            { 6, "eAVV_BDYGRD04" },
            { 7, "eAVV_BDYGRD05" },
            { 407, "eAVV_JOB_STINGTECHM07" },
            { 8, "eAVV_BDYGRD06" },
            { 9, "eAVV_BDYGRD07" },
            { 401, "eAVV_JOB_STINGSEC06" },
            { 10, "eAVV_BERG" },
            { 11, "eAVV_BULLDOG_MANSIONSTAFF_F05" },
            { 395, "eAVV_JOB_SITEWKR09" },
            { 12, "eAVV_BULLDOG_MANSIONSTAFF_F08" },
            { 13, "eAVV_BULLDOG_MANSIONSTAFF_F09" },
            { 405, "eAVV_JOB_STINGSTAFFM08" },
            { 14, "eAVV_BULLDOG_MANSIONSTAFF_F10" },
            { 15, "eAVV_BULLDOG_MANSIONSTAFF_M06" },
            { 415, "eAVV_JOB_SUBWKR06" },
            { 16, "eAVV_BULLDOG_MANSIONSTAFF_M07" },
            { 17, "eAVV_BULLDOG_MANSIONSTAFF_M08" },
            { 409, "eAVV_JOB_STINGTRAINERF06" },
            { 18, "eAVV_BULLDOG_MANSIONSTAFF_M09" },
            { 19, "eAVV_BULLDOG_MANSIONSTAFF_M11" },
            { 403, "eAVV_JOB_STINGSTAFFF08" },
            { 20, "eAVV_BUSEY" },
            { 21, "eAVV_CARLISLEALEXA" },
            { 413, "eAVV_JOB_STINGWTRM07" },
            { 22, "eAVV_CARLISLEEDWARD" },
            { 23, "eAVV_CARLISLEEMMA" },
            { 487, "eAVV_SCIENTIST01" },
            { 24, "eAVV_CARLISLEGREGORY" },
            { 25, "eAVV_CARLISLEPATRICK" },
            { 481, "eAVV_REYNARD" },
            { 26, "eAVV_CARLISLEREBECCA" },
            { 27, "eAVV_CARUSO" },
            { 411, "eAVV_JOB_STINGVILLAGRD06" },
            { 28, "eAVV_CASSIDY" },
            { 29, "eAVV_CHEF01" },
            { 485, "eAVV_ROYCE" },
            { 30, "eAVV_CHEF02" },
            { 31, "eAVV_CHEF03" },
            { 431, "eAVV_LLAMA_WAITER_M06" },
            { 32, "eAVV_CHEF04" },
            { 33, "eAVV_CHURCHSTAFF01" },
            { 425, "eAVV_KNOX_S" },
            { 34, "eAVV_CHURCHSTAFF02" },
            { 35, "eAVV_CHURCHSTAFF03" },
            { 419, "eAVV_JOB_THUGHI02" },
            { 36, "eAVV_CIVFEM01" },
            { 37, "eAVV_CIVFEM02" },
            { 429, "eAVV_LLAMA_WAITER_F06" },
            { 38, "eAVV_CIVFEM03" },
            { 39, "eAVV_CIVFEM04" },
            { 439, "eAVV_LLAMA_WORKER_MES03" },
            { 40, "eAVV_CIVFEM05" },
            { 41, "eAVV_CIVFEM06" },
            { 433, "eAVV_LLAMA_WAITER_M11" },
            { 42, "eAVV_CIVFEM07" },
            { 43, "eAVV_CIVFEM08" },
            { 427, "eAVV_LJUDMILAVETROVA" },
            { 44, "eAVV_CIVFEM09" },
            { 45, "eAVV_CIVFEM10" },
            { 437, "eAVV_LLAMA_WORKER_MES01" },
            { 46, "eAVV_CIVFEMCH01" },
            { 47, "eAVV_CIVFEMCH02" },
            { 447, "eAVV_MECH02" },
            { 48, "eAVV_CIVFEMES01" },
            { 49, "eAVV_CIVFEMES02" },
            { 441, "eAVV_MAMBACREW01" },
            { 50, "eAVV_CIVFEMES03" },
            { 51, "eAVV_CIVFEMHI01" },
            { 435, "eAVV_LLAMA_WORKER_FES02" },
            { 52, "eAVV_CIVFEMHI02" },
            { 53, "eAVV_CIVFEMHI03" },
            { 445, "eAVV_MARTINEZ" },
            { 54, "eAVV_CIVMALE01" },
            { 55, "eAVV_CIVMALE02" },
            { 391, "eAVV_JOB_SERVANTFEM07" },
            { 56, "eAVV_CIVMALE03" },
            { 57, "eAVV_CIVMALE04" },
            { 385, "eAVV_JOB_RANGANSECHI01" },
            { 58, "eAVV_CIVMALE05" },
            { 59, "eAVV_CIVMALE06" },
            { 443, "eAVV_MAMBACREW03" },
            { 60, "eAVV_CIVMALE07" },
            { 61, "eAVV_CIVMALE08" },
            { 389, "eAVV_JOB_SERVANT09" },
            { 62, "eAVV_CIVMALE09" },
            { 63, "eAVV_CIVMALE10" },
            { 463, "eAVV_RAT_DUMPLINGCOOK_FCH02" },
            { 64, "eAVV_CIVMALE11" },
            { 65, "eAVV_CIVMALECH01" },
            { 457, "eAVV_NORFOLK" },
            { 66, "eAVV_CIVMALECH02" },
            { 67, "eAVV_CIVMALEES01" },
            { 451, "eAVV_MODEL02" },
            { 68, "eAVV_CIVMALEES02" },
            { 69, "eAVV_CIVMALEES03" },
            { 461, "eAVV_RAT_DUMPLINGCOOK_F05" },
            { 70, "eAVV_CIVMALEHI01" },
            { 71, "eAVV_CIVMALEHI02" },
            { 471, "eAVV_RAT_FACILITYSTAFF_F09" },
            { 72, "eAVV_CIVMALEHI03" },
            { 73, "eAVV_CLEANER01" },
            { 465, "eAVV_RAT_DUMPLINGCOOK_M07" },
            { 74, "eAVV_CLEANER02" },
            { 75, "eAVV_CLEANER03" },
            { 459, "eAVV_ORSON" },
            { 76, "eAVV_CLEANERFEM01" },
            { 77, "eAVV_CLEANERFEM02" },
            { 469, "eAVV_RAT_DUMPLINGCOOK_MCH02" },
            { 78, "eAVV_CLEANERFEM03" },
            { 79, "eAVV_CONSTANT" },
            { 479, "eAVV_PRIEST01" },
            { 80, "eAVV_CREW01" },
            { 81, "eAVV_CREW02" },
            { 473, "eAVV_RAT_FACILITYSTAFF_FCH02" },
            { 82, "eAVV_CREW04" },
            { 83, "eAVV_CROSS" },
            { 467, "eAVV_RAT_DUMPLINGCOOK_M09" },
            { 84, "eAVV_DALIA" },
            { 85, "eAVV_DELGADO" },
            { 477, "eAVV_RAT_FACILITYSTAFF_M09" },
            { 86, "eAVV_DESANTIS" },
            { 87, "eAVV_DINO_BOSCO" },
            { 88, "eAVV_DOCTOR01" },
            { 89, "eAVV_DOCTOR06" },
            { 90, "eAVV_DOCTORFEM03" },
            { 91, "eAVV_DOCTORFEM04" },
            { 475, "eAVV_RAT_FACILITYSTAFF_M07" },
            { 92, "eAVV_ET_ADONIS" },
            { 93, "eAVV_ET_ARGUS" },
            { 94, "eAVV_ET_CARDINAL" },
            { 95, "eAVV_ET_CONNER" },
            { 495, "eAVV_SHAH" },
            { 96, "eAVV_ET_DYLAN" },
            { 97, "eAVV_ET_FABA" },
            { 489, "eAVV_SCIENTIST03" },
            { 98, "eAVV_ET_GARY_LUNN" },
            { 99, "eAVV_ET_HARVERFOEK" },
            { 483, "eAVV_ROBERT_KNOX" },
            { 100, "eAVV_ET_LARIN" },
            { 101, "eAVV_ET_MOXON" },
            { 493, "eAVV_SCIENTISTFEM03" },
            { 102, "eAVV_ET_MR_GIGGLES" },
            { 103, "eAVV_ET_PHILLIPOS" },
            { 503, "eAVV_SOFTGRD03" },
            { 104, "eAVV_ET_SCOTT_SARNO" },
            { 105, "eAVV_ET_TORVIK" },
            { 497, "eAVV_SHEEPGRD05" },
            { 106, "eAVV_ET_TROUTT" },
            { 107, "eAVV_ET_VITO_DURIC" },
            { 491, "eAVV_SCIENTISTFEM01" },
            { 108, "eAVV_FILMCREW01" },
            { 109, "eAVV_FILMCREW02" },
            { 501, "eAVV_SOFTGRD01" },
            { 110, "eAVV_FILMCREW03" },
            { 111, "eAVV_FILMCREW04" },
            { 511, "eAVV_SPECOPS02" },
            { 112, "eAVV_FILMCREWFEM01" },
            { 113, "eAVV_FILMCREWFEM02" },
            { 505, "eAVV_SOLDIER02" },
            { 114, "eAVV_FILMCREWFEM03" },
            { 115, "eAVV_FILMCREWFEM04" },
            { 499, "eAVV_SHEEPGRD07" },
            { 116, "eAVV_FILMCREWFEM05" },
            { 117, "eAVV_FOD_FEM" },
            { 509, "eAVV_SOLDIERBOSS03" },
            { 118, "eAVV_FOD_MALE" },
            { 119, "eAVV_FOX_BARTENDER_F08" },
            { 455, "eAVV_MODELFEM03" },
            { 120, "eAVV_FOX_BARTENDER_F10" },
            { 121, "eAVV_FOX_BARTENDER_M07" },
            { 449, "eAVV_MENDOLA" },
            { 122, "eAVV_FOX_BARTENDER_M08" },
            { 123, "eAVV_FOX_BARTENDER_M09" },
            { 507, "eAVV_SOLDIERBOSS01" },
            { 124, "eAVV_FOX_BARTENDER_MCH01" },
            { 125, "eAVV_FOX_DJ_M07" },
            { 453, "eAVV_MODELFEM01" },
            { 126, "eAVV_FOX_DJ_M11" },
            { 127, "eAVV_FOX_ICAAGENT_M01" },
            { 128, "eAVV_FOX_ICAAGENT_M02" },
            { 314, "eAVV_JOB_FARMFES02" },
            { 129, "eAVV_FOX_ICAAGENT_M04" },
            { 130, "eAVV_FOX_ICAAGENT_M05" },
            { 260, "eAVV_JOB_CASTLESTFEM07" },
            { 131, "eAVV_FOX_ICAAGENT_M06" },
            { 132, "eAVV_FOX_ICAAGENT_M07" },
            { 318, "eAVV_JOB_FARMMES02" },
            { 133, "eAVV_FOX_STAFF_F05" },
            { 134, "eAVV_FOX_STAFF_F06" },
            { 312, "eAVV_JOB_FARMF05" },
            { 135, "eAVV_FOX_STAFF_FCH01" },
            { 136, "eAVV_FOX_STAFF_M07" },
            { 258, "eAVV_JOB_CASSIDYGRD07" },
            { 137, "eAVV_FOX_STAFF_M08" },
            { 138, "eAVV_FOX_STAFF_M09" },
            { 268, "eAVV_JOB_CAVEWKRES02" },
            { 139, "eAVV_FOX_TECH_F05" },
            { 140, "eAVV_FOX_TECH_F06" },
            { 262, "eAVV_JOB_CASTLESTFF10" },
            { 141, "eAVV_FOX_TECH_F08" },
            { 142, "eAVV_FOX_TECH_FCH01" },
            { 256, "eAVV_JOB_CASSIDYGRD05" },
            { 143, "eAVV_FOX_TECH_M06" },
            { 144, "eAVV_FOX_TECH_M07" },
            { 266, "eAVV_JOB_CAVEWKR08" },
            { 145, "eAVV_FOX_TECH_M08" },
            { 146, "eAVV_FOX_TECH_M11" },
            { 276, "eAVV_JOB_CHEFM09" },
            { 147, "eAVV_FOX_THUG_M04" },
            { 148, "eAVV_FOX_THUG_M05" },
            { 270, "eAVV_JOB_CHEFES01" },
            { 149, "eAVV_FOX_THUG_M06" },
            { 150, "eAVV_FOX_THUG_M07" },
            { 264, "eAVV_JOB_CAVEGDES02" },
            { 151, "eAVV_FRANCO" },
            { 152, "eAVV_GARDENER01" },
            { 274, "eAVV_JOB_CHEFM06" },
            { 153, "eAVV_GARDENER02" },
            { 154, "eAVV_GARDENER03" },
            { 284, "eAVV_JOB_CNSTR09" },
            { 155, "eAVV_GARDENERFEM01" },
            { 156, "eAVV_GARDENERFEM02" },
            { 278, "eAVV_JOB_CIVGRD05" },
            { 157, "eAVV_GARDENERFEM03" },
            { 158, "eAVV_GECKO_ARTTECH_F05" },
            { 272, "eAVV_JOB_CHEFES03" },
            { 159, "eAVV_GECKO_ARTTECH_F06" },
            { 160, "eAVV_GECKO_ARTTECH_F08" },
            { 161, "eAVV_GECKO_ARTTECH_F10" },
            { 162, "eAVV_GECKO_ARTTECH_M05" },
            { 292, "eAVV_JOB_COP04" },
            { 163, "eAVV_GECKO_ARTTECH_M06" },
            { 164, "eAVV_GECKO_ARTTECH_M08" },
            { 165, "eAVV_GECKO_ARTTECH_M09" },
            { 166, "eAVV_GECKO_ATTENDANT_M09" },
            { 167, "eAVV_GECKO_ATTENDANT_MHI03" },
            { 168, "eAVV_GECKO_MAINTENANCE_FCH01" },
            { 290, "eAVV_JOB_COCAGRD06" },
            { 169, "eAVV_GECKO_MAINTENANCE_M05" },
            { 170, "eAVV_GECKO_WAITER_F05" },
            { 300, "eAVV_JOB_CUSTDNF05" },
            { 171, "eAVV_GECKO_WAITER_F06" },
            { 172, "eAVV_GECKO_WAITER_F09" },
            { 294, "eAVV_JOB_COP06" },
            { 173, "eAVV_GECKO_WAITER_F10" },
            { 174, "eAVV_GECKO_WAITER_FHI02" },
            { 288, "eAVV_JOB_CNSTRGRD06" },
            { 175, "eAVV_GECKO_WAITER_M07" },
            { 176, "eAVV_GECKO_WAITER_M08" },
            { 298, "eAVV_JOB_COUNSLRM07" },
            { 177, "eAVV_GECKO_WAITER_M09" },
            { 178, "eAVV_GECKO_WAITER_M11" },
            { 308, "eAVV_JOB_CUSTDNM09" },
            { 179, "eAVV_GECKO_WAITER_MHI03" },
            { 180, "eAVV_GRAVES" },
            { 302, "eAVV_JOB_CUSTDNF07" },
            { 181, "eAVV_GUARDIA02" },
            { 182, "eAVV_GUARDIA03" },
            { 296, "eAVV_JOB_COUNSLRF08" },
            { 183, "eAVV_HOUSSTFF01" },
            { 184, "eAVV_HOUSSTFF02" },
            { 306, "eAVV_JOB_CUSTDNM07" },
            { 185, "eAVV_HOUSSTFF03" },
            { 186, "eAVV_HOUSSTFF06" },
            { 316, "eAVV_JOB_FARMM08" },
            { 187, "eAVV_HOUSSTFFEM01" },
            { 188, "eAVV_HOUSSTFFEM02" },
            { 310, "eAVV_JOB_DRUGLABWKRES02" },
            { 189, "eAVV_HOUSSTFFEM03" },
            { 190, "eAVV_HUSH" },
            { 304, "eAVV_JOB_CUSTDNF09" },
            { 191, "eAVV_ICAAGENT_M05" },
            { 192, "eAVV_INGRAM" },
            { 378, "eAVV_JOB_QUEENTGHI02" },
            { 193, "eAVV_INTERN" },
            { 194, "eAVV_JANUS" },
            { 324, "eAVV_JOB_GARBAGRD05" },
            { 195, "eAVV_JOB_ACTORFEMHI02" },
            { 196, "eAVV_JOB_ACTORHI01" },
            { 382, "eAVV_JOB_RAIDER07" },
            { 197, "eAVV_JOB_ARCHTCTF05" },
            { 198, "eAVV_JOB_ARCHTCTF07" },
            { 376, "eAVV_JOB_QUEENGRDHI03" },
            { 199, "eAVV_JOB_ARCHTCTF08" },
            { 200, "eAVV_JOB_ARCHTCTF09" },
            { 322, "eAVV_JOB_GARBAGEES01" },
            { 201, "eAVV_JOB_ARCHTCTM06" },
            { 202, "eAVV_JOB_ARCHTCTM07" },
            { 332, "eAVV_JOB_GRDNRGRD06" },
            { 203, "eAVV_JOB_ARCHTCTM08" },
            { 204, "eAVV_JOB_ARCHTCTM09" },
            { 326, "eAVV_JOB_GARBAGRD07" },
            { 205, "eAVV_JOB_ARCHTCTM10" },
            { 206, "eAVV_JOB_ARKELITE04" },
            { 320, "eAVV_JOB_GARBAGE08" },
            { 207, "eAVV_JOB_ARKELITE05" },
            { 208, "eAVV_JOB_ARKELITE06" },
            { 330, "eAVV_JOB_GRDNRGRD04" },
            { 209, "eAVV_JOB_ARKELITE07" },
            { 210, "eAVV_JOB_ARKIANF05" },
            { 340, "eAVV_JOB_HSSTFMES02" },
            { 549, "eAVV_WASHINGTON" },
            { 211, "eAVV_JOB_ARKIANF06" },
            { 212, "eAVV_JOB_ARKIANF07" },
            { 334, "eAVV_JOB_GUARD04" },
            { 213, "eAVV_JOB_ARKIANF08" },
            { 214, "eAVV_JOB_ARKIANF09" },
            { 328, "eAVV_JOB_GRDNR09" },
            { 215, "eAVV_JOB_ARKIANM06" },
            { 216, "eAVV_JOB_ARKIANM07" },
            { 338, "eAVV_JOB_HSSTFFES02" },
            { 217, "eAVV_JOB_ARKIANM08" },
            { 218, "eAVV_JOB_ARKIANM09" },
            { 348, "eAVV_JOB_LNDRYGRDHI03" },
            { 557, "eAVV_YAMASAKI" },
            { 219, "eAVV_JOB_ARKIANM10" },
            { 220, "eAVV_JOB_ARKPTRNF05" },
            { 342, "eAVV_JOB_JANUSGRD04" },
            { 221, "eAVV_JOB_ARKPTRNF06" },
            { 222, "eAVV_JOB_ARKPTRNF07" },
            { 336, "eAVV_JOB_GUARD06" },
            { 545, "eAVV_WAITERFEM01" },
            { 223, "eAVV_JOB_ARKPTRNF08" },
            { 224, "eAVV_JOB_ARKPTRNF09" },
            { 282, "eAVV_JOB_CLOTHSALHI02" },
            { 225, "eAVV_JOB_ARKPTRNM06" },
            { 226, "eAVV_JOB_ARKPTRNM07" },
            { 356, "eAVV_JOB_MEDICFEM06" },
            { 227, "eAVV_JOB_ARKPTRNM08" },
            { 228, "eAVV_JOB_ARKPTRNM09" },
            { 286, "eAVV_JOB_CNSTRGRD04" },
            { 229, "eAVV_JOB_ARKPTRNM10" },
            { 230, "eAVV_JOB_ARKSTAFFF05" },
            { 280, "eAVV_JOB_CIVGRD07" },
            { 231, "eAVV_JOB_ARKSTAFFF06" },
            { 232, "eAVV_JOB_ARKSTAFFM06" },
            { 354, "eAVV_JOB_MANSIONGD07" },
            { 233, "eAVV_JOB_ARKSTAFFM07" },
            { 234, "eAVV_JOB_ARKSTAFFM08" },
            { 364, "eAVV_JOB_MUMBSRVHI03" },
            { 235, "eAVV_JOB_BANKERF05" },
            { 236, "eAVV_JOB_BANKERF06" },
            { 358, "eAVV_JOB_MTLWKRHI02" },
            { 237, "eAVV_JOB_BANKERF08" },
            { 238, "eAVV_JOB_BANKERM06" },
            { 352, "eAVV_JOB_MANSIONGD05" },
            { 239, "eAVV_JOB_BANKERM07" },
            { 240, "eAVV_JOB_BANKERM08" },
            { 362, "eAVV_JOB_MUMBSRVHI01" },
            { 241, "eAVV_JOB_BANKERM09" },
            { 242, "eAVV_JOB_BANKGRD05" },
            { 372, "eAVV_JOB_NITIATEM06" },
            { 243, "eAVV_JOB_BANKGRD06" },
            { 244, "eAVV_JOB_BANKGRD07" },
            { 366, "eAVV_JOB_MUSICIANM06" },
            { 245, "eAVV_JOB_BANKGRDCHF" },
            { 246, "eAVV_JOB_BANKIT07" },
            { 360, "eAVV_JOB_MUMBSECHI02" },
            { 247, "eAVV_JOB_BANKMTNC08" },
            { 248, "eAVV_JOB_BBQGRD04" },
            { 370, "eAVV_JOB_MUSICIANM10" },
            { 249, "eAVV_JOB_BBQGRD05" },
            { 250, "eAVV_JOB_BBQGRD06" },
            { 380, "eAVV_JOB_RAIDER05" },
            { 251, "eAVV_JOB_BBQGRD07" },
            { 252, "eAVV_JOB_BOLLYCREWHI01" },
            { 374, "eAVV_JOB_QUEENGRDHI01" },
            { 253, "eAVV_JOB_BOLLYCREWHI02" },
            { 254, "eAVV_JOB_BOLLYCREWHI03" },
            { 368, "eAVV_JOB_MUSICIANM08" },
            { 255, "eAVV_JOB_CASSIDYGRD04" },
            { 257, "eAVV_JOB_CASSIDYGRD06" },
            { 259, "eAVV_JOB_CASTLESTFEM05" },
            { 261, "eAVV_JOB_CASTLESTFF07" },
            { 263, "eAVV_JOB_CAVEGDES01" },
            { 265, "eAVV_JOB_CAVEWKR07" },
            { 267, "eAVV_JOB_CAVEWKRES01" },
            { 269, "eAVV_JOB_CAVEWKRES03" },
            { 271, "eAVV_JOB_CHEFES02" },
            { 273, "eAVV_JOB_CHEFF07" },
            { 275, "eAVV_JOB_CHEFM07" },
            { 277, "eAVV_JOB_CIVGRD04" },
            { 279, "eAVV_JOB_CIVGRD06" },
            { 281, "eAVV_JOB_CLOTHSALHI01" },
            { 283, "eAVV_JOB_CNSTR08" },
            { 285, "eAVV_JOB_CNSTRES01" },
            { 287, "eAVV_JOB_CNSTRGRD05" },
            { 289, "eAVV_JOB_CNSTRGRD07" },
            { 291, "eAVV_JOB_COCAGRDES02" },
            { 293, "eAVV_JOB_COP05" },
            { 295, "eAVV_JOB_COP07" },
            { 297, "eAVV_JOB_COUNSLRF09" },
            { 299, "eAVV_JOB_COUNSLRM09" },
            { 301, "eAVV_JOB_CUSTDNF06" },
            { 303, "eAVV_JOB_CUSTDNF08" },
            { 305, "eAVV_JOB_CUSTDNM06" },
            { 307, "eAVV_JOB_CUSTDNM08" },
            { 309, "eAVV_JOB_CUSTDNM10" },
            { 311, "eAVV_JOB_DRUGLABWKRES03" },
            { 313, "eAVV_JOB_FARMFES01" },
            { 315, "eAVV_JOB_FARMM06" },
            { 317, "eAVV_JOB_FARMMES01" },
            { 319, "eAVV_JOB_FARMMES03" },
            { 321, "eAVV_JOB_GARBAGE09" },
            { 323, "eAVV_JOB_GARBAGRD04" },
            { 325, "eAVV_JOB_GARBAGRD06" },
            { 327, "eAVV_JOB_GRDNR08" },
            { 329, "eAVV_JOB_GRDNRES01" },
            { 331, "eAVV_JOB_GRDNRGRD05" },
            { 333, "eAVV_JOB_GRDNRGRD07" },
            { 335, "eAVV_JOB_GUARD05" },
            { 337, "eAVV_JOB_GUARD07" },
            { 339, "eAVV_JOB_HSSTFFES03" },
            { 341, "eAVV_JOB_HSSTFMES03" },
            { 343, "eAVV_JOB_JANUSGRD05" },
            { 344, "eAVV_JOB_JANUSGRD06" },
            { 553, "eAVV_YACHTCREW01" },
            { 345, "eAVV_JOB_JANUSGRD07" },
            { 346, "eAVV_JOB_LNDRYGRDHI01" },
            { 347, "eAVV_JOB_LNDRYGRDHI02" },
            { 349, "eAVV_JOB_LNDRYWKRHI01" },
            { 350, "eAVV_JOB_LNDRYWKRHI02" },
            { 351, "eAVV_JOB_LNDRYWKRHI03" },
            { 353, "eAVV_JOB_MANSIONGD06" },
            { 355, "eAVV_JOB_MANSIONGDES02" },
            { 357, "eAVV_JOB_MTLWKRHI01" },
            { 359, "eAVV_JOB_MTLWKRHI03" },
            { 361, "eAVV_JOB_MUMBSECHI03" },
            { 363, "eAVV_JOB_MUMBSRVHI02" },
            { 365, "eAVV_JOB_MUSICIANF05" },
            { 367, "eAVV_JOB_MUSICIANM07" },
            { 369, "eAVV_JOB_MUSICIANM09" },
            { 371, "eAVV_JOB_NITIATEF05" },
            { 373, "eAVV_JOB_NITIATEM07" },
            { 375, "eAVV_JOB_QUEENGRDHI02" },
            { 377, "eAVV_JOB_QUEENSTGHI03" },
            { 379, "eAVV_JOB_RAIDER04" },
            { 381, "eAVV_JOB_RAIDER06" },
            { 383, "eAVV_JOB_RANGANGRD05" },
            { 384, "eAVV_JOB_RANGANGRD06" },
            { 529, "eAVV_STYLISTFEM01" },
            { 386, "eAVV_JOB_RANGANSECHI02" },
            { 388, "eAVV_JOB_SERVANT08" },
            { 533, "eAVV_THUGES01" },
            { 390, "eAVV_JOB_SERVANTES02" },
            { 392, "eAVV_JOB_SITEWKR06" },
            { 537, "eAVV_THUGHI02" },
            { 394, "eAVV_JOB_SITEWKR08" },
            { 396, "eAVV_JOB_SITEWKRES01" },
            { 541, "eAVV_WAITER01" },
            { 398, "eAVV_JOB_SITEWKRES03" },
            { 400, "eAVV_JOB_STINGSEC05" },
            { 402, "eAVV_JOB_STINGSMASSF09" },
            { 404, "eAVV_JOB_STINGSTAFFM06" },
            { 406, "eAVV_JOB_STINGTECHF08" },
            { 408, "eAVV_JOB_STINGTECHM09" },
            { 410, "eAVV_JOB_STINGVILLAGRD05" },
            { 412, "eAVV_JOB_STINGWTRF05" },
            { 414, "eAVV_JOB_STINGWTRM08" },
            { 416, "eAVV_JOB_SUBWKR07" },
            { 417, "eAVV_JOB_TEASERVHI02" },
            { 418, "eAVV_JOB_THUGHI01" },
            { 420, "eAVV_JOB_THUGHI03" },
            { 421, "eAVV_JOB_TRAINSERVHI01" },
            { 422, "eAVV_JOB_VILLAGEGDES01" },
            { 423, "eAVV_JOB_VILLAGEGDES03" },
            { 424, "eAVV_KNOX_R" },
            { 426, "eAVV_KONG" },
            { 428, "eAVV_LLAMA_WAITER_F05" },
            { 430, "eAVV_LLAMA_WAITER_F10" },
            { 432, "eAVV_LLAMA_WAITER_M07" },
            { 513, "eAVV_STAFFEM03" },
            { 434, "eAVV_LLAMA_WORKER_FES01" },
            { 436, "eAVV_LLAMA_WORKER_FES03" },
            { 517, "eAVV_STAFFMALE02" },
            { 438, "eAVV_LLAMA_WORKER_MES02" },
            { 440, "eAVV_MAELSTROM" },
            { 521, "eAVV_STAFFMALE06" },
            { 442, "eAVV_MAMBACREW02" },
            { 444, "eAVV_MAMBACREW04" },
            { 525, "eAVV_STYLIST01" },
            { 446, "eAVV_MECH01" },
            { 448, "eAVV_MECH03" },
            { 450, "eAVV_MODEL01" },
            { 452, "eAVV_MODEL03" },
            { 454, "eAVV_MODELFEM02" },
            { 456, "eAVV_MORGAN" },
            { 458, "eAVV_NOVIKOV" },
            { 460, "eAVV_PARVATI" },
            { 462, "eAVV_RAT_DUMPLINGCOOK_F06" },
            { 464, "eAVV_RAT_DUMPLINGCOOK_M06" },
            { 466, "eAVV_RAT_DUMPLINGCOOK_M08" },
            { 468, "eAVV_RAT_DUMPLINGCOOK_MCH01" },
            { 470, "eAVV_RAT_FACILITYSTAFF_F06" },
            { 472, "eAVV_RAT_FACILITYSTAFF_FCH01" },
            { 474, "eAVV_RAT_FACILITYSTAFF_M06" },
            { 476, "eAVV_RAT_FACILITYSTAFF_M08" },
            { 478, "eAVV_RAT_FACILITYSTAFF_M11" },
            { 480, "eAVV_RANGAN" },
            { 482, "eAVV_RITTER" },
            { 484, "eAVV_ROSE" },
            { 486, "eAVV_SANTA" },
            { 488, "eAVV_SCIENTIST02" },
            { 490, "eAVV_SCIENTIST04" },
            { 492, "eAVV_SCIENTISTFEM02" },
            { 494, "eAVV_SCIENTISTFEM04" },
            { 496, "eAVV_SHEEPGRD04" },
            { 498, "eAVV_SHEEPGRD06" },
            { 500, "eAVV_SIERRA_KNOX" },
            { 502, "eAVV_SOFTGRD02" },
            { 504, "eAVV_SOLDIER01" },
            { 506, "eAVV_SOLDIER03" },
            { 508, "eAVV_SOLDIERBOSS02" },
            { 510, "eAVV_SPECOPS01" },
            { 512, "eAVV_SPECOPS03" },
            { 514, "eAVV_STAFFEM04" },
            { 515, "eAVV_STAFFEM05" },
            { 516, "eAVV_STAFFMALE01" },
            { 518, "eAVV_STAFFMALE03" },
            { 519, "eAVV_STAFFMALE04" },
            { 520, "eAVV_STAFFMALE05" },
            { 522, "eAVV_STEVENBRADLEY" },
            { 523, "eAVV_STRANDBERG" },
            { 524, "eAVV_STUYVESANT" },
            { 526, "eAVV_STYLIST02" },
            { 527, "eAVV_STYLIST03" },
            { 528, "eAVV_STYLIST04" },
            { 530, "eAVV_STYLISTFEM02" },
            { 531, "eAVV_STYLISTFEM03" },
            { 532, "eAVV_STYLISTFEM04" },
            { 534, "eAVV_THUGES02" },
            { 535, "eAVV_THUGES03" },
            { 536, "eAVV_THUGHI01" },
            { 538, "eAVV_THUGHI03" },
            { 539, "eAVV_TYSONWILLIAMS" },
            { 540, "eAVV_VIDAL" },
            { 542, "eAVV_WAITER02" },
            { 543, "eAVV_WAITER03" },
            { 544, "eAVV_WAITER04" },
            { 546, "eAVV_WAITERFEM02" },
            { 547, "eAVV_WAITERFEM03" },
            { 548, "eAVV_WAITERFEM04" },
            { 550, "eAVV_WS_BOULTON" },
            { 551, "eAVV_WS_NEWMAN" },
            { 552, "eAVV_WS_WATSON" },
            { 554, "eAVV_YACHTCREW02" },
            { 555, "eAVV_YACHTCREW03" },
            { 556, "eAVV_YACHTCREW04" },
            { 558, "eAVV_YATES" },
            { 559, "eAVV_ZAYDAN" }
        };

        (*enum_map)["ECharacterAnimChildNetworkSlot"] = std::map<uint32_t, std::string>{
            { 0, "eCACNS_None" },
            { 1, "eCACNS_FlavorIdle_FB" },
            { 2, "eCACNS_FlavorIdle_RH" },
            { 3, "eCACNS_FlavorIdle_LH" },
            { 4, "eCACNS_Interaction_RH" },
            { 5, "eCACNS_Interaction_LH" }
        };

        (*enum_map)["EStealthSituation"] = std::map<uint32_t, std::string>{
            { 0, "SS_DISGUISE_TAKEN" },
            { 1, "SS_DISGUISE_TRESPASSING" },
            { 2, "SS_DISGUISE_ILLEGAL_ACTION" },
            { 3, "SS_DISGUISE_REMOVED" },
            { 4, "SS_DISGUISE_INVESTIGATED" },
            { 5, "SS_DISGUISE_BLOWN" },
            { 6, "SS_HIDE_IN_CLOSET_FIRSTTIME" },
            { 7, "SS_HIDE_IN_CLOSET" },
            { 8, "SS_DOOR_START_LOCKPICKING" },
            { 9, "SS_DOOR_CANCEL_LOCKPICKING" },
            { 10, "SS_LANDMINE_ARMED" },
            { 11, "SS_RADIO_ON" },
            { 12, "SS_VENT_ENTER" },
            { 13, "SS_VENT_EXIT" },
            { 14, "SS_BLEND_IN_ACTIVATED" },
            { 15, "SS_BODY_DISCOVERED" },
            { 16, "SS_INVESTIGATE_GUNSHOT" },
            { 17, "SS_INVESTIGATE_NOISE" },
            { 18, "SS_INVESTIGATE_EXPLOSION" },
            { 19, "SS_FUSEBOX_DISABLE_UNIQUE" },
            { 20, "SS_FUSEBOX_DISABLE" },
            { 21, "SS_INVESTIGATING_FUSEBOX" },
            { 22, "SS_FUSEBOX_FIXED" },
            { 23, "SS_KEYCARD_PICKUP" },
            { 24, "SS_KEYCARD_USE" },
            { 25, "SS_BODY_PUT_IN_CONTAINER" },
            { 26, "SS_BODY_DRAGGING_SEEN" },
            { 27, "SS_BODY_OVER_RAIL" },
            { 28, "SS_BODY_OVER_LEDGE" },
            { 29, "SS_USE_HEALTH_STATION" },
            { 30, "SS_HITMAN_SPOTTED" },
            { 31, "SS_HITMAN_HIDDEN" },
            { 32, "SS_HITMAN_ENTERED_COMBAT" },
            { 33, "SS_TRESPASSING" },
            { 34, "SS_SECURITYTAPE_PICKUP" },
            { 35, "SS_NEWOBJECTIVE" },
            { 36, "SS_FOCUSADDED" },
            { 37, "SS_FOCUSFULL" },
            { 38, "SS_FOCUSEMPTY" },
            { 39, "SS_STARTED_SPRINTING" },
            { 40, "SS_STARTED_SNEAKING" },
            { 41, "SS_TOOK_COVER" },
            { 42, "SS_INVESTIGATE_CURIOUS" },
            { 43, "SS_GENERIC_PICKUP" },
            { 44, "SS_ATTENTION_ON" },
            { 45, "SS_ATTENTION_OFF" },
            { 46, "SS_DEADBODY_SEEN" },
            { 47, "SS_TARGET_EVACUATES" },
            { 48, "SS_UNKNOWN_BODY_SPOTTED" }
        };

        (*enum_map)["ZHeroKeywordCondition.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" },
            { 3, "ANY_TRUE_IF_NO_REQS" }
        };

        (*enum_map)["EAudioVolumetricMixingMode"] = std::map<uint32_t, std::string>{
            { 0, "AUDIO_VOLUMETRIC_MIXING_MAX_ALL" },
            { 1, "AUDIO_VOLUMETRIC_MIXING_MAX_3D" },
            { 2, "AUDIO_VOLUMETRIC_MIXING_ADD" }
        };

        (*enum_map)["ZActorBoneAttachEntity.EResetMode"] = std::map<uint32_t, std::string>{
            { 0, "eAtBoneOrigin" },
            { 1, "eKeepOffset" }
        };

        (*enum_map)["IHM5Door.ECPDoorLockType"] = std::map<uint32_t, std::string>{
            { 0, "CPDLT_NORMAL_LOCK" },
            { 1, "CPDLT_PUSH_BAR_PAD_LOCK" }
        };

        (*enum_map)["EActorRank"] = std::map<uint32_t, std::string>{
            { 0, "AR_Default" },
            { 1, "AR_Elite" },
            { 2, "AR_Cop" },
            { 3, "AR_Goon" }
        };

        (*enum_map)["EPersistentBoolDataSyncType"] = std::map<uint32_t, std::string>{
            { 0, "ePBDST_None" },
            { 1, "ePBDST_ServerAuthoritative" },
            { 2, "ePBDST_Full" }
        };

        (*enum_map)["ESaveLoadStatus"] = std::map<uint32_t, std::string>{
            { 0, "ESaveLoadStatus_OK" },
            { 1, "ESaveLoadStatus_PROCESSING" },
            { 2, "ESaveLoadStatus_MISSING" },
            { 3, "ESaveLoadStatus_ERROR_NODISKSPACE" },
            { 4, "ESaveLoadStatus_ERROR_DEVICEREMOVED" },
            { 5, "ESaveLoadStatus_ERROR_CORRUPT" },
            { 6, "ESaveLoadStatus_ERROR_VERSION" },
            { 7, "ESaveLoadStatus_ERROR_TAMPERED" },
            { 8, "ESaveLoadStatus_ERROR_SAVING" },
            { 9, "ESaveLoadStatus_ERROR_FATAL" },
            { 10, "ESaveLoadStatus_ERROR_ONLINE" },
            { 11, "ESaveLoadStatus_ERROR_REQUIREMENTCHECK" },
            { 12, "ESaveLoadStatus_ERROR_VRMODE" },
            { 13, "ESaveLoadStatus_ERROR_INVALIDATED" }
        };

        (*enum_map)["ESituationAvailability"] = std::map<uint32_t, std::string>{
            { 0, "ESA_AMBIENCE" },
            { 10000, "ESA_AMBIENCE_RESV" },
            { 20000, "ESA_OVR_STANDING" },
            { 70000, "ESA_OVR_ALL" },
            { 30000, "ESA_OVR_CURIOUS" },
            { 40000, "ESA_OVR_SENTRY" },
            { 50000, "ESA_OVR_CAUTIOUS" },
            { 60000, "ESA_OVR_COMBAT" }
        };

        (*enum_map)["EEntityOrdering"] = std::map<uint32_t, std::string>{
            { 0, "EO_LOW" },
            { 1, "EO_NORMAL" },
            { 2, "EO_HIGH" }
        };

        (*enum_map)["EAccidentDeathContext"] = std::map<uint32_t, std::string>{
            { 0, "eADC_DeathByAccident" },
            { 1, "eADC_DeathBySniper" },
            { 2, "eADC_DeathByPoison" },
            { 3, "eADC_DeathByShot" }
        };

        (*enum_map)["EActorType"] = std::map<uint32_t, std::string>{
            { 0, "eAT_Civilian" },
            { 1, "eAT_Guard" },
            { 2, "eAT_Hitman" },
            { 3, "eAT_Last" }
        };

        (*enum_map)["EDialogEventItemType"] = std::map<uint32_t, std::string>{
            { 1, "eDEIT_WavFile" },
            { 2, "eDEIT_RandomContainer" },
            { 3, "eDEIT_SwitchContainer" },
            { 4, "eDEIT_SequenceContainer" },
            { 15, "eDEIT_Invalid" }
        };

        (*enum_map)["ZAT2Controller.EFoot"] = std::map<uint32_t, std::string>{
            { 0, "FOOT_LEFT" },
            { 1, "FOOT_RIGHT" }
        };

        (*enum_map)["ECharacterUpperBodyStateType"] = std::map<uint32_t, std::string>{
            { 0, "eSM_UB_EmptyHanded" },
            { 1, "eSM_UB_Unholster" },
            { 2, "eSM_UB_Hold" },
            { 3, "eSM_UB_Reload" },
            { 4, "eSM_UB_Holster" },
            { 5, "eSM_UB_Conceal" },
            { 6, "eSM_UB_SwapItemHand" },
            { 7, "eSM_UB_Aiming" },
            { 8, "eSM_UB_Pickup" },
            { 9, "eSM_UB_InteractionSwipe" },
            { 10, "eSM_UB_Interaction" },
            { 11, "eSM_UB_Slave" },
            { 12, "eSM_UB_OpenDoor" },
            { 13, "eSM_UB_FlavorIdle" },
            { 14, "eSM_UB_ChangeAmmo" },
            { 15, "eSM_UB_Assemble" },
            { 16, "eSM_UB_Fiberwire" },
            { 17, "eSM_UB_PrimeTwoHanded" },
            { 18, "eSM_UB_SnapNeck" }
        };

        (*enum_map)["ZDecalControllerEntity.ERotationType"] = std::map<uint32_t, std::string>{
            { 0, "eRotationDisable" },
            { 1, "eRotationAlignRay" },
            { 2, "eRotationRandom" }
        };

        (*enum_map)["IScatterContainerEntity.EBrushType"] = std::map<uint32_t, std::string>{
            { 0, "BRUSH_SQUARE" },
            { 1, "BRUSH_CIRCLE" }
        };

        (*enum_map)["EBaseMovementType"] = std::map<uint32_t, std::string>{
            { 4, "eMovementCover" },
            { -1, "eMovementNone" },
            { 36, "eMovementLocomotion" },
            { 0, "eMovementDead" },
            { 1, "eMovementNewFullBody" },
            { 2, "eMovementAgility" },
            { 3, "eMovementAlign" },
            { 5, "eMovementDrainPipe" },
            { 6, "eMovementLadder" },
            { 7, "eMovementPullVictimFromWindow" },
            { 8, "eMovementFiberWireKill" },
            { 9, "eMovementDumpBody" },
            { 10, "eMovementThrowBodyOverRail" },
            { 11, "eMovementDumpBodyOverLedge" },
            { 12, "eMovementOperateCPDoor" },
            { 13, "eMovementDisguiseSafeZone" },
            { 14, "eMovementHideInCloset" },
            { 15, "eMovementTakeDown" },
            { 16, "eMovementCloseCombat" },
            { 17, "eMovementRecoveryFinisher" },
            { 18, "eMovementContextAction" },
            { 19, "eMovementSubaction" },
            { 20, "eMovementGrabVictim" },
            { 21, "eMovementPushVictimThroughWindowAndRail" },
            { 22, "eMovementContextKill" },
            { 23, "eMovementKickVictimOverLedge" },
            { 24, "eMovementDragBody" },
            { 25, "eMovementTakeClothes" },
            { 26, "eMovementCoupDeGrace" },
            { 27, "eMovementThrow" },
            { 28, "eMovementPlace" },
            { 29, "eMovementSurrender" },
            { 30, "eMovementFrisk" },
            { 31, "eMovementShowItem" },
            { 32, "eMovementPeek" },
            { 33, "eMovementFocusedInteraction" },
            { 34, "eMovementSilentTakedown" },
            { 35, "eMovementSnapNeck" },
            { 37, "eMovementLast" },
            { 38, "eMovementPickupItem" }
        };

        (*enum_map)["ZHM5LedgeMount.EFaceDirection"] = std::map<uint32_t, std::string>{
            { 0, "eFaceFront" },
            { 1, "eFaceLeft" },
            { 2, "eFaceRight" }
        };

        (*enum_map)["ZMoveToPositionBehaviorEntity.EApproachAlignment"] = std::map<uint32_t, std::string>{
            { 0, "AA_STRICT" },
            { 1, "AA_LOOSE" }
        };

        (*enum_map)["EClothBendConstrainType"] = std::map<uint32_t, std::string>{
            { 0, "eClothBendConstrainType_Stick" },
            { 1, "eClothBendConstrainType_Triangle" }
        };

        (*enum_map)["ERoleEvent"] = std::map<uint32_t, std::string>{
            { 0, "eRE_NONE" },
            { 1, "eRE_CAST" },
            { 2, "eRE_CLEAR" },
            { 3, "eRE_ENTER_DRAMA" },
            { 4, "eRE_REENTER_DRAMA" },
            { 5, "eRE_LEAVE_DRAMA" },
            { 6, "eRE_NEW_DRAMA" },
            { 7, "eRE_PAUSED" },
            { 8, "eRE_RESUMING" },
            { 9, "eRE_RUNNING" }
        };

        (*enum_map)["ZWorldUIElementInstanceBase.EVisibility"] = std::map<uint32_t, std::string>{
            { 0, "EVIS_ALWAYS" },
            { 1, "EVIS_POSY" },
            { 2, "EVIS_NEGY" },
            { 3, "EVIS_POSX" },
            { 4, "EVIS_NEGX" }
        };

        (*enum_map)["EHUDIconFlags"] = std::map<uint32_t, std::string>{
            { 1, "HUD_ICON_FLAG_POSITION" },
            { 2, "HUD_ICON_FLAG_VALUE" },
            { 4, "HUD_ICON_FLAG_SCALE" },
            { 8, "HUD_ICON_FLAG_TEXT" }
        };

        (*enum_map)["EDeathAnimationType"] = std::map<uint32_t, std::string>{
            { 0, "DAT_None" },
            { 1, "DAT_SingleShot" },
            { 2, "DAT_BurstShot" },
            { 3, "DAT_HeavyShot" },
            { 4, "DAT_Unknown" }
        };

        (*enum_map)["ZCautiousInvestigateGroup.EAssistantState"] = std::map<uint32_t, std::string>{
            { 0, "AS_Waiting" },
            { 1, "AS_CalculateFields" },
            { 2, "AS_RequestNode" },
            { 3, "AS_Moving" },
            { 4, "AS_Investigating" },
            { 5, "AS_Max" }
        };

        (*enum_map)["ZHM5Animator.EBoneAnimator"] = std::map<uint32_t, std::string>{
            { 0, "BA_ANIMATION" },
            { 1, "BA_RAGDOLL" },
            { 2, "BA_BLENDING" },
            { 3, "BA_POWEREDRAGDOLL" },
            { 4, "BA_POSE" }
        };

        (*enum_map)["ERestitutionCombineMode"] = std::map<uint32_t, std::string>{
            { 0, "ERestitutionCombineMode_AVERAGE" },
            { 1, "ERestitutionCombineMode_MIN" },
            { 2, "ERestitutionCombineMode_MULTIPLY" },
            { 3, "ERestitutionCombineMode_MAX" }
        };

        (*enum_map)["ECharacterIdlePriority"] = std::map<uint32_t, std::string>{
            { 0, "eCIP_Irrelevant" },
            { 1, "eCIP_VeryLow" },
            { 2, "eCIP_QuiteLow" },
            { 3, "eCIP_Low" },
            { 4, "eCIP_MediumLow" },
            { 5, "eCIP_Medium" },
            { 6, "eCIP_MediumHigh" },
            { 7, "eCIP_High" },
            { 8, "eCIP_QuiteHigh" },
            { 9, "eCIP_VeryHigh" },
            { 10, "eCIP_Urgent" }
        };

        (*enum_map)["ZSequenceEntity.ECommand"] = std::map<uint32_t, std::string>{
            { 0, "COMMAND_START" },
            { 1, "COMMAND_ENABLE_PREVIEW" },
            { 2, "COMMAND_STOP" },
            { 3, "COMMAND_DISABLE_PREVIEW" },
            { 4, "COMMAND_ABORT" },
            { 5, "COMMAND_PAUSE" },
            { 6, "COMMAND_UNPAUSE" },
            { 7, "COMMAND_SETTIME" },
            { 8, "COMMAND_SKIPTOEND" },
            { 9, "COMMAND_GAME_PAUSE" },
            { 10, "COMMAND_GAME_UNPAUSE" },
            { 11, "COMMAND_PREVIEW_PAUSE" },
            { 12, "COMMAND_PREVIEW_STOP" },
            { 13, "COMMAND_PREVIEW_PLAY" },
            { 14, "COMMAND_PREVIEW_LOOPED" },
            { 15, "COMMAND_CLEAR" }
        };

        (*enum_map)["ZVRCameraEntity.EEye"] = std::map<uint32_t, std::string>{
            { 0, "eLeftEye" },
            { 1, "eRightEye" }
        };

        (*enum_map)["EDisposalType"] = std::map<uint32_t, std::string>{
            { 0, "DISPOSAL_UNDEFINED" },
            { 1, "DISPOSAL_NOTHING" },
            { 2, "DISPOSAL_HOLSTER" },
            { 3, "DISPOSAL_HIDE" },
            { 4, "DISPOSAL_PLACE" },
            { 5, "DISPOSAL_DROP" },
            { 6, "DISPOSAL_DROP_HIDE" },
            { 7, "DISPOSAL_DESTROY" },
            { 8, "DISPOSAL_COUNT" }
        };

        (*enum_map)["EDynamicVariableType"] = std::map<uint32_t, std::string>{
            { -1, "DV_Invalid" },
            { 4, "DV_Sounds" },
            { 0, "DV_Me" },
            { 1, "DV_Hitman" },
            { 2, "DV_InSight" },
            { 3, "DV_RecentlyInSight" },
            { 5, "DV_NumVariables" }
        };

        (*enum_map)["EButtonState"] = std::map<uint32_t, std::string>{
            { -1, "BUTTON_STATE_DISABLED" },
            { 0, "BUTTON_STATE_NONE" },
            { 1, "BUTTON_STATE_ENABLED" },
            { 2, "BUTTON_STATE_PRESSED" },
            { 3, "BUTTON_STATE_BLINKING" }
        };

        (*enum_map)["ZHM5AgilityEventConsumer.EEvent"] = std::map<uint32_t, std::string>{
            { 0, "EAE_LEFTHAND" },
            { 1, "EAE_RIGHTHAND" },
            { 2, "EAE_LEFTLEG" },
            { 3, "EAE_RIGHTLEG" }
        };

        (*enum_map)["ZHM5BodyContainer.EBCState"] = std::map<uint32_t, std::string>{
            { 0, "BC_CLOSED" },
            { 1, "BC_OPEN" },
            { 2, "BC_FLUSH" },
            { 3, "BC_OPENING" },
            { 4, "BC_CLOSING" },
            { 5, "BC_FLUSHING" }
        };

        (*enum_map)["ZHM5Item.EKeywordEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" }
        };

        (*enum_map)["InputControlNamesp.eHM5InputActionID"] = std::map<uint32_t, std::string>{
            { 0, "eIDButtonFaceDown" },
            { 1, "eIDButtonFaceLeft" },
            { 2, "eIDButtonFaceRight" },
            { 3, "eIDButtonFaceUp" },
            { 4, "eIDBumperLeft" },
            { 5, "eIDBumperRight" },
            { 6, "eIDDpadDown" },
            { 7, "eIDDpadLeft" },
            { 8, "eIDDpadRight" },
            { 9, "eIDDpadUp" },
            { 10, "eIDThumbLeft" },
            { 11, "eIDThumbRight" },
            { 12, "eIDButtonStart" },
            { 13, "eIDButtonSelect" },
            { 14, "eIDTriggerLeft" },
            { 15, "eIDTriggerRight" },
            { 16, "eIDStickLeftHorizontal" },
            { 17, "eIDStickLeftVertical" },
            { 18, "eIDStickRightHorizontal" },
            { 19, "eIDStickRightVertical" },
            { 20, "eIDKeyboard" },
            { 21, "eID_INVALID" }
        };

        (*enum_map)["JSONTemplate.ETemplateType"] = std::map<uint32_t, std::string>{
            { 0, "ETT_BASE" },
            { 1, "ETT_DATA_VALUE" },
            { 2, "ETT_DATA_VALUE_CUSTOM" },
            { 3, "ETT_OBJECT" },
            { 4, "ETT_ARRAY" },
            { 5, "ETT_ASYNCROOT" },
            { 6, "ETT_IF" },
            { 7, "ETT_SWITCH" },
            { 8, "ETT_EACH" },
            { 9, "ETT_LOC" },
            { 10, "ETT_PARENTHESIS" },
            { 11, "ETT_FORMATSTRING" },
            { 12, "ETT_FORMATINT" },
            { 13, "ETT_INTCLAMP" },
            { 14, "ETT_FORMATPUBLICID" },
            { 15, "ETT_ISNULL" },
            { 16, "ETT_DATA_CONTEXT" },
            { 17, "ETT_ARRAY_ELEMENT" },
            { 18, "ETT_ARRAY_FILTER" },
            { 19, "ETT_ARRAY_CONVERT" },
            { 20, "ETT_ARRAY_SIZE" },
            { 21, "ETT_ARRAY_SORT" },
            { 22, "ETT_ARRAY_GROUPBY" },
            { 23, "ETT_EXPAND" },
            { 24, "ETT_ISNULLOREMPTY" },
            { 25, "ETT_NOT" },
            { 26, "ETT_COMPARE" },
            { 27, "ETT_PARENT" },
            { 28, "ETT_AND" },
            { 29, "ETT_OR" },
            { 30, "ETT_MERGEOBJECTS" },
            { 31, "ETT_MERGEARRAYS" },
            { 32, "ETT_LOCALE_TEXT" },
            { 33, "ETT_LOCALE_AUDIO" },
            { 34, "ETT_CURRENT_LOCALE_TEXT" },
            { 35, "ETT_GET_APPLICATION_OPTION" },
            { 36, "ETT_PLATFORM" },
            { 37, "ETT_REGION" },
            { 38, "ETT_STOREREGION" },
            { 39, "ETT_STORE" },
            { 40, "ETT_IS_DISC_RELEASE" },
            { 41, "ETT_ISDEBUG" },
            { 42, "ETT_IS_CONTROLLER_AVAILABLE" },
            { 43, "ETT_IS_KEYBOARD_AVAILABLE" },
            { 44, "ETT_IS_VR_DEVICE_AVAILABLE" },
            { 45, "ETT_IS_VR_DEVICE_ACTIVE" },
            { 46, "ETT_IS_VR_ACTIVE" },
            { 47, "ETT_VR_MODE" },
            { 48, "ETT_ONLINE_RESOURCE" },
            { 49, "ETT_INCLUDE" },
            { 50, "ETT_UI_OPTION_VALUE" },
            { 51, "ETT_UI_OPTION_DEFAULT_VALUE" },
            { 52, "ETT_UI_OPTION_DEBUG_VALUE" },
            { 53, "ETT_UI_OPTION_AVAILABLE_DISPLAY_RESOLUTIONS" },
            { 54, "ETT_UI_OPTION_AVAILABLE_DISPLAY_FULLSCREEN" },
            { 55, "ETT_UI_OPTION_AVAILABLE_TEXTURE_QUALITY" },
            { 56, "ETT_UI_OPTION_AVAILABLE_SHADOW_QUALITY" },
            { 57, "ETT_UI_OPTION_AVAILABLE_SUPERSAMPLING" },
            { 58, "ETT_UI_OPTION_AVAILABLE_DOUBLEFRAMERATE" },
            { 59, "ETT_CURRENT_CONTRACT_CONTEXT" },
            { 60, "ETT_CURRENT_CONTRACT_OBJECTIVES" },
            { 61, "ETT_CURRENT_CONTRACT_SESSIONID" },
            { 62, "ETT_CURRENT_CONTRACT_CHARACTER_INFO" },
            { 63, "ETT_CURRENT_CONTRACT_TRACKED_OPPORTUNITY" },
            { 64, "ETT_CURRENT_DIFFICULTY" },
            { 65, "ETT_CURRENT_ENGINE_MODE" },
            { 66, "ETT_CURRENT_GAME_MODE" },
            { 67, "ETT_CAN_SAVE" },
            { 68, "ETT_IS_SAVELIMIT_EXCEEDED" },
            { 69, "ETT_IS_ALLOWED_TO_RESTART" },
            { 70, "ETT_ACTIVE_CHALLENGES" },
            { 71, "ETT_USER" },
            { 72, "ETT_ISUSER" },
            { 73, "ETT_DLCCOUNT" },
            { 74, "ETT_PROFILEID" },
            { 75, "ETT_HDRGAMMAVALUERANGEMIN" },
            { 76, "ETT_HDRGAMMAVALUERANGEMAX" },
            { 77, "ETT_HDRGAMMAVALUESTEP" },
            { 78, "ETT_ISHDRAVAILABLE" },
            { 79, "ETT_ISHDRRENDERING" },
            { 80, "ETT_ISVRSAVAILABLE" },
            { 81, "ETT_ITEM" },
            { 82, "ETT_REPOSITORY" },
            { 83, "ETT_ISONLINE" },
            { 84, "ETT_ISINGAME" },
            { 85, "ETT_ISINEDITOR" },
            { 86, "ETT_ISUGCRESTRICTED" },
            { 87, "ETT_ISPACKAGEOWNED" },
            { 88, "ETT_ISININVENTORY" },
            { 89, "ETT_ISPLATFORMENTITLEMENTOWNED" },
            { 90, "ETT_MULTIPLAYERLOBBYSTATE" },
            { 91, "ETT_MULTIPLAYERLOCALID" },
            { 92, "ETT_MULTIPLAYERJOINEDIDS" },
            { 93, "ETT_MULTIPLAYERISPLAYERREADY" },
            { 94, "ETT_MULTIPLAYERINFO" },
            { 95, "ETT_MULTIPLAYERMATCHMAKINGTIME" },
            { 96, "ETT_MULTIPLAYERNATTYPE" },
            { 97, "ETT_LOADOUT" },
            { 98, "ETT_LOADOUT_SLOT" },
            { 99, "ETT_LOADOUT_AGENCY_PICKUP" },
            { 100, "ETT_LOADOUT_SELECTED_ENTRANCE" },
            { 101, "ETT_PERSISTENTMENUDATA" },
            { 102, "ETT_GAMEPERSISTENTDATA" },
            { 103, "ETT_ENDGAME_PAGETRANSITION_OVERRIDE" },
            { 104, "ETT_VERSUSINFO" },
            { 105, "ETT_SNIPERINFO" },
            { 106, "ETT_GAMEMODE" },
            { 107, "ETT_CACHEDUSERCENTRICCONTRACT" },
            { 108, "ETT_SAVEGAMES" },
            { 109, "ETT_AVAILABILITY_OF_RESOURCES" },
            { 110, "ETT_AVAILABILITY_OF_CONTRACT" },
            { 111, "ETT_AS3DATE" },
            { 112, "ETT_IOIACCOUNT_STATUS" },
            { 113, "ETT_ISCONTRACT_IN_PLAYLIST" },
            { 114, "ETT_ISCONTRACT_IN_PLAYLIST_MARKED_FOR_DELETION" },
            { 115, "ETT_VIDEOMEMORYINFO_IS_SUPPORTED" },
            { 116, "ETT_VIDEOMEMORYINFO" },
            { 117, "ETT_DISPLAY_SIZE" },
            { 118, "ETT_IS_VIDEO_VALID" },
            { 119, "ETT_INTEL_IDS" },
            { 120, "ETT_INTEL_DETAILS" },
            { 121, "ETT_MENU_CONFIGURATION" },
            { 122, "ETT_HERO_INVENTORY" },
            { 123, "ETT_MAP_TRACKERINFO" },
            { 124, "ETT_WAS_EXITGATE_TRIGGERED" },
            { 125, "ETT_ARE_OPPORTUNITIES_ENABLED" },
            { 126, "ETT_CHARACTERS" },
            { 127, "ETT_CHARACTERINFO" },
            { 128, "ETT_DATABINDING" },
            { 129, "ETT_DATABINDING_ROOT" },
            { 130, "ETT_ALLOWED_UNLOCKABLES" },
            { 131, "ETT_HAS_FRAMERATE_OPTION" },
            { 132, "ETT_NVIDIAHIGHLIGHTSAVAILABLE" },
            { 133, "ETT_NVIDIAHIGHLIGHTSHASHIGHLIGHTS" },
            { 134, "ETT_DEBUG_ALLHITMANSUITS" }
        };

        (*enum_map)["ZMirrorEntity.EMirrorQuality"] = std::map<uint32_t, std::string>{
            { 0, "QUALITY_LOW" },
            { 1, "QUALITY_MEDIUM" },
            { 2, "QUALITY_HIGH" },
            { 3, "QUALITY_LEAVE" }
        };

        (*enum_map)["EWeaponAnimationCategory"] = std::map<uint32_t, std::string>{
            { 0, "eWAC_Undefined" },
            { 1, "eWAC_Pistol" },
            { 2, "eWAC_Revolver" },
            { 3, "eWAC_SMG_2H" },
            { 4, "eWAC_SMG_1H" },
            { 5, "eWAC_Rifle" },
            { 6, "eWAC_Sniper" },
            { 7, "eWAC_Shotgun_Pump" },
            { 8, "eWAC_Shotgun_Semi" }
        };

        (*enum_map)["EAILegalType"] = std::map<uint32_t, std::string>{
            { 0, "AILT_Weapon" },
            { 1, "AILT_Shooting" },
            { 2, "AILT_Aiming" },
            { 3, "AILT_CloseCombat" },
            { 4, "AILT_ChangeOutfit" },
            { 5, "AILT_Count" }
        };

        (*enum_map)["ZActorPickerFilterGroup.EEvaluationType"] = std::map<uint32_t, std::string>{
            { 0, "ALL" },
            { 1, "NONE" },
            { 2, "ANY" }
        };

        (*enum_map)["ZHM5HitmanHealthModifier.EHealthValue"] = std::map<uint32_t, std::string>{
            { 40, "eHealth40" },
            { 0, "eHealth0" },
            { 50, "eHealth50" },
            { 10, "eHealth10" },
            { 60, "eHealth60" },
            { 20, "eHealth20" },
            { 70, "eHealth70" },
            { 30, "eHealth30" },
            { 80, "eHealth80" },
            { 90, "eHealth90" },
            { 100, "eHealth100" }
        };

        (*enum_map)["EConversationID"] = std::map<uint32_t, std::string>{
            { 0, "eCI_GuardCivilian_Distraction_Investigation" },
            { 1, "eCI_HearBulletImpact_Distraction_Investigation" },
            { 2, "eCI_HearItemImpact_Distraction_Investigation" },
            { 3, "eCI_HearCarAlarm_Distraction_Investigation" },
            { 4, "eCI_SeeItemToss_Distraction_Investigation" },
            { 5, "eCI_HearRadio_Distraction_Investigation" },
            { 6, "eCI_HearPain_Distraction_Investigation" },
            { 7, "eCI_HearAccident_Distraction_Investigation" },
            { 8, "eCI_HearCuriousItemSound_Distraction_Investigation" },
            { 9, "eCI_HearCuriousSound_Distraction_Investigation" },
            { 10, "eCI_SeeSuspiciousPerceptible_Distraction_Investigation" },
            { 11, "eCI_SeeInterestingItem_Distraction_Investigation" },
            { 12, "eCI_HearFootSteps_Distraction_Investigation" },
            { 13, "eCI_HearAngryDialog_Distraction_Investigation" },
            { 14, "eCI_HearHelpDialog_Distraction_Investigation" },
            { 15, "eCI_HearWarning_Distraction_Investigation" },
            { 16, "eCI_SightInvestigation_Distraction_Investigation" },
            { 17, "eCI_HearBulletImpact_Distraction_StandDown" },
            { 18, "eCI_HearItemImpact_Distraction_StandDown" },
            { 19, "eCI_HearCarAlarm_Distraction_StandDown" },
            { 20, "eCI_SeeItemToss_Distraction_StandDown" },
            { 21, "eCI_HearRadio_Distraction_StandDown" },
            { 22, "eCI_HearPain_Distraction_StandDown" },
            { 23, "eCI_HearAccident_Distraction_StandDown" },
            { 24, "eCI_HearCuriousItemSound_Distraction_StandDown" },
            { 25, "eCI_HearCuriousSound_Distraction_StandDown" },
            { 26, "eCI_SeeSuspiciousPerceptible_Distraction_StandDown" },
            { 27, "eCI_SeeInterestingItem_Distraction_StandDown" },
            { 28, "eCI_HearFootSteps_Distraction_StandDown" },
            { 29, "eCI_HearAngryDialog_Distraction_StandDown" },
            { 30, "eCI_HearHelpDialog_Distraction_StandDown" },
            { 31, "eCI_HearWarning_Distraction_StandDown" },
            { 32, "eCI_SightInvestigation_Distraction_StandDown" },
            { 33, "eCI_Suitcase_Distraction_DeliverToGuard" },
            { 34, "eCI_Suitcase_Distraction_RadioRequestHelp" },
            { 35, "eCI_Count" }
        };

        (*enum_map)["ZDebugTextEntity.EHorizontalAlignment"] = std::map<uint32_t, std::string>{
            { 1, "HA_LEFT" },
            { 0, "HA_CENTER" },
            { 2, "HA_RIGHT" }
        };

        (*enum_map)["EClipSpawnAxis"] = std::map<uint32_t, std::string>{
            { 0, "eCSA_XPos" },
            { 1, "eCSA_XNeg" },
            { 2, "eCSA_YPos" },
            { 3, "eCSA_YNeg" },
            { 4, "eCSA_ZPos" },
            { 5, "eCSA_ZNeg" }
        };

        (*enum_map)["EMeBarState"] = std::map<uint32_t, std::string>{
            { 0, "ME_BAR_NONE" },
            { 1, "ME_BAR_TRESPASSING" },
            { 2, "ME_BAR_DEEPTRESPASSING" },
            { 3, "ME_BAR_VISIBLY_ARMED" },
            { 4, "ME_BAR_CHANGING_DISGUISE" },
            { 5, "ME_BAR_DISGUISE_BLOWN" },
            { 6, "ME_BAR_DISGUISE_SUSPICIOUS" },
            { 7, "ME_BAR_NEAR_BODY" }
        };

        (*enum_map)["ECameraCollisionMode"] = std::map<uint32_t, std::string>{
            { 0, "ECAMERACOLLISIONMODE_COLLIDE_ALWAYS" },
            { 1, "ECAMERACOLLISIONMODE_CAMERA_OBSTACLE" },
            { 2, "ECAMERACOLLISIONMODE_COLLIDE_NEVER" },
            { 3, "ECAMERACOLLISIONMODE_COLLIDE_DEFAULT" }
        };

        (*enum_map)["EClothStretchConstrainType"] = std::map<uint32_t, std::string>{
            { 0, "eClothBendConstrainType_Anchor" },
            { 1, "eClothBendConstrainType_LRA" },
            { 2, "eClothBendConstrainType_None" }
        };

        (*enum_map)["ENamedGameEvents"] = std::map<uint32_t, std::string>{
            { 0, "eEvent_IntroCutStart" },
            { 1, "eEvent_PlayingAfterLoad" },
            { 2, "eEvent_SetModePlaying" },
            { 3, "eNumNamedGameEvents" }
        };

        (*enum_map)["ZDebugTextEntity.EVerticalAlignment"] = std::map<uint32_t, std::string>{
            { 16, "VA_TOP" },
            { 0, "VA_CENTER" },
            { 32, "VA_BOTTOM" }
        };

        (*enum_map)["ZSetUIControlDisplayInfoEntity.EProjectionOp"] = std::map<uint32_t, std::string>{
            { 0, "NoOp" },
            { 1, "SetPerspective" }
        };

        (*enum_map)["ZDistanceCondition.EObjectType"] = std::map<uint32_t, std::string>{
            { 0, "DT_ToCam" },
            { 1, "DT_ToPlayer" }
        };

        (*enum_map)["EHM5SoundFootstepEmitterTarget"] = std::map<uint32_t, std::string>{
            { 0, "EFSAT_MAIN" },
            { 1, "EFSAT_NPC" }
        };

        (*enum_map)["EGuardPointType"] = std::map<uint32_t, std::string>{
            { 0, "GPT_Hold" },
            { 1, "GPT_Combat" },
            { 2, "GPT_CombatAndHold" },
            { 3, "GPT_VIPSafeRoom" }
        };

        (*enum_map)["ECharacterEvent"] = std::map<uint32_t, std::string>{
            { 0, "eCIET_PickUp" },
            { 1, "eCIET_LadderEnded" },
            { 2, "eCIET_AgilityEnded" },
            { 3, "eCIET_CCEnded" },
            { 4, "eCIET_Disguised" },
            { 5, "eCIET_HideBody" },
            { 6, "eCIET_WalkingOnStairs" },
            { 7, "eCIET_Sniping_Congratulate" },
            { 8, "eCIET_Sniping_Acknowledge" },
            { 9, "eCIET_FlavorIdleEnded" },
            { 10, "eCIET_StartedMoving" },
            { 11, "eCIET_StoppedMoving" },
            { 12, "eCIET_DragBody" },
            { 13, "eCIET_Takedown" },
            { 14, "eCIET_Damaged" },
            { 34, "eCIET_None" }
        };

        (*enum_map)["ECharacterIdleHandlerUpperBodyType"] = std::map<uint32_t, std::string>{
            { 0, "eCIHUBT_NothingToDoEmptySingleHand" },
            { 1, "eCIHUBT_NothingToDoEmptyHands" },
            { 2, "eCIHUBT_Event" },
            { 3, "eCIHUBT_Custom" }
        };

        (*enum_map)["ECharacterBodyType"] = std::map<uint32_t, std::string>{
            { 0, "eCT_MaleRegular" },
            { 1, "eCT_FemaleRegular" },
            { 2, "eCT_Male47" },
            { 3, "eCT_Undefined" }
        };

        (*enum_map)["EAimAssistActivationState"] = std::map<uint32_t, std::string>{
            { 0, "eAAAS_Activated" },
            { 1, "eAAAS_Activating" },
            { 2, "eAAAS_Deactivated" },
            { 3, "eAAAS_Deactivating" }
        };

        (*enum_map)["ZHM5BodyContainer.EBCAnimSet"] = std::map<uint32_t, std::string>{
            { 0, "BC_CONTAINER_STANDARD" },
            { 1, "BC_CONTAINER_WOODCHIPPER" },
            { 2, "BC_CAR_STANDARD_TRUNK" },
            { 3, "BC_CONTAINER_CLOSET" },
            { 4, "BC_CONTAINER_LAUNDRYCHUTE" }
        };

        (*enum_map)["ELedgeDismountDirection"] = std::map<uint32_t, std::string>{
            { 0, "eLDD_DontCare" },
            { 1, "eLDD_FaceLedge" },
            { 2, "eLDD_FaceLeft" },
            { 3, "eLDD_FaceRight" },
            { 4, "eLDD_Turn180" }
        };

        (*enum_map)["ETargetPrintDestination"] = std::map<uint32_t, std::string>{
            { 0, "eTPD_Screen" },
            { 1, "eTPD_TraceViewer" }
        };

        (*enum_map)["ZHUDWorldSpatialAttachEntity.EOrientation"] = std::map<uint32_t, std::string>{
            { 0, "ROTATE_WITH_SPATIAL" },
            { 1, "LOOK_AT_CAMERA_POSITION" },
            { 2, "LOOK_AT_CAMERA_POSITION_HORIZ_ONLY" },
            { 3, "LOOK_AT_CAMERAPARENT_POSITION" },
            { 4, "LOOK_AT_CAMERAPARENT_POSITION_HORIZ_ONLY" },
            { 5, "ALIGN_WITH_VIEW_PLANE" },
            { 6, "ALIGN_WITH_VIEW_PLANE_HORIZ_ONLY" }
        };

        (*enum_map)["eParticleEmitterBoxEntity_SpawnModes"] = std::map<uint32_t, std::string>{
            { 0, "BOX_SPAWNMODE_INSIDE" },
            { 1, "BOX_SPAWNMODE_EDGE" },
            { 2, "BOX_SPAWNMODE_FACE" },
            { 3, "BOX_SPAWNMODE_ELLIPSOID_INSIDE" },
            { 4, "BOX_SPAWNMODE_ELLIPSOID" }
        };

        (*enum_map)["EDeathType"] = std::map<uint32_t, std::string>{
            { 0, "eDT_UNDEFINED" },
            { 1, "eDT_PACIFY" },
            { 2, "eDT_KILL" },
            { 3, "eDT_BLOODY_KILL" }
        };

        (*enum_map)["ECommunicationBarMessage"] = std::map<uint32_t, std::string>{
            { 0, "ECBM_Unknown" },
            { 1, "ECBM_Spotted" },
            { 2, "ECBM_Frisking" },
            { 3, "ECBM_HostileArea" },
            { 4, "ECBM_InvestigatingArea" },
            { 5, "ECBM_Clear" },
            { 6, "ECBM_Suspicious" },
            { 7, "ECBM_Alerted" },
            { 8, "ECBM_Hunting" },
            { 9, "ECBM_Arresting" },
            { 10, "ECBM_Engaging" },
            { 11, "ECBM_Hostile" },
            { 12, "ECBM_IdentityKnown" },
            { 13, "ECBM_Agitated" },
            { 14, "ECBM_VipRunsToSafeArea" },
            { 15, "ECBM_VipEscaping" },
            { 16, "ECBM_BodyFound" },
            { 17, "ECBM_GunshotHeard" },
            { 18, "ECBM_CloseCombatHeard" },
            { 19, "ECBM_CrimeNoticed" },
            { 20, "ECBM_BulletImpactNoticed" },
            { 21, "ECBM_SpottedByCamera" },
            { 22, "ECBM_UnconsciousWitness" }
        };

        (*enum_map)["ZHUDCamera3DControllerEntity.EType"] = std::map<uint32_t, std::string>{
            { 0, "Menu" },
            { 1, "HUD" }
        };

        (*enum_map)["EThrowType"] = std::map<uint32_t, std::string>{
            { 0, "THROW_NONE" },
            { 1, "THROW_COIN" },
            { 2, "THROW_NORMAL" },
            { 3, "THROW_HEAVY" },
            { 4, "THROW_KNOCKDOWN_LIGHT" },
            { 5, "THROW_KNOCKDOWN_HEAVY" },
            { 6, "THROW_PACIFY_LIGHT" },
            { 7, "THROW_PACIFY_HEAVY" },
            { 8, "THROW_DEADLY_LIGHT" },
            { 9, "THROW_DEADLY_HEAVY" }
        };

        (*enum_map)["EDetectedNatType"] = std::map<uint32_t, std::string>{
            { 0, "NAT_UNSET" },
            { 1, "NAT_1" },
            { 2, "NAT_2" },
            { 3, "NAT_3" }
        };

        (*enum_map)["ILightEntity.ERoomLightFlow"] = std::map<uint32_t, std::string>{
            { 0, "AUTOMATIC" },
            { 1, "LOCAL" },
            { 2, "ALLROOMS" }
        };

        (*enum_map)["ECrossHairType"] = std::map<uint32_t, std::string>{
            { 0, "CROSSHAIR_NONE" },
            { 1, "CROSSHAIR_PISTOL" },
            { 2, "CROSSHAIR_REVOLVER" },
            { 3, "CROSSHAIR_SMG" },
            { 4, "CROSSHAIR_RIFLE" },
            { 5, "CROSSHAIR_SHOTGUN" },
            { 6, "CROSSHAIR_SNIPER" },
            { 7, "CROSSHAIR_HARDBALLER" },
            { 8, "CROSSHAIR_UNAIMED" },
            { 9, "CROSSHAIR_POINTER" },
            { 10, "CROSSHAIR_WORLDCENTERMARKER" },
            { 11, "CROSSHAIR_BLINDFIRE" },
            { 12, "CROSSHAIR_RANGEINDICATOR" },
            { 13, "CROSSHAIR_DOT" }
        };

        (*enum_map)["EMarkerClipAlgorithm"] = std::map<uint32_t, std::string>{
            { 0, "MCA_NONE" },
            { 1, "MCA_SIMPLE" },
            { 2, "MCA_ADVANCED" }
        };

        (*enum_map)["ZHeroBoneAttachEntity.EResetMode"] = std::map<uint32_t, std::string>{
            { 0, "eAtBoneOrigin" },
            { 1, "eKeepOffset" }
        };

        (*enum_map)["eBurstPatternType"] = std::map<uint32_t, std::string>{
            { 0, "eEBP_None" },
            { 1, "eEBP_Circular3Rings" },
            { 2, "eEBP_Box" }
        };

        (*enum_map)["EQueryMaskType"] = std::map<uint32_t, std::string>{
            { 1, "eQueryMaskType_CameraCollision" },
            { 2, "eQueryMaskType_CameraObstacle" },
            { 4, "eQueryMaskType_ExplosionRelevant" }
        };

        (*enum_map)["ZPointOfInterestEntity.EPOIType"] = std::map<uint32_t, std::string>{
            { 0, "ePOIT_Invalid" },
            { 1, "ePOIT_Glance" },
            { 2, "ePOIT_Inspect" },
            { 3, "ePOIT_Stare" }
        };

        (*enum_map)["EGait"] = std::map<uint32_t, std::string>{
            { 0, "eGait_Normal" },
            { 1, "eGait_Reposition" },
            { 2, "eGait_Alert" },
            { 3, "eGait_Scared" },
            { 4, "eGait_Prone" },
            { 5, "eGait_Dead" },
            { 6, "eGait_Angry" },
            { 7, "eGait_Applause" },
            { 8, "eGait_BeatUp_000cm_01_Dual_A" },
            { 9, "eGait_BeatUp_000cm_01_Dual_B" },
            { 10, "eGait_BeatUp_000cm_02_Dual_A" },
            { 11, "eGait_BeatUp_000cm_02_Dual_B" },
            { 12, "eGait_BeatUp_Wall_Dual_A" },
            { 13, "eGait_BeatUp_Wall_Dual_B" },
            { 14, "eGait_Chatting" },
            { 15, "eGait_Cheer" },
            { 16, "eGait_Clap" },
            { 17, "eGait_Climb_Up_Fall" },
            { 18, "eGait_Concerned" },
            { 19, "eGait_Couples_A" },
            { 20, "eGait_Couples_B" },
            { 21, "eGait_Couples_C" },
            { 22, "eGait_Dance_Drunk" },
            { 23, "eGait_Dance_Dual_A" },
            { 24, "eGait_Dance_Dual_B" },
            { 25, "eGait_Dance_Party" },
            { 26, "eGait_Dance_Party_A" },
            { 27, "eGait_Dance_Party_B" },
            { 28, "eGait_Dance_Party_C" },
            { 29, "eGait_Dance_Party_D" },
            { 30, "eGait_Dance_Party_E" },
            { 31, "eGait_Dance_Party_F" },
            { 32, "eGait_Dance_Rave" },
            { 33, "eGait_Dance_Rave_A" },
            { 34, "eGait_Dance_Rave_B" },
            { 35, "eGait_Dance_Rave_C" },
            { 36, "eGait_Dance_Rave_D" },
            { 37, "eGait_Dance_Rave_E" },
            { 38, "eGait_Dance_Rave_F" },
            { 39, "eGait_Dance_Rave_Zone_Out_A" },
            { 40, "eGait_Dance_Rave_Zone_Out_B" },
            { 41, "eGait_Dance_Rave_Zone_Out_C" },
            { 42, "eGait_Dance_Rave_Zone_Out_D" },
            { 43, "eGait_Dance_Rave_Zone_Out_E" },
            { 44, "eGait_Dance_Rave_Zone_Out_F" },
            { 45, "eGait_Dance_Rave_Zone_Out_G" },
            { 46, "eGait_Dance_Rave_Zone_Out_H" },
            { 47, "eGait_Excited" },
            { 48, "eGait_Fanatic_Fans" },
            { 49, "eGait_Freeze_A" },
            { 50, "eGait_Freeze_B" },
            { 51, "eGait_Freeze_C" },
            { 52, "eGait_Freeze_Lean_Wall" },
            { 53, "eGait_Haggle" },
            { 54, "eGait_Interested" },
            { 55, "eGait_Jeer" },
            { 56, "eGait_Lean_Rail" },
            { 57, "eGait_Lean_Wall" },
            { 58, "eGait_Lie_WritheInPain" },
            { 59, "eGait_LookAt_Race_A" },
            { 60, "eGait_LookAt_Race_B" },
            { 61, "eGait_LookUp_Excited" },
            { 62, "eGait_Mingle" },
            { 63, "eGait_Mingle_120cm" },
            { 64, "eGait_Mingle_Drunk" },
            { 65, "eGait_Mingle_Rave_A" },
            { 66, "eGait_Mingle_Rave_B" },
            { 67, "eGait_Mingle_Rave_C" },
            { 68, "eGait_Mingle_Mumbai_A" },
            { 69, "eGait_Mingle_Mumbai_B" },
            { 70, "eGait_Mingle_Race" },
            { 71, "eGait_Mingle_Race_Rail" },
            { 72, "eGait_Mingle_Wall" },
            { 73, "eGait_Pacing_Angry" },
            { 74, "eGait_Party" },
            { 75, "eGait_Protest" },
            { 76, "eGait_Push_Gate" },
            { 77, "eGait_Rally" },
            { 78, "eGait_Reaction_TearGas" },
            { 79, "eGait_Shocked" },
            { 80, "eGait_Shop" },
            { 81, "eGait_Sit_020cm" },
            { 82, "eGait_Sit_040cm" },
            { 83, "eGait_Sit_100cm" },
            { 84, "eGait_Sit_ChairBasic" },
            { 85, "eGait_Sit_ChairBasic_LeanForward" },
            { 86, "eGait_Sit_Chair_Rave_A" },
            { 87, "eGait_Sit_Chair_Rave_B" },
            { 88, "eGait_Sit_Chair_Rave_C" },
            { 89, "eGait_Sit_Ground_Hungover" },
            { 90, "eGait_Squat_Relaxed" },
            { 91, "eGait_Squat_Sorting" },
            { 92, "eGait_Throw_Rice" },
            { 93, "eGait_Wait_Excited" },
            { 94, "eGait_Wait_InLine" },
            { 95, "eGait_WarmHands_100cm" },
            { 96, "eGait_Wave_Mexican" },
            { 97, "eGait_Yell_Up" },
            { 98, "eGait_Custom0" },
            { 99, "eGait_Custom1" },
            { 100, "eGait_Custom2" },
            { 101, "eGait_Custom3" },
            { 102, "eGait_Custom4" },
            { 103, "eGait_Custom5" },
            { 104, "eGait_Custom6" },
            { 105, "eGait_Custom7" },
            { 106, "eGait_Custom8" },
            { 107, "eGait_Custom9" }
        };

        (*enum_map)["EAIGoal"] = std::map<uint32_t, std::string>{
            { 0, "AIG_Kill" },
            { 1, "AIG_Arrest" },
            { 2, "AIG_FightSniper" },
            { 3, "AIG_HelpCivilian" },
            { 4, "AIG_HelpCivilianWeapon" },
            { 5, "AIG_Investigate" },
            { 6, "AIG_InvestigateDisguise" },
            { 7, "AIG_StandOffInvestigateDisguise" },
            { 8, "AIG_InvestigateDeadBody" },
            { 9, "AIG_HandleTrespasser" },
            { 10, "AIG_InvestigateCautious" },
            { 11, "AIG_HandleDistraction" },
            { 12, "AIG_AssistDistraction" },
            { 13, "AIG_GuardAssistDistraction" },
            { 14, "AIG_HandleSuitcase" },
            { 15, "AIG_InvestigateWeapon" },
            { 16, "AIG_DetectedInPrivate" },
            { 17, "AIG_RecoverUnconscious" },
            { 18, "AIG_RecoverUnconsciousAlerted" },
            { 19, "AIG_DeliverWeapon" },
            { 20, "AIG_AvoidExplosion" },
            { 21, "AIG_Hunt" },
            { 22, "AIG_Frisk" },
            { 23, "AIG_GuardBody" },
            { 24, "AIG_DragBody" },
            { 25, "AIG_LookAtAccident" },
            { 26, "AIG_Sentry" },
            { 27, "AIG_HelpGeneric" },
            { 28, "AIG_Evacuate" },
            { 29, "AIG_Entourage" },
            { 30, "AIG_AvoidDangerousArea" },
            { 31, "AIG_Spectator" },
            { 32, "AIG_Infected" },
            { 33, "AIG_SC_Combat" },
            { 34, "AIG_SC_Alerted" },
            { 35, "AIG_None" }
        };

        (*enum_map)["ECharacterResourceType"] = std::map<uint32_t, std::string>{
            { 0, "eSMT_Invalid" },
            { 1, "eSMT_FullBody" },
            { 2, "eSMT_RightHand" },
            { 3, "eSMT_LeftHand" }
        };

        (*enum_map)["ZHM5WeaponBasicConfigEntity.EWeaponBasicConfigAudioExoticType"] = std::map<uint32_t, std::string>{
            { 0, "eWBC_AudioExoticType_MiniPistol" },
            { 32768, "eWBC_AudioExoticType_None" },
            { 1, "eWBC_AudioExoticType_OneHandSpinReloadShotgun" },
            { 2, "eWBC_AudioExoticType_TranquilizerDartPistol" },
            { 3, "eWBC_AudioExoticType_Walter2000SniperRifle" },
            { 4, "eWBC_AudioExoticType_ShootingRange_NPCAssaultRifle" }
        };

        (*enum_map)["EDisturbanceType"] = std::map<uint32_t, std::string>{
            { 0, "DT_Generic" },
            { 1, "DT_SeeWeapon" },
            { 2, "DT_BodyNeedsBagging" },
            { 3, "DT_SoundCloseCombat" },
            { 4, "DT_SoundGunSilenced" },
            { 5, "DT_SoundBulletImpact" },
            { 6, "DT_SoundNeckBreak" },
            { 7, "DT_SoundSpeakPain" },
            { 8, "DT_SoundGunshot" },
            { 9, "DT_SoundExplosion" },
            { 10, "DT_SeeExplosion" },
            { 11, "DT_DeadBody" },
            { 12, "DT_HitmanNearDeadBody" },
            { 13, "DT_HitmanNearPacifiedBody" },
            { 14, "DT_SeeTakeKeyCard" },
            { 15, "DT_SeeTakeSecurityTape" },
            { 16, "DT_SeeChangeOutfit" },
            { 17, "DT_SeeTrespasser" },
            { 18, "DT_SeeBrokenDisguise" },
            { 19, "DT_SeeIllegalWeapon" },
            { 20, "DT_SeeDraggingBody" },
            { 21, "DT_SeeDeath" },
            { 22, "DT_SeeKilling" },
            { 23, "DT_UnconsciousVictim" },
            { 24, "DT_HuntTarget" },
            { 25, "DT_CrowdAlerted" },
            { 26, "DT_SeeGunshotVictim" },
            { 27, "DT_SoundThrownItem" },
            { 28, "DT_SoundThrownItemSeenThrowing" },
            { 29, "DT_HitByItemOrCoin" },
            { 30, "DT_PrivateAreaViolated" },
            { 31, "DT_SetpieceInteraction" },
            { 32, "DT_IllegalAction" },
            { 33, "DT_KnockdownMelee" },
            { 34, "DT_KnockdownThrow" },
            { 35, "DT_BumpedTooMuch" },
            { 36, "DT_Murder" },
            { 37, "DT_Strangle" },
            { 38, "DT_GotShot" },
            { 39, "DT_MurderAttempt" },
            { 40, "DT_LongTermMemory" },
            { 41, "DT_Accident" },
            { 42, "DT_MAX" }
        };

        (*enum_map)["IRenderMaterialEntity.EModifierOperation"] = std::map<uint32_t, std::string>{
            { 0, "eLeave" },
            { 128, "eColor" },
            { 1, "eReplace" },
            { 2, "eModulate" },
            { 3, "eAdd" }
        };

        (*enum_map)["ZBoxReflectionEntity.EType"] = std::map<uint32_t, std::string>{
            { 0, "eLocal" },
            { 1, "eFallback" }
        };

        (*enum_map)["ZGetHelpGroup.EInvestigateGroupState"] = std::map<uint32_t, std::string>{
            { 0, "IGS_Acknowledge" },
            { 1, "IGS_WaitForAckDialog" },
            { 2, "IGS_RunToGuard" },
            { 3, "IGS_ReportToHitman" },
            { 4, "IGS_ReportToGuard" },
            { 5, "IGS_StartMoveBack" },
            { 6, "IGS_MoveBack" },
            { 7, "IGS_Investigate" },
            { 8, "IGS_Completed" },
            { 9, "IGS_Max" }
        };

        (*enum_map)["ECollisionNotifyGroup"] = std::map<uint32_t, std::string>{
            { 0, "eCollisionNotifyGroup_Default" },
            { 1, "eCollisionNotifyGroup_CollisionListener" },
            { 2, "eCollisionNotifyGroup_PhysicsEntity" },
            { 3, "eCollisionNotifyGroup_DontNotify" },
            { 4, "eCollisionNotifyGroup_ForceNotify" }
        };

        (*enum_map)["ECharSetCharacterType"] = std::map<uint32_t, std::string>{
            { 0, "ECSCT_Actor" },
            { 1, "ECSCT_Nude" },
            { 2, "ECSCT_HeroA" }
        };

        (*enum_map)["EActorGroup"] = std::map<uint32_t, std::string>{
            { 0, "eAG_Group_A" },
            { 1, "eAG_Group_B" },
            { 2, "eAG_Group_C" },
            { 3, "eAG_Group_D" },
            { 4, "eAG_Count" }
        };

        (*enum_map)["InputControlNamesp.eHM5InputAction"] = std::map<uint32_t, std::string>{
            { 0, "eIAButtonFaceDown_Downedge" },
            { 1, "eIAButtonFaceDown_FastTap" },
            { 2, "eIAButtonFaceDown_HldDwnOnce" },
            { 3, "eIAButtonFaceDown_Hold" },
            { 4, "eIAButtonFaceDown_HoldDown" },
            { 5, "eIAButtonFaceLeft_Downedge" },
            { 6, "eIAButtonFaceLeft_HldDwnOnce" },
            { 7, "eIAButtonFaceLeft_Hold" },
            { 8, "eIAButtonFaceLeft_HoldDown" },
            { 9, "eIAButtonFaceLeft_FastTap" },
            { 10, "eIAButtonFaceLeft_Tap" },
            { 11, "eIAButtonFaceLeft_Release" },
            { 12, "eIAButtonFaceLeft_Repeat" },
            { 13, "eIAButtonFaceRight_Downedge" },
            { 14, "eIAButtonFaceRight_HldDwnOnce" },
            { 15, "eIAButtonFaceRight_Hold" },
            { 16, "eIAButtonFaceRight_HoldDown" },
            { 17, "eIAButtonFaceRight_FastTap" },
            { 18, "eIAButtonFaceRight_Tap" },
            { 19, "eIAButtonFaceRight_Release" },
            { 20, "eIAButtonFaceRight_Repeat" },
            { 21, "eIAButtonFaceUp_Downedge" },
            { 22, "eIAButtonFaceUp_FastTap" },
            { 23, "eIAButtonFaceUp_HldDwnOnce" },
            { 24, "eIAButtonFaceUp_Hold" },
            { 25, "eIAButtonFaceUp_HoldDown" },
            { 26, "eIABumperLeft_FastTap" },
            { 27, "eIABumperLeft_Downedge" },
            { 28, "eIABumperLeft_Hold" },
            { 29, "eIABumperLeft_Holddown" },
            { 30, "eIABumperLeft_Release" },
            { 31, "eIABumperRight_FastTap" },
            { 32, "eIABumperRight_Downedge" },
            { 33, "eIABumperRight_Hold" },
            { 34, "eIABumperRight_Holddown" },
            { 35, "eIABumperRight_Release" },
            { 36, "eIADpadUp_Downedge" },
            { 37, "eIADpadUp_HldDwnOnce" },
            { 38, "eIADpadUp_Hold" },
            { 39, "eIADpadDown_Hold" },
            { 40, "eIADpadUp_FastTap" },
            { 41, "eIADpadDown_Downedge" },
            { 42, "eIADpadDown_Release" },
            { 43, "eIADpadDown_FastTap" },
            { 44, "eIADpadDown_HldDwnOnce" },
            { 45, "eIADpadLeft_Downedge" },
            { 46, "eIADpadRight_Downedge" },
            { 47, "eIAThumbRight_Hold" },
            { 48, "eIAThumbRight_Downedge" },
            { 49, "eIAThumbLeft_Hold" },
            { 50, "eIAThumbLeft_DownEdge" },
            { 51, "eIATriggerLeft_Downedge" },
            { 52, "eIATriggerLeft_FastTap" },
            { 53, "eIATriggerLeft_Hold" },
            { 54, "eIATriggerLeft_Holddown" },
            { 55, "eIATriggerLeft_Release" },
            { 56, "eIATriggerRight_Downedge" },
            { 57, "eIATriggerRight_FastTap" },
            { 58, "eIATriggerRight_Hold" },
            { 59, "eIATriggerRight_Holddown" },
            { 60, "eIATriggerRight_Release" },
            { 61, "eIAGenericStart_Hold" },
            { 62, "eIAGCMeleeUse_Downedge" },
            { 63, "eIAGCMeleeUse_Hold" },
            { 64, "eIAGCMeleeUse_HoldDown" },
            { 65, "eIAGCMeleeUse_Release" },
            { 66, "eIAGCMeleeUse_HldDwnOnce" },
            { 67, "eIAGCMeleeUse_Repeat" },
            { 68, "eIAGCMeleeUse_Tap" },
            { 69, "eIAGCMeleeUse_FastTap" },
            { 70, "eIAGCAgilityDisguise_Downedge" },
            { 71, "eIAGCAgilityDisguise_Hold" },
            { 72, "eIAGCAgilityDisguise_HoldDown" },
            { 73, "eIAGCAgilityDisguise_Release" },
            { 74, "eIAGCAgilityDisguise_HldDwnOnce" },
            { 75, "eIAGCAgilityDisguise_Repeat" },
            { 76, "eIAGCAgilityDisguise_Tap" },
            { 77, "eIAGCAgilityDisguise_FastTap" },
            { 78, "eIAGCCoverDragBody_Downedge" },
            { 79, "eIAGCCoverDragBody_Hold" },
            { 80, "eIAGCCoverDragBody_HoldDown" },
            { 81, "eIAGCCoverDragBody_Release" },
            { 82, "eIAGCCoverDragBody_HldDwnOnce" },
            { 83, "eIAGCCoverDragBody_Repeat" },
            { 84, "eIAGCCoverDragBody_Tap" },
            { 85, "eIAGCCoverDragBody_FastTap" },
            { 86, "eIAGCInteractPickup_Downedge" },
            { 87, "eIAGCInteractPickup_Hold" },
            { 88, "eIAGCInteractPickup_HoldDown" },
            { 89, "eIAGCInteractPickup_Release" },
            { 90, "eIAGCInteractPickup_HldDwnOnce" },
            { 91, "eIAGCInteractPickup_Repeat" },
            { 92, "eIAGCInteractPickup_Tap" },
            { 93, "eIAGCInteractPickup_FastTap" },
            { 94, "eIAGCReloadInstinct_Downedge" },
            { 95, "eIAGCReloadInstinct_Hold" },
            { 96, "eIAGCReloadInstinct_HoldDown" },
            { 97, "eIAGCReloadInstinct_Release" },
            { 98, "eIAGCReloadInstinct_HldDwnOnce" },
            { 99, "eIAGCReloadInstinct_Repeat" },
            { 100, "eIAGCReloadInstinct_Tap" },
            { 101, "eIAGCReloadInstinct_FastTap" },
            { 102, "eIAGCRun_Downedge" },
            { 103, "eIAGCRun_Hold" },
            { 104, "eIAGCRun_HoldDown" },
            { 105, "eIAGCRun_Release" },
            { 106, "eIAGCRun_HldDwnOnce" },
            { 107, "eIAGCRun_Repeat" },
            { 108, "eIAGCRun_Tap" },
            { 109, "eIAGCRun_FastTap" },
            { 110, "eIAGCHolster_Downedge" },
            { 111, "eIAGCHolster_Hold" },
            { 112, "eIAGCHolster_HoldDown" },
            { 113, "eIAGCHolster_Release" },
            { 114, "eIAGCHolster_HldDwnOnce" },
            { 115, "eIAGCHolster_Repeat" },
            { 116, "eIAGCHolster_Tap" },
            { 117, "eIAGCHolster_FastTap" },
            { 118, "eIAGCInventory_Downedge" },
            { 119, "eIAGCInventory_Hold" },
            { 120, "eIAGCInventory_HoldDown" },
            { 121, "eIAGCInventory_Release" },
            { 122, "eIAGCInventory_HldDwnOnce" },
            { 123, "eIAGCInventory_Repeat" },
            { 124, "eIAGCInventory_Tap" },
            { 125, "eIAGCInventory_FastTap" },
            { 126, "eIAGCEmotes_Downedge" },
            { 127, "eIAGCEmotes_Hold" },
            { 128, "eIAGCEmotes_HoldDown" },
            { 129, "eIAGCEmotes_Release" },
            { 130, "eIAGCEmotes_HldDwnOnce" },
            { 131, "eIAGCEmotes_Repeat" },
            { 132, "eIAGCEmotes_Tap" },
            { 133, "eIAGCEmotes_FastTap" },
            { 134, "eIAGCDropItem_Downedge" },
            { 135, "eIAGCDropItem_Hold" },
            { 136, "eIAGCDropItem_HoldDown" },
            { 137, "eIAGCDropItem_Release" },
            { 138, "eIAGCDropItem_HldDwnOnce" },
            { 139, "eIAGCDropItem_Repeat" },
            { 140, "eIAGCDropItem_Tap" },
            { 141, "eIAGCDropItem_FastTap" },
            { 142, "eIAGCCrouch_Downedge" },
            { 143, "eIAGCCrouch_Hold" },
            { 144, "eIAGCCrouch_HoldDown" },
            { 145, "eIAGCCrouch_Release" },
            { 146, "eIAGCCrouch_HldDwnOnce" },
            { 147, "eIAGCCrouch_Repeat" },
            { 148, "eIAGCCrouch_Tap" },
            { 149, "eIAGCCrouch_FastTap" },
            { 150, "eIAGCCameraShoulder_Downedge" },
            { 151, "eIAGCCameraShoulder_Hold" },
            { 152, "eIAGCCameraShoulder_HoldDown" },
            { 153, "eIAGCCameraShoulder_Release" },
            { 154, "eIAGCCameraShoulder_HldDwnOnce" },
            { 155, "eIAGCCameraShoulder_Repeat" },
            { 156, "eIAGCCameraShoulder_Tap" },
            { 157, "eIAGCCameraShoulder_FastTap" },
            { 158, "eIAKBMMoveUp" },
            { 159, "eIAKBMMoveDown" },
            { 160, "eIAKBMMoveLeft" },
            { 161, "eIAKBMMoveRight" },
            { 162, "eIAKBMMarkTarget" },
            { 163, "eIAKBMNextAmmo" },
            { 164, "eIAKBMPreviousAmmo" },
            { 165, "eIAKBMUse" },
            { 166, "eIAKBMUse2" },
            { 167, "eIAKBMUse2Hold" },
            { 168, "eIAKBMSlideDown" },
            { 169, "eIAKBMPickup" },
            { 170, "eIAKBMCover" },
            { 171, "eIAKBMDragBody" },
            { 172, "eIAKBMMelee" },
            { 173, "eIAKBMMelee_Repeat" },
            { 174, "eIAKBMActivateProp" },
            { 175, "eIAKBMActivateProp_HldDwnOnce" },
            { 176, "eIAKBMActivateProp_Hold" },
            { 177, "eIAKBMActivatePropSecondary" },
            { 178, "eIAKBMConcealRetrieve" },
            { 179, "eIAKBMTakeDisguise" },
            { 180, "eIAKBMRun" },
            { 181, "eIAKBMWalkSlow" },
            { 182, "eIAKBMAim" },
            { 183, "eIAKBMShoot" },
            { 184, "eIAKBMShoot_Downedge" },
            { 185, "eIAKBMShoot_Release" },
            { 186, "eIAKBMReload" },
            { 187, "eIAKBMInstinct" },
            { 188, "eIAKBMCamSwitch" },
            { 189, "eIAKBMSneak" },
            { 190, "eIAKBMHolster" },
            { 191, "eIAKBMFireMode" },
            { 192, "eIAKBMNotebook" },
            { 193, "eIAKBMNotebookMap" },
            { 194, "eIAKBMPause" },
            { 195, "eIAKBMWeapon1" },
            { 196, "eIAKBMWeapon2" },
            { 197, "eIAKBMWeapon3" },
            { 198, "eIAKBMWeapon4" },
            { 199, "eIAKBMWeapon5" },
            { 200, "eIAKBMWeapon6" },
            { 201, "eIAKBMWeapon7" },
            { 202, "eIAKBMPrecisionAim" },
            { 203, "eIAKBMZoomIn" },
            { 204, "eIAKBMZoomOut" },
            { 205, "eIAKBMDropItem" },
            { 206, "eIAKBMInventory" },
            { 207, "eIAKBMEmotes" },
            { 208, "eIAKBMSurrender" },
            { 209, "eIAKBMSurrender_Hold" },
            { 210, "eIAKBMSurrender_HoldDown" },
            { 211, "eIAKBMSurrender_HoldDownOnce" },
            { 212, "eIAKBMTogglePlacement" },
            { 213, "eIAKBMOkay" },
            { 214, "eIAKBMCancel" },
            { 215, "eIAKBMAccept" },
            { 216, "eIATriggerLeft_Analog" },
            { 217, "eIATriggerRight_Analog" },
            { 218, "eIAStickLeftHorizontal_Analog" },
            { 219, "eIAStickLeftVertical_Analog" },
            { 220, "eIAStickRightHorizontal_Analog" },
            { 221, "eIAStickRightVertical_Analog" },
            { 222, "eIAStickLeftHorizontal_Raw" },
            { 223, "eIAStickLeftVertical_Raw" },
            { 224, "eIAStickRightHorizontal_Raw" },
            { 225, "eIAStickRightVertical_Raw" },
            { 226, "eIABumperLeft_Analog" },
            { 227, "eIABumperRight_Analog" },
            { 228, "eIAKBMMoveHorizontal" },
            { 229, "eIAKBMMoveVertical" },
            { 230, "eIAKBMLookHorizontal" },
            { 231, "eIAKBMLookVertical" },
            { 232, "eIActionsNUM" }
        };

        (*enum_map)["EAISharedEventType"] = std::map<uint32_t, std::string>{
            { 0, "AISET_None" },
            { 399, "AISET_DynamicEnforcer_PacifyingThrowVictim" },
            { 1, "AISET_StandOffCrowdReactionDone" },
            { 2, "AISET_Shoot" },
            { 393, "AISET_DYNAMIC_ENFORCER_FLAG_INCA_BEGIN" },
            { 3, "AISET_ShootBlind" },
            { 4, "AISET_Scared" },
            { 387, "AISET_DynamicEnforcer_SeenItemThrown" },
            { 5, "AISET_CloseCombatRunIn" },
            { 6, "AISET_CloseCombatArrest" },
            { 397, "AISET_DynamicEnforcer_CloseCombatSound" },
            { 7, "AISET_ReadyForCloseCombatArrest" },
            { 8, "AISET_DeadByAccident" },
            { 407, "AISET_DYNAMIC_ENFORCER_FLAG_END" },
            { 9, "AISET_SituationConversation" },
            { 10, "AISET_LAST_BOOLEAN_EVENT" },
            { 401, "AISET_DynamicEnforcer_SeenMurderVictimHeardGunshot" },
            { 11, "AISET_IllegalBehavior" },
            { 12, "AISET_BeingWatched" },
            { 395, "AISET_DynamicEnforcer_GunshotSound" },
            { 13, "AISET_Sneaking" },
            { 14, "AISET_Squatting" },
            { 405, "AISET_DynamicEnforcer_Hunt" },
            { 15, "AISET_Agility" },
            { 16, "AISET_IllegalAgility" },
            { 415, "AISET_DynamicEnforcer_ArrestReason_Murder" },
            { 17, "AISET_ChangingOutfit" },
            { 18, "AISET_ChangedOutfit" },
            { 409, "AISET_DynamicEnforcer_Disable_CivilianInInvestigateCautious" },
            { 19, "AISET_CoverToCover" },
            { 20, "AISET_Trespassing" },
            { 403, "AISET_DynamicEnforcer_DeadBody" },
            { 21, "AISET_InTrespassZone" },
            { 22, "AISET_InDisguiseZone" },
            { 413, "AISET_DYNAMIC_ENFORCER_CIVILIAN_DISGUISE_ONLY_FLAG_END" },
            { 23, "AISET_DraggingBody" },
            { 24, "AISET_KillingWithFiberwire" },
            { 25, "AISET_KillingWithPull" },
            { 26, "AISET_KillingWithPush" },
            { 27, "AISET_KillingWithKick" },
            { 28, "AISET_KillingWithKnife" },
            { 411, "AISET_DYNAMIC_ENFORCER_CIVILIAN_DISGUISE_ONLY_FLAG_BEGIN" },
            { 29, "AISET_KillingWithDeadlyThrow" },
            { 30, "AISET_PullingFromLedge" },
            { 31, "AISET_PacifyingWithPull" },
            { 32, "AISET_PacifyingWithPush" },
            { 33, "AISET_PacifyingWithKick" },
            { 34, "AISET_PacifyingWithKnockDownThrow" },
            { 425, "AISET_DynamicEnforcer_ArrestReason_PrivateArea" },
            { 35, "AISET_PacifyingWithStrangle" },
            { 36, "AISET_PacifyingWithKnife" },
            { 419, "AISET_DynamicEnforcer_ArrestReason_NearPacifiedBody" },
            { 37, "AISET_ThrowingSomething" },
            { 38, "AISET_ThrowingExplosives" },
            { 429, "AISET_DynamicEnforcer_ArrestReason_SillyHitman" },
            { 39, "AISET_KnockingDown" },
            { 40, "AISET_InCloset" },
            { 41, "AISET_InNpcUnreachableArea" },
            { 42, "AISET_Peeking" },
            { 43, "AISET_EnteringCloset" },
            { 44, "AISET_ExitingCloset" },
            { 427, "AISET_DynamicEnforcer_ArrestReason_Setpiece" },
            { 45, "AISET_InCover" },
            { 46, "AISET_MovingInCover" },
            { 47, "AISET_HiddenInCover" },
            { 48, "AISET_HasWeapon" },
            { 49, "AISET_WeaponEquipped" },
            { 50, "AISET_WeaponFired" },
            { 51, "AISET_WeaponReloading" },
            { 52, "AISET_Aiming" },
            { 53, "AISET_GuardDisguise" },
            { 54, "AISET_PulledByHitmanOnLedge" },
            { 55, "AISET_CombatNoHold" },
            { 56, "AISET_CombatFireAtWill" },
            { 391, "AISET_DynamicEnforcer_PrivateArea" },
            { 57, "AISET_InOrderedPosition" },
            { 58, "AISET_ORDERS_BEGIN" },
            { 385, "AISET_DynamicEnforcer_SharedHitmanSensor" },
            { 59, "AISET_Order_Act" },
            { 60, "AISET_Order_Investigate" },
            { 61, "AISET_Order_SearchPosition" },
            { 62, "AISET_Order_Approach" },
            { 389, "AISET_DynamicEnforcer_Setpiece" },
            { 63, "AISET_Order_GetHelp" },
            { 64, "AISET_Order_StandDown" },
            { 65, "AISET_Order_Escalate" },
            { 66, "AISET_Order_Arrest" },
            { 67, "AISET_Order_Avoid" },
            { 68, "AISET_Order_Flee" },
            { 69, "AISET_Order_Patrol" },
            { 70, "AISET_Order_Reposition" },
            { 71, "AISET_Order_Chase" },
            { 72, "AISET_Order_AimFromPosition" },
            { 73, "AISET_Order_HoldPosition" },
            { 74, "AISET_Order_HoldCoverPosition" },
            { 75, "AISET_Order_FightFromCover" },
            { 76, "AISET_Order_FightFromPosition" },
            { 77, "AISET_Order_ShootFromPosition" },
            { 78, "AISET_Order_GuardPosition" },
            { 79, "AISET_Order_GuardBody" },
            { 80, "AISET_Order_WakeUpUnconscious" },
            { 81, "AISET_Order_DragBody" },
            { 82, "AISET_Order_TriggerAlarm" },
            { 83, "AISET_Order_DispatchSuspectInfo" },
            { 84, "AISET_Order_RecieveSuspectInfo" },
            { 85, "AISET_Order_RequestBackup" },
            { 86, "AISET_Order_ThrowFlashGrenade" },
            { 87, "AISET_Order_CheckLastPosition" },
            { 88, "AISET_Order_StandoffLastWarning" },
            { 89, "AISET_Order_Evacuate" },
            { 90, "AISET_Order_AgitatedBystander" },
            { 91, "AISET_Order_CuriousBystander" },
            { 92, "AISET_Order_Face" },
            { 93, "AISET_Order_Holster" },
            { 94, "AISET_Order_Unholster" },
            { 95, "AISET_Order_MoveTo" },
            { 96, "AISET_Order_JumpTo" },
            { 97, "AISET_Order_FormationMove" },
            { 98, "AISET_Order_SentryFrisk" },
            { 99, "AISET_Order_SentryWarning" },
            { 100, "AISET_Order_SentryGreeting" },
            { 101, "AISET_Order_SentryCheckItem" },
            { 102, "AISET_Order_SentryDemandPickUpItem" },
            { 103, "AISET_Order_DeliverWeapon" },
            { 104, "AISET_Order_RecoverUnconscious" },
            { 105, "AISET_Order_GetOutfit" },
            { 106, "AISET_Order_LockdownWarning" },
            { 107, "AISET_Order_VIPEvacuateIdle" },
            { 108, "AISET_Order_VIPSafeRoom" },
            { 109, "AISET_Order_VIPSafeRoomTrespasser" },
            { 110, "AISET_Order_VIPScared" },
            { 111, "AISET_Order_DefendVIP" },
            { 112, "AISET_Order_CautiousVIP" },
            { 113, "AISET_Order_CautiousGuardVIP" },
            { 114, "AISET_Order_EscortOut" },
            { 115, "AISET_Order_MoveInCover" },
            { 116, "AISET_Order_MoveToCover" },
            { 117, "AISET_Order_Conversation" },
            { 118, "AISET_Order_AttentionToPerson" },
            { 119, "AISET_Order_WaitForItemHandled" },
            { 120, "AISET_ORDERS_END" },
            { 121, "AISET_IMPULSES_BEGIN" },
            { 122, "AISET_Impulse_ReceiveHuntTarget" },
            { 123, "AISET_Impulse_AckHuntTarget" },
            { 124, "AISET_Impulse_TransmitHuntTarget" },
            { 125, "AISET_Impulse_ActiveRadioCall" },
            { 126, "AISET_IMPULSES_END" },
            { 127, "AISET_ForceFullAttention" },
            { 128, "AISET_InCameraView2D" },
            { 129, "AISET_BeingLookedAt" },
            { 314, "AISET_SoundHitmanGunShot" },
            { 130, "AISET_BeingAimedAt" },
            { 131, "AISET_WasAimedAtRecently" },
            { 260, "AISET_RequestShowItem" },
            { 132, "AISET_BeingShotAt" },
            { 133, "AISET_BeingActuallyShotAt" },
            { 318, "AISET_ManhuntMember" },
            { 134, "AISET_BeingFlanked" },
            { 135, "AISET_BeingTouched" },
            { 312, "AISET_SilentlyKilling" },
            { 136, "AISET_BeingBumped" },
            { 137, "AISET_BeingEscortedOut" },
            { 258, "AISET_ToldToEvacuate" },
            { 138, "AISET_EscortingOut" },
            { 139, "AISET_EscortOutFarewell" },
            { 268, "AISET_Attached" },
            { 140, "AISET_HMTrespassing" },
            { 141, "AISET_HMInEntryArea" },
            { 262, "AISET_WokenByNPC" },
            { 142, "AISET_HMTakingDamage" },
            { 143, "AISET_HumanShield" },
            { 256, "AISET_ReportedDisturbance" },
            { 144, "AISET_IllegalAction" },
            { 145, "AISET_IllegalActionSevere" },
            { 266, "AISET_DontMakeFunPlease" },
            { 146, "AISET_TakingKeyCard" },
            { 147, "AISET_TakingSecurityTape" },
            { 276, "AISET_Pacified" },
            { 148, "AISET_DumpingBody" },
            { 149, "AISET_Shooting" },
            { 270, "AISET_Sentry" },
            { 150, "AISET_BlindFire" },
            { 151, "AISET_ShootingBallet" },
            { 264, "AISET_TriggerLockDownAlarm" },
            { 152, "AISET_Running" },
            { 153, "AISET_Walking" },
            { 274, "AISET_CloseCombatFinisher" },
            { 154, "AISET_UsingKeyCard" },
            { 155, "AISET_WeaponDropped" },
            { 284, "AISET_DraggingBodyBag" },
            { 156, "AISET_WeaponPickedUp" },
            { 157, "AISET_ItemPickedUp" },
            { 278, "AISET_FlashpointSeen" },
            { 158, "AISET_ItemDropped" },
            { 159, "AISET_Surrendering" },
            { 272, "AISET_FriskingSentry" },
            { 160, "AISET_RequestSurrender" },
            { 161, "AISET_StandOffEscalated" },
            { 162, "AISET_StandOffInvestigateSevere" },
            { 163, "AISET_Standing" },
            { 292, "AISET_Combat_CloseToGuards" },
            { 164, "AISET_Enforcer" },
            { 165, "AISET_DisguiseEnforcer" },
            { 166, "AISET_Dead" },
            { 167, "AISET_DeadByUnnoticed" },
            { 168, "AISET_DeadBySniper" },
            { 169, "AISET_InMorgue" },
            { 290, "AISET_Combat_PrimaryRange" },
            { 170, "AISET_InAccident" },
            { 171, "AISET_Dying" },
            { 300, "AISET_Wounded" },
            { 172, "AISET_InInvestigateDisguise" },
            { 173, "AISET_InArrest" },
            { 294, "AISET_Combat_TargetSeenAtLeastOnce" },
            { 174, "AISET_Arrestor" },
            { 175, "AISET_InCombat" },
            { 288, "AISET_Combat_Brave" },
            { 176, "AISET_InCombatWithGuards" },
            { 177, "AISET_Hunted" },
            { 298, "AISET_InSentrySituation" },
            { 178, "AISET_ForceHunted" },
            { 179, "AISET_CloseCombat" },
            { 308, "AISET_InvestigateDisguiseGroupLeader" },
            { 180, "AISET_CloseCombatSlashing" },
            { 181, "AISET_TakingProjectileDamage" },
            { 302, "AISET_ReactedToTossAlerted" },
            { 182, "AISET_TakingHeadshotDamage" },
            { 183, "AISET_TakingExplosionDamage" },
            { 296, "AISET_InTheAir" },
            { 184, "AISET_TakingThrowDamage" },
            { 185, "AISET_ForceKillHM" },
            { 306, "AISET_InvestigatingMurder" },
            { 186, "AISET_Armed" },
            { 187, "AISET_BeingHumanShield" },
            { 316, "AISET_ChangingOutfitFromBody" },
            { 188, "AISET_BeingPulledOutOfWindow" },
            { 189, "AISET_BeingPushedOverRail" },
            { 310, "AISET_BodyguardVIPDead" },
            { 190, "AISET_BeingFiberwired" },
            { 191, "AISET_BeingPulledFromLedge" },
            { 304, "AISET_GettingHelp" },
            { 192, "AISET_BeingDragged" },
            { 193, "AISET_OnScreen" },
            { 378, "AISET_Infected_Stage2" },
            { 194, "AISET_ExplosionImminent" },
            { 195, "AISET_DisguiseSafeZone" },
            { 324, "AISET_StrangleVictim" },
            { 196, "AISET_DisguiseCanBlendIn" },
            { 197, "AISET_DisguiseBlendIn" },
            { 382, "AISET_Enforcer_Disable_HideInPlainSight" },
            { 198, "AISET_DisguiseBroken" },
            { 199, "AISET_InWarZone" },
            { 376, "AISET_SC_Investigator" },
            { 200, "AISET_HearLockdownAlarm" },
            { 201, "AISET_InCrowd" },
            { 322, "AISET_HasAmbientEscort" },
            { 202, "AISET_InCrowdHighDensity" },
            { 203, "AISET_InCrowdAlert" },
            { 332, "AISET_RadioCallHelpArrived" },
            { 204, "AISET_InCrowdPanic" },
            { 205, "AISET_HiddenByCrowd" },
            { 326, "AISET_Jumping" },
            { 206, "AISET_CrowdDisguise" },
            { 207, "AISET_BeingStrangled" },
            { 320, "AISET_EvacuateAfterRecover" },
            { 208, "AISET_BeingSnapNecked" },
            { 209, "AISET_BeingKnockedDown" },
            { 330, "AISET_RadioCallHelpComming" },
            { 210, "AISET_BeingContextKilled" },
            { 211, "AISET_CloseCombatTakedown" },
            { 340, "AISET_LongTermMemorySetGoal" },
            { 212, "AISET_ContextKill" },
            { 213, "AISET_ExecutePistol" },
            { 334, "AISET_VIPAtEscapeNode" },
            { 214, "AISET_PickingUpGuardedItem" },
            { 215, "AISET_SedativePoison" },
            { 328, "AISET_VIPHandleOwnCuriousInvestigation" },
            { 216, "AISET_SpawnedActor" },
            { 217, "AISET_SoundRadio" },
            { 338, "AISET_HMHasVictim" },
            { 218, "AISET_Weapon" },
            { 219, "AISET_Item" },
            { 348, "AISET_HMStunnedByNPCFlashGrenade" },
            { 220, "AISET_ItemThrown" },
            { 221, "AISET_OwnedByHM" },
            { 342, "AISET_Dropped" },
            { 222, "AISET_Coin" },
            { 223, "AISET_InLimitVisionAreaZone" },
            { 336, "AISET_InterestingLocation" },
            { 224, "AISET_InsideLimitVisionArea" },
            { 225, "AISET_BlockedByLimitVisionArea" },
            { 282, "AISET_LockedInAgility" },
            { 226, "AISET_AmbientOnly" },
            { 227, "AISET_HasBeenInCombat" },
            { 356, "AISET_Distraction_State_LeaderSelected" },
            { 228, "AISET_HitByItem" },
            { 229, "AISET_CloseCombatAllowed" },
            { 286, "AISET_VaultingOverObstacle" },
            { 230, "AISET_CollateralTarget" },
            { 231, "AISET_HuntAct" },
            { 280, "AISET_WeaponContextKnown" },
            { 232, "AISET_Sick" },
            { 233, "AISET_Stunned" },
            { 354, "AISET_ForcedLeader" },
            { 234, "AISET_Naked" },
            { 235, "AISET_Investigated" },
            { 364, "AISET_Arrest_ArrestReason" },
            { 236, "AISET_FreshBody" },
            { 237, "AISET_SeenDeadlyThrowVictim" },
            { 358, "AISET_Distraction_State_Resolved" },
            { 238, "AISET_IWillBeDeadlyThrowVictim" },
            { 239, "AISET_Suspect" },
            { 352, "AISET_ReadytoPlayInvestigationConversation" },
            { 240, "AISET_BeingFrisked" },
            { 241, "AISET_RequestFrisk" },
            { 362, "AISET_Arrest_State_Escorting" },
            { 242, "AISET_FriskComplying" },
            { 243, "AISET_FriskApproachReady" },
            { 372, "AISET_SC_PreventShooting" },
            { 244, "AISET_FriskReady" },
            { 245, "AISET_Frisked" },
            { 366, "AISET_Arrest_Warning_2" },
            { 246, "AISET_FriskFailed" },
            { 247, "AISET_FriskFoundWeapon" },
            { 360, "AISET_Distraction_Target_BeingHandled" },
            { 248, "AISET_AntiSocial" },
            { 249, "AISET_Introvert" },
            { 370, "AISET_SC_InCombatPosition" },
            { 250, "AISET_InLockdownZone" },
            { 251, "AISET_EnteringLockdownZone" },
            { 380, "AISET_Infection_Cured" },
            { 252, "AISET_InSentryZone" },
            { 253, "AISET_InSentryWarningZone" },
            { 374, "AISET_SC_CombatAct" },
            { 254, "AISET_InSentryFriskWarningZone" },
            { 255, "AISET_SuppressTrespassing" },
            { 368, "AISET_Arrest_Warning_Delay" },
            { 257, "AISET_InLockdown" },
            { 259, "AISET_CurrentTarget" },
            { 261, "AISET_RequestComplying" },
            { 263, "AISET_Silly" },
            { 265, "AISET_CombatFromEvacuate" },
            { 267, "AISET_TempCrowdKnowledge" },
            { 269, "AISET_DontReact" },
            { 271, "AISET_HardSentry" },
            { 273, "AISET_Guarded" },
            { 275, "AISET_WasInCloseCombatSawAggressor" },
            { 277, "AISET_SomeoneIsSniping" },
            { 279, "AISET_SniperLocation" },
            { 281, "AISET_Distracted" },
            { 283, "AISET_ActorAlreadyAlive" },
            { 285, "AISET_UncosciousBlamingFailed" },
            { 287, "AISET_ClimbingWindow" },
            { 289, "AISET_Combat_OneTimeBrave" },
            { 291, "AISET_Combat_ThrewFlashGrenade" },
            { 293, "AISET_Combat_RecentlySeen" },
            { 295, "AISET_InTheAirDeadly" },
            { 297, "AISET_Landing" },
            { 299, "AISET_LeftDramaWithHM" },
            { 301, "AISET_RecoveredFromWounded" },
            { 303, "AISET_ReactedToHitAlerted" },
            { 305, "AISET_HelpingCivilian" },
            { 307, "AISET_InvestigatingMurderOrGunshot" },
            { 309, "AISET_InvestigateDisguiseMovingBack" },
            { 311, "AISET_SilentlyKilled" },
            { 313, "AISET_SoundGunShot" },
            { 315, "AISET_SoundHitmanGunShotSilenced" },
            { 317, "AISET_SpeedBoost" },
            { 319, "AISET_InvestigateDisguiseMember" },
            { 321, "AISET_Woozy" },
            { 323, "AISET_IsEscortingVIP" },
            { 325, "AISET_DontStandDownIfIdling" },
            { 327, "AISET_GetHelpDone" },
            { 329, "AISET_InDangerousArea" },
            { 331, "AISET_RadioCallHelpFailed" },
            { 333, "AISET_SocialCooldown" },
            { 335, "AISET_VIPEscaping" },
            { 337, "AISET_SeeDeathExplained" },
            { 339, "AISET_PrivateSituationLeader" },
            { 341, "AISET_ThrownByHitman" },
            { 343, "AISET_InterestingItem" },
            { 344, "AISET_InEvacuateTrespassGroup" },
            { 345, "AISET_InRecoverUnconsciousGroup" },
            { 346, "AISET_Revived" },
            { 347, "AISET_IsBeggingForLife" },
            { 349, "AISET_Situation_Role_Leader" },
            { 350, "AISET_Situation_Role_Assistant" },
            { 351, "AISET_Situation_Role_AssitingGuard" },
            { 353, "AISET_ReadytoPlayStandDownConversation" },
            { 355, "AISET_PropagatedByCivilian" },
            { 357, "AISET_Distraction_State_Investigated" },
            { 359, "AISET_Distraction_State_Canceled" },
            { 361, "AISET_Arrest_State_Approaching" },
            { 363, "AISET_Arrest_State_Guarding" },
            { 365, "AISET_Arrest_Warning_1" },
            { 367, "AISET_Arrest_Warning_3" },
            { 369, "AISET_SC_Escalating" },
            { 371, "AISET_SC_Shoot" },
            { 373, "AISET_SC_PreventChangeCombatPosition" },
            { 375, "AISET_SC_InCombat" },
            { 377, "AISET_Infected" },
            { 379, "AISET_Infected_Stage3" },
            { 381, "AISET_ENFORCER_DISABLE_FLAG_BEGIN" },
            { 383, "AISET_ENFORCER_DISABLE_FLAG_END" },
            { 384, "AISET_DYNAMIC_ENFORCER_FLAG_BEGIN" },
            { 386, "AISET_DynamicEnforcer_NakedActor" },
            { 388, "AISET_DynamicEnforcer_HitByItemOrCoin" },
            { 390, "AISET_DynamicEnforcer_SillyHitman" },
            { 392, "AISET_DynamicEnforcer_SuspiciousMovement" },
            { 394, "AISET_DynamicEnforcer_Explosion" },
            { 396, "AISET_DynamicEnforcer_BulletImpactSound" },
            { 398, "AISET_DynamicEnforcer_DeadlyThrowVictim" },
            { 400, "AISET_DynamicEnforcer_SeenMurderVictimNotHeardGunshot" },
            { 402, "AISET_DynamicEnforcer_MurderAttempt" },
            { 404, "AISET_DynamicEnforcer_PacifiedBody" },
            { 406, "AISET_DYNAMIC_ENFORCER_FLAG_INCA_END" },
            { 408, "AISET_DYNAMIC_ENFORCER_DISABLE_FLAG_BEGIN" },
            { 410, "AISET_DYNAMIC_ENFORCER_DISABLE_FLAG_END" },
            { 412, "AISET_DynamicEnforcer_InvestigateWeapon" },
            { 414, "AISET_DYNAMIC_ENFORCER_ARREST_REASON_BEGIN" },
            { 416, "AISET_DynamicEnforcer_ArrestReason_MurderAttempt" },
            { 417, "AISET_DynamicEnforcer_ArrestReason_HitByItemOrCoin" },
            { 418, "AISET_DynamicEnforcer_ArrestReason_NearDeadBody" },
            { 420, "AISET_DynamicEnforcer_ArrestReason_GunshotSound" },
            { 421, "AISET_DynamicEnforcer_ArrestReason_CloseCombatSound" },
            { 422, "AISET_DynamicEnforcer_ArrestReason_BulletImpactSound" },
            { 423, "AISET_DynamicEnforcer_ArrestReason_Hunt" },
            { 424, "AISET_DynamicEnforcer_ArrestReason_Explosion" },
            { 426, "AISET_DynamicEnforcer_ArrestReason_Weapon" },
            { 428, "AISET_DynamicEnforcer_ArrestReason_KnockdownThrow" },
            { 430, "AISET_DYNAMIC_ENFORCER_ARREST_REASON_END" }
        };

        (*enum_map)["ZPathfinderDebugEntity.EDebugTestType"] = std::map<uint32_t, std::string>{
            { 0, "PATHFINDER" },
            { 1, "TRACELINE" },
            { 2, "MAP_LOCATION" },
            { 3, "REGION_MASK_WITHIN_RADIUS" }
        };

        (*enum_map)["ECombatZoneState"] = std::map<uint32_t, std::string>{
            { 0, "CZS_Inactive" },
            { 1, "CZS_Triggered" },
            { 2, "CZS_Engaged" }
        };

        (*enum_map)["ELocale"] = std::map<uint32_t, std::string>{
            { 0, "Locale_En" },
            { 1, "Locale_Fr" },
            { 2, "Locale_It" },
            { 3, "Locale_De" },
            { 4, "Locale_Es" },
            { 5, "Locale_Ru" },
            { 6, "Locale_Mx" },
            { 7, "Locale_Br" },
            { 8, "Locale_Pl" },
            { 9, "Locale_Cn" },
            { 10, "Locale_Jp" },
            { 11, "Locale_Tc" }
        };

        (*enum_map)["EGameUIMenu"] = std::map<uint32_t, std::string>{
            { 0, "eUIMenu_IntroMenu" },
            { 1, "eUIMenu_PauseMenu" },
            { 2, "eUIMenu_PhoneMenu" },
            { 3, "eUIMenu_MapMenu" },
            { 4, "eUIMenu_ModalDialogMenu" },
            { 5, "eUIMenu_GameplayMenu" },
            { 6, "eUIMenu_InventorySelectorMenu" },
            { 7, "eUIMenu_ActionSelectorMenu" },
            { 8, "eUIMenu_ActionSelectorInventoryMenu" },
            { 9, "eUIMenu_IntelSelectorMenu" },
            { 10, "eUIMenu_NotebookMenu" },
            { 11, "eUIMenu_LogbookMenu" },
            { 12, "eUIMenu_TutorialMenu" },
            { 13, "eUIMenu_SplashHintMenu" },
            { 14, "eUIMenu_EmoteMenu" },
            { 15, "eUIMenu_Count" }
        };

        (*enum_map)["EAutoScanMode"] = std::map<uint32_t, std::string>{
            { 0, "ASM_GEOMETRY" },
            { 1, "ASM_VOLUMEBOX" }
        };

        (*enum_map)["ENetRole"] = std::map<uint32_t, std::string>{
            { 0, "None" },
            { 1, "Master" },
            { 2, "Client" }
        };

        (*enum_map)["EActorCCPreset"] = std::map<uint32_t, std::string>{
            { 0, "ACCP_CivilianFemale" },
            { 1, "ACCP_CivilianeMale" },
            { 2, "ACCP_GuardMale" },
            { 3, "ACCP_GuardMaleElite" },
            { 4, "ACCP_GuardMaleSuperElite" },
            { 5, "ACCP_Ignore" },
            { 6, "ACCP_None" }
        };

        (*enum_map)["EItemRequirement"] = std::map<uint32_t, std::string>{
            { 0, "eIR_NoRequirement" },
            { 1, "eIR_RequireEmpty" },
            { 2, "eIR_RequireItem" },
            { 3, "eIR_RequireNoBigItem" }
        };

        (*enum_map)["EClothColliderFilter"] = std::map<uint32_t, std::string>{
            { 0, "EClothColliderFilter_Environment" },
            { 1, "EClothColliderFilter_Character" },
            { 2, "EClothColliderFilter_Character_Environment" }
        };

        (*enum_map)["EVsGenericEvent"] = std::map<uint32_t, std::string>{
            { 0, "eVSGE_MATCH_WON" },
            { 1, "eVSGE_MATCH_LOST" },
            { 2, "eVSGE_MATCH_DRAW" },
            { 3, "eVSGE_TARGET_LEAVING" },
            { 4, "eVSGE_TARGET_LEFT" },
            { 5, "eVSGE_TARGET_ARRIVING" },
            { 6, "eVSGE_TARGET_ARRIVED" },
            { 7, "eVSGE_RESPAWNED" },
            { 8, "eVSGE_OPPONENT_DEAD" },
            { 9, "eVSGE_OPPONENT_RESPAWNED" },
            { 10, "eVSGE_OPPONENT_GOT_WEAPON" },
            { 11, "eVSGE_OPPONENT_GOT_ITEM" },
            { 12, "eVSGE_OPPONENT_DISGUISED" },
            { 13, "eVSGE_TARGET_MISSED" },
            { 14, "eVSGE_NEXT_TARGET_MISSED" },
            { 15, "eVSGE_OPPONENT_TARGET_MISSED" },
            { 16, "eVSGE_OPPONENT_NEXT_TARGET_MISSED" },
            { 17, "eVSGE_OPPONENT_FAR_FROM_TARGET" },
            { 18, "eVSGE_OPPONENT_CLOSE_FROM_TARGET" },
            { 19, "eVSGE_OPPONENT_SCOPES_TARGET" },
            { 20, "eVSGE_MAX" }
        };

        (*enum_map)["ESmartBehaviorOrder"] = std::map<uint32_t, std::string>{
            { 0, "SBO_Stand" },
            { 1, "SBO_Move" },
            { 2, "SBO_React" },
            { 3, "SBO_Act" },
            { 4, "SBO_MoveToAct" },
            { 5, "SBO_MoveToCover" },
            { 6, "SBO_ShootFromCover" },
            { 7, "SBO_Death" },
            { 8, "SBO_Teleport" }
        };

        (*enum_map)["ZRagdollAttacherEntity.EResetMode"] = std::map<uint32_t, std::string>{
            { 0, "eAtBoneOrigin" },
            { 1, "eKeepOffset" }
        };
    }
}

std::string DirectXFormatsStrings[116] = { "DXGI_FORMAT_UNKNOWN",
"DXGI_FORMAT_R32G32B32A32_TYPELESS",
"DXGI_FORMAT_R32G32B32A32_FLOAT",
"DXGI_FORMAT_R32G32B32A32_UINT",
"DXGI_FORMAT_R32G32B32A32_SINT",
"DXGI_FORMAT_R32G32B32_TYPELESS",
"DXGI_FORMAT_R32G32B32_FLOAT",
"DXGI_FORMAT_R32G32B32_UINT",
"DXGI_FORMAT_R32G32B32_SINT",
"DXGI_FORMAT_R16G16B16A16_TYPELESS",
"DXGI_FORMAT_R16G16B16A16_FLOAT",
"DXGI_FORMAT_R16G16B16A16_UNORM",
"DXGI_FORMAT_R16G16B16A16_UINT",
"DXGI_FORMAT_R16G16B16A16_SNORM",
"DXGI_FORMAT_R16G16B16A16_SINT",
"DXGI_FORMAT_R32G32_TYPELESS",
"DXGI_FORMAT_R32G32_FLOAT",
"DXGI_FORMAT_R32G32_UINT",
"DXGI_FORMAT_R32G32_SINT",
"DXGI_FORMAT_R32G8X24_TYPELESS",
"DXGI_FORMAT_D32_FLOAT_S8X24_UINT",
"DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS",
"DXGI_FORMAT_X32_TYPELESS_G8X24_UINT",
"DXGI_FORMAT_R10G10B10A2_TYPELESS",
"DXGI_FORMAT_R10G10B10A2_UNORM",
"DXGI_FORMAT_R10G10B10A2_UINT",
"DXGI_FORMAT_R11G11B10_FLOAT",
"DXGI_FORMAT_R8G8B8A8_TYPELESS",
"DXGI_FORMAT_R8G8B8A8_UNORM",
"DXGI_FORMAT_R8G8B8A8_UNORM_SRGB",
"DXGI_FORMAT_R8G8B8A8_UINT",
"DXGI_FORMAT_R8G8B8A8_SNORM",
"DXGI_FORMAT_R8G8B8A8_SINT",
"DXGI_FORMAT_R16G16_TYPELESS",
"DXGI_FORMAT_R16G16_FLOAT",
"DXGI_FORMAT_R16G16_UNORM",
"DXGI_FORMAT_R16G16_UINT",
"DXGI_FORMAT_R16G16_SNORM",
"DXGI_FORMAT_R16G16_SINT",
"DXGI_FORMAT_R32_TYPELESS",
"DXGI_FORMAT_D32_FLOAT",
"DXGI_FORMAT_R32_FLOAT",
"DXGI_FORMAT_R32_UINT",
"DXGI_FORMAT_R32_SINT",
"DXGI_FORMAT_R24G8_TYPELESS",
"DXGI_FORMAT_D24_UNORM_S8_UINT",
"DXGI_FORMAT_R24_UNORM_X8_TYPELESS",
"DXGI_FORMAT_X24_TYPELESS_G8_UINT",
"DXGI_FORMAT_R8G8_TYPELESS",
"DXGI_FORMAT_R8G8_UNORM",
"DXGI_FORMAT_R8G8_UINT",
"DXGI_FORMAT_R8G8_SNORM",
"DXGI_FORMAT_R8G8_SINT",
"DXGI_FORMAT_R16_TYPELESS",
"DXGI_FORMAT_R16_FLOAT",
"DXGI_FORMAT_D16_UNORM",
"DXGI_FORMAT_R16_UNORM",
"DXGI_FORMAT_R16_UINT",
"DXGI_FORMAT_R16_SNORM",
"DXGI_FORMAT_R16_SINT",
"DXGI_FORMAT_R8_TYPELESS",
"DXGI_FORMAT_R8_UNORM",
"DXGI_FORMAT_R8_UINT",
"DXGI_FORMAT_R8_SNORM",
"DXGI_FORMAT_R8_SINT",
"DXGI_FORMAT_A8_UNORM",
"DXGI_FORMAT_R1_UNORM",
"DXGI_FORMAT_R9G9B9E5_SHAREDEXP",
"DXGI_FORMAT_R8G8_B8G8_UNORM",
"DXGI_FORMAT_G8R8_G8B8_UNORM",
"DXGI_FORMAT_BC1_TYPELESS",
"DXGI_FORMAT_BC1_UNORM",
"DXGI_FORMAT_BC1_UNORM_SRGB",
"DXGI_FORMAT_BC2_TYPELESS",
"DXGI_FORMAT_BC2_UNORM",
"DXGI_FORMAT_BC2_UNORM_SRGB",
"DXGI_FORMAT_BC3_TYPELESS",
"DXGI_FORMAT_BC3_UNORM",
"DXGI_FORMAT_BC3_UNORM_SRGB",
"DXGI_FORMAT_BC4_TYPELESS",
"DXGI_FORMAT_BC4_UNORM",
"DXGI_FORMAT_BC4_SNORM",
"DXGI_FORMAT_BC5_TYPELESS",
"DXGI_FORMAT_BC5_UNORM",
"DXGI_FORMAT_BC5_SNORM",
"DXGI_FORMAT_B5G6R5_UNORM",
"DXGI_FORMAT_B5G5R5A1_UNORM",
"DXGI_FORMAT_B8G8R8A8_UNORM",
"DXGI_FORMAT_B8G8R8X8_UNORM",
"DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM",
"DXGI_FORMAT_B8G8R8A8_TYPELESS",
"DXGI_FORMAT_B8G8R8A8_UNORM_SRGB",
"DXGI_FORMAT_B8G8R8X8_TYPELESS",
"DXGI_FORMAT_B8G8R8X8_UNORM_SRGB",
"DXGI_FORMAT_BC6H_TYPELESS",
"DXGI_FORMAT_BC6H_UF16",
"DXGI_FORMAT_BC6H_SF16",
"DXGI_FORMAT_BC7_TYPELESS",
"DXGI_FORMAT_BC7_UNORM",
"DXGI_FORMAT_BC7_UNORM_SRGB",
"DXGI_FORMAT_AYUV",
"DXGI_FORMAT_Y410",
"DXGI_FORMAT_Y416",
"DXGI_FORMAT_NV12",
"DXGI_FORMAT_P010",
"DXGI_FORMAT_P016",
"DXGI_FORMAT_420_OPAQUE",
"DXGI_FORMAT_YUY2",
"DXGI_FORMAT_Y210",
"DXGI_FORMAT_Y216",
"DXGI_FORMAT_NV11",
"DXGI_FORMAT_AI44",
"DXGI_FORMAT_IA44",
"DXGI_FORMAT_P8",
"DXGI_FORMAT_A8P8",
"DXGI_FORMAT_B4G4R4A4_UNORM"
};